// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\forgot-password\FortgetPassForm.tsx
// --------------------
"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useForgotPasswordMutation } from "@/redux/features/auth/authApi";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

interface ForgotPasswordFormValues {
  email: string;
}

const FortgetPassForm = () => {
  const [forgotPassword, { isLoading }] = useForgotPasswordMutation();
  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    trigger,
  } = useForm<ForgotPasswordFormValues>({
    mode: "onChange",
    defaultValues: {
      email: "",
    },
  });

  const email = watch("email");

  const onFinish = async (values: ForgotPasswordFormValues) => {
    // Validate email before proceeding
    const isEmailValid = await trigger("email");

    if (!isEmailValid) {
      toast.error("Please fix the validation errors before proceeding");
      return;
    }

    // Additional validation checks
    if (!values.email) {
      toast.error("Please enter your email address");
      return;
    }

    // Email format validation
    const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
    if (!emailRegex.test(values.email)) {
      toast.error("Please enter a valid email address");
      return;
    }

    try {
      const result = await forgotPassword(values).unwrap();
      if (result.success) {
        toast.success(
          result.message || "Reset password link sent to your email!"
        );
        router.push("/reset-password");
      } else {
        toast.error(result.message || "Something went wrong!");
      }
    } catch (error: any) {
      console.error("Forgot Password Error:", error);
      toast.error(error?.message || "Something went wrong!");
    }
  };

  return (
    <form className="space-y-4 text-left" onSubmit={handleSubmit(onFinish)}>
      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="email">
          Email
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="email"
          type="email"
          placeholder="Email"
          {...register("email", {
            required: "Email is required",
            pattern: {
              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
              message: "Invalid email address",
            },
          })}
        />
        {errors.email && (
          <p className="text-red-500 text-sm">{errors.email.message}</p>
        )}
      </div>

      <Button
        className="w-full bg-[#E25A6F] text-white py-2 rounded-md hover:bg-[#D14A5F] disabled:opacity-50"
        type="submit"
        disabled={isLoading || !isValid || !email}
      >
        {isLoading ? "Sending..." : "Send Reset Password Link"}
      </Button>
    </form>
  );
};

export default FortgetPassForm;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\forgot-password\page.tsx
// --------------------
import { Metadata } from "next";
import Link from "next/link";
import FortgetPassForm from "./FortgetPassForm";

export const metadata: Metadata = {
  title: "Forgot Password",
};

export default function ForgotPasswordPage() {
  return (
    <>
      <h2 className="text-2xl font-semibold mb-6 text-center">
        Forgot Password
      </h2>
      <FortgetPassForm />

      <p className="text-sm text-gray-600 mt-3 text-center">
        Already have an account?
        <Link href="/login" className="text-blue-500 hover:underline ml-1">
          Login
        </Link>
      </p>
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\layout.tsx
// --------------------
import { ReactNode } from "react";

export default function PublicLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-[#D6EAFF] to-[#FFE6F0]">
      <div className="bg-white text-black p-8 rounded-2xl shadow-lg min-w-96 bg-gradient-to-r from-[#F2F5FD] to-[#F9F5FA]">
        {children}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\login\LoginForm.tsx
// --------------------
// File: src/app/(auth)/login/LoginForm.tsx
"use client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useUserLoginMutation } from "@/redux/features/auth/authApi";
import { setUser } from "@/redux/features/auth/authSlice";
import { useAppDispatch } from "@/redux/hooks";
import { TUser } from "@/utils/tokenHelper";
import { jwtDecode } from "jwt-decode";
import Link from "next/link";
import { useRouter, useSearchParams } from "next/navigation";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

interface LoginFormValues {
  email: string;
  password: string;
}

const LoginForm = () => {
  const [loginUser, { isLoading }] = useUserLoginMutation();
  const dispatch = useAppDispatch();
  const router = useRouter();
  const searchParams = useSearchParams();
  const redirectUrl = searchParams.get("redirect") || "/dashboard"; // Get redirect URL

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    trigger,
  } = useForm<LoginFormValues>({
    mode: "onChange",
    defaultValues: {
      email: "",
      password: "",
    },
  });

  const email = watch("email");
  const password = watch("password");

  const onFinish = async (values: LoginFormValues) => {
    const isEmailValid = await trigger("email");
    const isPasswordValid = await trigger("password");

    if (!isEmailValid || !isPasswordValid) {
      toast.error("Please fix the validation errors before proceeding");
      return;
    }

    if (!values.email || !values.password) {
      toast.error("Please fill in all required fields");
      return;
    }

    const emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
    if (!emailRegex.test(values.email)) {
      toast.error("Please enter a valid email address");
      return;
    }

    if (values.password.length < 6) {
      toast.error("Password must be at least 6 characters long");
      return;
    }

    try {
      const result = await loginUser(values).unwrap();
      if (result.success) {
        toast.success(result.message || "You have successfully logged in!");

        const accessToken = result.data.accessToken;
        const refreshToken = result.data.refreshToken;
        const decodedToken = jwtDecode<TUser>(accessToken);

        dispatch(
          setUser({
            user: decodedToken,
            acesstoken: accessToken,
            refreshtoken: refreshToken,
          })
        );

        router.push(decodeURIComponent(redirectUrl)); // Redirect to the specified URL
      } else {
        toast.error(result.message || "Invalid email or password!");
      }
    } catch (error: any) {
      console.error("Login Error:", error);
      toast.error(error?.message || "Invalid email or password!");
    }
  };

  return (
    <form onSubmit={handleSubmit(onFinish)} className="space-y-4">
      <div>
        <Label htmlFor="email">Email/Mobile Number</Label>
        <Input
          id="email"
          type="text"
          {...register("email", {
            required: "Email is required",
          })}
        />
        {errors.email && (
          <p className="text-red-500 text-sm">{errors.email.message}</p>
        )}
      </div>

      <div>
        <Label htmlFor="password">Password</Label>
        <Input
          id="password"
          type="password"
          {...register("password", {
            required: "Password is required",
          })}
        />
        {errors.password && (
          <p className="text-red-500 text-sm">{errors.password.message}</p>
        )}
        <Link href="/forgot-password" className="text-sm text-blue-500">
          Forgot Password?
        </Link>
      </div>

      <Button
        className="w-full bg-[#E25A6F] text-white py-2 rounded-md hover:bg-[#D14A5F] disabled:opacity-50"
        type="submit"
        disabled={isLoading}
      >
        {isLoading ? "Logging in..." : "Login"}
      </Button>
    </form>
  );
};

export default LoginForm;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\login\page.tsx
// --------------------
import { Metadata } from "next";
import Link from "next/link";
import LoginForm from "./LoginForm";

export const metadata: Metadata = {
  title: "Login",
};

export default function LoginPage() {
  return (
    <>
      <h2 className="text-2xl font-semibold mb-6 text-center">Login</h2>
      <LoginForm />
      <p className="text-sm text-gray-600 mt-3 text-center">
        Don&apos;t have an account?
        <Link href="/register" className="text-blue-500 hover:underline ml-1">
          Register
        </Link>
      </p>
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\register\page.tsx
// --------------------
import { Metadata } from "next";
import Link from "next/link";
import RegisterForm from "./RegisterForm";

export const metadata: Metadata = {
  title: "Registration",
};

export default function RegistrationPage() {
  return (
    <>
      <h2 className="text-2xl font-semibold mb-6 text-center">Registration</h2>
      <RegisterForm />

      <p className="text-sm mt-3 text-center">
        Already have an account?
        <Link href="/login" className="text-blue-500 hover:underline ml-1">
          Login
        </Link>
      </p>
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\register\RegisterForm.tsx
// --------------------
"use client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useUserRegisterMutation } from "@/redux/features/auth/authApi";
import { useAppDispatch } from "@/redux/hooks";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

interface RegisterFormValues {
  name: string;
  email: string;
  phoneNumber: string;
  password: string;
  accountType: string;
}

const RegisterForm = () => {
  const accountTypes = [
    "পাত্র/পাত্রী হিসেবে",
    "অভিভাবক হিসেবে",
    "ঘটক হিসেবে",
    "ভিজিটর হিসেবে",
  ];
  const [accountType, setAccountType] = useState("");
  const [registerUser, { isLoading }] = useUserRegisterMutation();
  const dispatch = useAppDispatch();
  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterFormValues>({
    mode: "onChange",
  });

  const onFinish = async (values: RegisterFormValues) => {
    if (!accountType) {
      toast.error("Please select an account type");
      return;
    }

    console.log(values);
    const registerData = {
      name: values.name,
      email: values.email,
      phoneNumber: values.phoneNumber,
      password: values.password,
      accountType: accountType,
    };
    console.log(registerData);
    try {
      const result = await registerUser(registerData).unwrap();
      if (result.success) {
        toast.success(result.message || "Successfully registered!");

        router.push("/login");
      }
    } catch (error: any) {
      console.error("Register Error:", error);
      toast.error(error?.message || "Failed to register!");
    }
  };

  return (
    <form className="space-y-4 text-left" onSubmit={handleSubmit(onFinish)}>
      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="name">
          Name
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="name"
          type="text"
          placeholder="Name"
          {...register("name", {
            required: "Name is required",
            minLength: {
              value: 2,
              message: "Name must be at least 2 characters",
            },
          })}
        />
        {errors.name && (
          <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="email">
          Email
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="email"
          type="email"
          placeholder="Email"
          {...register("email", {
            required: "Email is required",
            pattern: {
              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
              message: "Invalid email address",
            },
          })}
        />
        {errors.email && (
          <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="mobile">
          Mobile Number
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="mobile"
          type="text"
          placeholder="Mobile Number"
          {...register("phoneNumber", {
            required: "Mobile Number is required",
            pattern: {
              value: /^[0-9]{11}$/,
              message: "Please enter a valid 11-digit mobile number",
            },
          })}
        />
        {errors.phoneNumber && (
          <p className="text-red-500 text-sm mt-1">
            {errors.phoneNumber.message}
          </p>
        )}
      </div>

      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="password">
          Password
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="password"
          type="password"
          placeholder="Password"
          {...register("password", {
            required: "Password is required",
            minLength: {
              value: 6,
              message: "Password must be at least 6 characters",
            },
          })}
        />
        {errors.password && (
          <p className="text-red-500 text-sm mt-1">{errors.password.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label className="block font-medium">
          সহজনিকাহ ম্যাট্রিমনিতে কি ভূমিকায় একাউন্ট খুলছেন?
        </Label>
        <RadioGroup
          className="flex flex-col gap-3"
          value={accountType}
          onValueChange={setAccountType}
        >
          {accountTypes.map((type) => (
            <Label key={type} className="flex items-center space-x-2">
              <RadioGroupItem value={type} id={type} />
              <span className="capitalize">{type}</span>
            </Label>
          ))}
        </RadioGroup>
        {!accountType && (
          <p className="text-red-500 text-sm mt-1">
            Please select an account type
          </p>
        )}
      </div>

      <Button
        className="w-full bg-[#E25A6F] text-white py-2 rounded-md hover:bg-[#D14A5F] disabled:opacity-50"
        type="submit"
        disabled={isLoading}
      >
        {isLoading ? "Registering..." : "Register"}
      </Button>
    </form>
  );
};

export default RegisterForm;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\reset-password\page.tsx
// --------------------
import { Metadata } from "next";
import Link from "next/link";
import ResetPassForm from "./ResetPassForm";

export const metadata: Metadata = {
  title: "Reset Password",
};

export default function ResetPasswordPage() {
  return (
    <>
      <h2 className="text-2xl font-semibold mb-6 text-center">
        Reset Password
      </h2>
      <ResetPassForm />
      <p className="text-sm text-gray-600 mt-3 text-center">
        Already have an account?
        <Link href="/login" className="text-blue-500 hover:underline ml-1">
          Login
        </Link>
      </p>
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(auth)\reset-password\ResetPassForm.tsx
// --------------------
"use client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useResetPasswordMutation } from "@/redux/features/auth/authApi";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { toast } from "sonner";

interface ResetPasswordFormValues {
  newPassword: string;
  confirmPassword: string;
}

const ResetPassForm = () => {
  const [resetPassword, { isLoading }] = useResetPasswordMutation();
  const router = useRouter();

  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    trigger,
  } = useForm<ResetPasswordFormValues>({
    mode: "onChange",
    defaultValues: {
      newPassword: "",
      confirmPassword: "",
    },
  });

  const newPassword = watch("newPassword");
  const confirmPassword = watch("confirmPassword");

  const onFinish = async (values: ResetPasswordFormValues) => {
    // Validate all fields before proceeding
    const isNewPasswordValid = await trigger("newPassword");
    const isConfirmPasswordValid = await trigger("confirmPassword");

    if (!isNewPasswordValid || !isConfirmPasswordValid) {
      toast.error("Please fix the validation errors before proceeding");
      return;
    }

    // Additional validation checks
    if (!values.newPassword || !values.confirmPassword) {
      toast.error("Please fill in all required fields");
      return;
    }

    // Password length validation
    if (values.newPassword.length < 6) {
      toast.error("Password must be at least 6 characters long");
      return;
    }

    // Password match validation
    if (values.newPassword !== values.confirmPassword) {
      toast.error("Passwords do not match");
      return;
    }

    try {
      const result = await resetPassword({
        newPassword: values.newPassword,
      }).unwrap();
      if (result.success) {
        toast.success(result.message || "Password reset successful!");
        router.push("/login");
      } else {
        toast.error(result.message || "Something went wrong!");
      }
    } catch (error: any) {
      console.error("Reset Password Error:", error);
      toast.error(error?.message || "Something went wrong!");
    }
  };

  return (
    <form className="space-y-4 text-left" onSubmit={handleSubmit(onFinish)}>
      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="newPassword">
          New Password
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="newPassword"
          type="password"
          placeholder="New Password"
          {...register("newPassword", {
            required: "New password is required",
            minLength: {
              value: 6,
              message: "Password must be at least 6 characters",
            },
          })}
        />
        {errors.newPassword && (
          <p className="text-red-500 text-sm">{errors.newPassword.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label className="block font-medium" htmlFor="confirmPassword">
          Confirm Password
        </Label>
        <Input
          className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
          id="confirmPassword"
          type="password"
          placeholder="Confirm Password"
          {...register("confirmPassword", {
            required: "Please confirm your password",
            validate: (value) =>
              value === newPassword || "Passwords do not match",
          })}
        />
        {errors.confirmPassword && (
          <p className="text-red-500 text-sm">
            {errors.confirmPassword.message}
          </p>
        )}
      </div>

      <Button
        className="w-full bg-[#E25A6F] text-white py-2 rounded-md hover:bg-[#D14A5F] disabled:opacity-50"
        type="submit"
        disabled={isLoading || !isValid || !newPassword || !confirmPassword}
      >
        {isLoading ? "Submitting..." : "Submit"}
      </Button>
    </form>
  );
};

export default ResetPassForm;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\BiodataEditor.tsx
// --------------------
// File: src/app/(main)/biodata-editor/BiodataEditor.tsx

"use client";

import { useCreateBiodataMutation } from "@/redux/features/admin/biodataApi";
import {
  clearBiodataFormData,
  updateBiodataFormData,
} from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch, useAppSelector } from "@/redux/hooks";
import { useRouter, useSearchParams } from "next/navigation";
import { useCallback, useEffect, useMemo } from "react";
import { toast } from "sonner";
import Breadcrumbs from "./biodataFormComponents/Breadcrumbs";
import { steps } from "./steps";

// Map step keys to Redux state keys
const stepKeyToStateKey: Record<string, string> = {
  "first-words": "firstWordsFormData",
  "primary-info": "primaryInfoFormData",
  "general-info": "generalInfoFormData",
  "address-info": "addressInfoFormData",
  "education-info": "educationInfoFormData",
  "occupation-info": "occupationInfoFormData",
  "family-info": "familyInfoFormData",
  "religious-info": "religiousInfoFormData",
  "personal-info": "personalInfoFormData",
  "marriage-info": "marriageInfoFormData",
  "spouse-preference-info": "spousePreferenceInfoFormData",
  "profile-pic": "profilePicFormData",
  "final-words": "finalWordsFormData",
};

interface BiodataEditorProps {
  biodataToEdit: any | null;
}

export default function BiodataEditor({ biodataToEdit }: BiodataEditorProps) {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const biodataFormData = useAppSelector(
    (state) => state.biodata.biodataFormData
  );
  const { user, acesstoken } = useAppSelector((state) => state.auth);
  const [createBiodata, { isLoading }] = useCreateBiodataMutation();

  const searchParams = useSearchParams();
  const currentStepKey = searchParams.get("step") || steps[0].key;
  const currentStep = useMemo(
    () => steps.find((x) => x.key === currentStepKey),
    [currentStepKey]
  );

  useEffect(() => {
    if (!user || !acesstoken) {
      const redirectUrl = `/biodata-editor?step=${currentStepKey}`;
      router.push(`/login?redirect=${encodeURIComponent(redirectUrl)}`);
    }
  }, [user, acesstoken, router, currentStepKey]);

  const setStep = useCallback(
    (key: string) => {
      const newSearchParams = new URLSearchParams(searchParams);
      newSearchParams.set("step", key);
      window.history.pushState(null, "", `?${newSearchParams.toString()}`);
    },
    [searchParams]
  );

  const FormComponent = useMemo(() => currentStep?.component, [currentStep]);

  const handleFormDataUpdate = useCallback(
    (data: any) => {
      const cleanData = JSON.parse(JSON.stringify(data));
      const stateKey = stepKeyToStateKey[currentStepKey] || currentStepKey;
      dispatch(
        updateBiodataFormData({
          key: stateKey,
          data: cleanData,
        })
      );
    },
    [dispatch, currentStepKey]
  );

  const handleSave = useCallback(async () => {
    if (!currentStep || !user) return;

    if (currentStep.key === "final-words") {
      try {
        const completeBiodata = {
          userId: user.userId,
          ...JSON.parse(JSON.stringify(biodataFormData)),
        };
        const result = await createBiodata(completeBiodata).unwrap();
        if (result.success) {
          toast.success("Biodata created successfully!");
          dispatch(clearBiodataFormData());
          setStep(steps[0].key);
          router.push("/dashboard");
        } else {
          toast.error(result.message || "Failed to create biodata.");
        }
      } catch (error: any) {
        console.error("Failed to save biodata:", error);
        toast.error(error?.message || "Failed to create biodata.");
      }
    } else {
      setStep(currentStep.next);
    }
  }, [
    currentStep,
    biodataFormData,
    setStep,
    dispatch,
    createBiodata,
    user,
    router,
  ]);

  if (!FormComponent || !user) return null;

  return (
    <div className="container mx-auto p-4">
      <Breadcrumbs currentStep={currentStepKey} setCurrentStep={setStep} />
      <FormComponent
        biodataFormData={biodataFormData}
        setBiodataFormData={handleFormDataUpdate}
        handleSave={handleSave}
        currentStep={currentStep}
        setCurrentStep={setStep}
      />
      {process.env.NODE_ENV === "development" && (
        <pre>{JSON.stringify(biodataFormData, null, 2)}</pre>
      )}
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/AddressInfo.tsx

"use client";

// import { Button } from "@/components/ui/button";
// import {
//   Form,
//   FormControl,
//   FormField,
//   FormItem,
//   FormLabel,
//   FormMessage,
// } from "@/components/ui/form";
// import { Input } from "@/components/ui/input";
// import { Label } from "@/components/ui/label";
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
// import {
//   Select,
//   SelectContent,
//   SelectItem,
//   SelectTrigger,
//   SelectValue,
// } from "@/components/ui/select";
// import { citizenshipOptions, locations, types } from "@/lib/consts";
// import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
// import { addressInfoFormData } from "@/lib/validations";
// import { zodResolver } from "@hookform/resolvers/zod";
// import { Minus, Plus } from "lucide-react";
// import { useEffect, useState } from "react";
// import { useFieldArray, useForm } from "react-hook-form";

// export default function AddressInfo({
//   biodataFormData,
//   setBiodataFormData,
//   handleSave,
//   currentStep,
//   setCurrentStep,
// }: BiodataFormDataProps) {
//   const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

//   const form = useForm<AddressInfoFormData>({
//     resolver: zodResolver(addressInfoFormData),
//     defaultValues: {
//       addresses: biodataFormData?.addressInfoFormData?.addresses || [
//         {
//           type: "",
//           location: "",
//           state: "",
//           city: "",
//           detail: "",
//           country: "",
//           cityzenshipStatus: "",
//         },
//       ],
//     },
//   });

//   const { fields, append, remove } = useFieldArray({
//     control: form.control,
//     name: "addresses",
//   });

//   useEffect(() => {
//     const { unsubscribe } = form.watch(async (values) => {
//       if (submittedOnce) {
//         await form.trigger();
//       }
//       setBiodataFormData({
//         ...biodataFormData,
//         addressInfoFormData: { ...values },
//       });
//     });
//     return unsubscribe;
//   }, [
//     submittedOnce,
//     setSubmittedOnce,
//     form,
//     biodataFormData,
//     setBiodataFormData,
//   ]);

//   const handleNextClick = async () => {
//     setSubmittedOnce(true);
//     const isValid = await form.trigger();
//     if (isValid) {
//       handleSave();
//     }
//   };

//   return (
//     <div className="flex flex-col items-center justify-center space-y-8">
//       <div className="text-3xl text-center text-black">ঠিকানা</div>
//       <Form {...form}>
//         <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
//           {fields.map((field, index) => (
//             <div
//               className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
//               key={field.id}
//             >
//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.type`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার ধরন:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="ঠিকানার ধরন" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {types.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                         <Button
//                           type="button"
//                           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
//                           onClick={() => remove(index)}
//                         >
//                           <Minus size={20} />
//                         </Button>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.location`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       অবস্থান ধরণ:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="অবস্থান ধরণ:" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {locations.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.state`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "স্টেট"
//                       : "স্থায়ী জেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         {label}:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.city`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "শহর"
//                       : "স্থায়ী উপজেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         <div>{label}:</div>
//                         <div className="text-xs">(যদি থাকে)</div>
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.detail`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার বিস্তারিত:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Input
//                             {...field}
//                             className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                             type="text"
//                             placeholder="ঠিকানার বিস্তারিত"
//                           />
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.country`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         দেশের নাম:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               id="emailMobileNumber"
//                               type="text"
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.cityzenshipStatus`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         সিটিজেনশিপ আছে?
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <RadioGroup
//                               className="w-full flex flex-wrap gap-0 min-h-12"
//                               onValueChange={field.onChange}
//                               value={field.value}
//                             >
//                               {citizenshipOptions.map((x) => (
//                                 <div
//                                   key={x.id}
//                                   className="w-1/3 flex items-center space-x-2"
//                                 >
//                                   <RadioGroupItem value={x.id} id={x.id} />
//                                   <Label htmlFor={x.id}>{x.title}</Label>
//                                 </div>
//                               ))}
//                             </RadioGroup>
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//             </div>
//           ))}

//           {/* Add New Address */}
//           <Button
//             type="button"
//             className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
//             onClick={() =>
//               append({
//                 type: "",
//                 location: "",
//                 state: "",
//                 city: "",
//                 detail: "",
//                 country: "",
//                 cityzenshipStatus: "",
//               })
//             }
//           >
//             <Plus size={20} /> <span>নতুন ঠিকানা যোগ করুন</span>
//           </Button>
//         </form>
//       </Form>

//       <div className="max-w-4xl w-full space-x-2 flex justify-center">
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={() => setCurrentStep(currentStep.prev)}
//         >
//           Previous
//         </Button>
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={handleNextClick}
//         >
//           Next
//         </Button>
//       </div>
//     </div>
//   );
// }

"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { citizenshipOptions, locations, types } from "@/lib/consts";
import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
import { addressInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function AddressInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState(false);

  const form = useForm<AddressInfoFormData>({
    resolver: zodResolver(addressInfoFormData),
    defaultValues: {
      addresses:
        biodataFormData?.addressInfoFormData?.addresses?.length > 0
          ? biodataFormData.addressInfoFormData.addresses
          : [
              {
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "addresses",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({ addressInfoFormData: values }); // Update Redux with form data
    });
    return unsubscribe;
  }, [submittedOnce, form, setBiodataFormData]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">ঠিকানা</h2>
      <Form {...form}>
        <form className="space-y-4">
          {fields.map((field, index) => (
            <div key={field.id} className="space-y-4 border p-4 rounded-md">
              <FormField
                control={form.control}
                name={`addresses.${index}.type`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার ধরন:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {types.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                    {fields.length > 1 && (
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        onClick={() => remove(index)}
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    )}
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.location`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>অবস্থান ধরণ:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {locations.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.state`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "স্টেট"
                      : "স্থায়ী জেলা";
                  return (
                    <FormItem>
                      <FormLabel>{label}:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.city`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "শহর"
                      : "স্থায়ী উপজেলা";
                  return (
                    <FormItem>
                      <FormLabel>
                        {label}:{" "}
                        <span className="text-muted-foreground">
                          (যদি থাকে)
                        </span>
                      </FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.detail`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার বিস্তারিত:</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="উল্লেখ করুন" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.country`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>দেশের নাম:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.cityzenshipStatus`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>সিটিজেনশিপ আছে?</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="নির্বাচন করুন" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {citizenshipOptions.map((x) => (
                            <SelectItem key={x.id} value={x.id}>
                              {x.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>
          ))}
          <Button
            type="button"
            variant="outline"
            onClick={() =>
              append({
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              })
            }
          >
            <Plus className="h-4 w-4 mr-2" /> নতুন ঠিকানা যোগ করুন
          </Button>
        </form>
      </Form>
      <div className="flex justify-between mt-4">
        <Button
          variant="outline"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\Breadcrumbs.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/Breadcrumbs.tsx

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
} from "@/components/ui/breadcrumb";
import { steps } from "../steps";

interface BreadcrumbsProps {
  currentStep: string;
  setCurrentStep: (step: string) => void;
}

export default function Breadcrumbs({
  currentStep,

  setCurrentStep,
}: BreadcrumbsProps) {
  return (
    <Breadcrumb className="max-w-6xl bg-[#f6f6f6] rounded-2xl p-2">
      <BreadcrumbList className="flex justify-center">
        {steps.map((step) => (
          <BreadcrumbItem
            key={step.key}
            className="text-[#004972] rounded-full"
          >
            {step.key === currentStep ? (
              <BreadcrumbPage className="bg-[#e25a6f] text-white px-3 py-2 rounded-full">
                {step.title}
              </BreadcrumbPage>
            ) : (
              <BreadcrumbLink
                asChild
                className="hover:text-[#e25a6f] px-3 py-2 cursor-pointer"
              >
                <button onClick={() => setCurrentStep(step.key)}>
                  {step.title}
                </button>
              </BreadcrumbLink>
            )}
          </BreadcrumbItem>
        ))}
      </BreadcrumbList>
    </Breadcrumb>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\EducationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/EducationInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { educationTypes, religiousEducation } from "@/lib/consts";
import { BiodataFormDataProps, EducationInfoFormData } from "@/lib/types";
import { educationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function EducationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<EducationInfoFormData>({
    resolver: zodResolver(educationInfoFormData),
    defaultValues: {
      type: biodataFormData?.educationInfoFormData?.type || "",
      highestDegree:
        biodataFormData?.educationInfoFormData?.highestDegree || "",
      degrees:
        biodataFormData?.educationInfoFormData?.degrees?.length > 0
          ? biodataFormData?.educationInfoFormData?.degrees.map((x) => {
              return {
                name: x.name,
                passYear: x.passYear,
                group: x.group,
                institute: x.institute,
              };
            })
          : [{ name: "", passYear: "", group: "", institute: "" }],
      religiousEducation:
        biodataFormData?.educationInfoFormData?.religiousEducation || [],
      detail: biodataFormData?.educationInfoFormData?.detail || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        educationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "degrees",
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">শিক্ষাগত যোগ্যতা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষার ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="শিক্ষার ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {educationTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="highestDegree"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার সর্বোচ্চ শিক্ষাগত ডিগ্রীর নাম:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="text-[#E25A6F]">
            মাধ্যমিক পর্যায় থেকে শুরু করে এখন পর্যন্ত যেসকল ডিগ্রী অর্জন করেছেন
            বা চলমান রয়েছে সেগুলো নিচে প্লাস বাটন চাপ দিয়ে ধাপে ধাপে যুক্ত করুন।
            কোনো ডিগ্রী না থাকলে খালি রাখুন।
          </div>
          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`degrees.${index}.name`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ডিগ্রীর নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center space-x-2">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="ডিগ্রীর নাম"
                          />
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.passYear`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পাশের সন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পাশের সন"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.group`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বিভাগ/বিষয়:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বিভাগ/বিষয়"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.institute`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      শিক্ষা প্রতিষ্ঠানের নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="শিক্ষা প্রতিষ্ঠানের নাম"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                name: "",
                passYear: "",
                group: "",
                institute: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ডিগ্রী যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="religiousEducation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value?.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষা সম্পর্কিত আরো কিছু জানাতে চাইলে নিচে লিখুন। অন্যথায়
                    খালি রাখুন।
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FamilyInfo.tsx

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { familyBackgrounds, familyTypes, siblingTypes } from "@/lib/consts";
import { BiodataFormDataProps, FamilyInfoFormData } from "@/lib/types";
import { familyInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function FamilyInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FamilyInfoFormData>({
    resolver: zodResolver(familyInfoFormData),
    defaultValues: {
      parentsAlive: biodataFormData?.familyInfoFormData?.parentsAlive || "",
      fatherOccupation:
        biodataFormData?.familyInfoFormData?.fatherOccupation || "",
      motherOccupation:
        biodataFormData?.familyInfoFormData?.motherOccupation || "",
      siblings: biodataFormData?.familyInfoFormData?.siblings || [],
      fatherSideDetail:
        biodataFormData?.familyInfoFormData?.fatherSideDetail || "",
      motherSideDetail:
        biodataFormData?.familyInfoFormData?.motherSideDetail || "",
      familyType: biodataFormData?.familyInfoFormData?.familyType || "",
      familyBackground:
        biodataFormData?.familyInfoFormData?.familyBackground || "",
      livingCondition:
        biodataFormData?.familyInfoFormData?.livingCondition || "",
      wealthDescription:
        biodataFormData?.familyInfoFormData?.wealthDescription || "",
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "siblings",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        familyInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পারিবারিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="parentsAlive"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পিতা-মাতা উভয়েই জীবিত আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনার পিতা-মাতা উভয়েই জীবিত আছেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`siblings.${index}.type`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ভাই/বোন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Select
                            value={field.value}
                            onValueChange={field.onChange}
                          >
                            <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                              <SelectValue placeholder="ভাই/বোন" />
                            </SelectTrigger>
                            <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                              {siblingTypes.map((x) => (
                                <SelectItem
                                  key={x.id}
                                  className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                                  value={x.id}
                                >
                                  {x.title}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.occupation`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পেশা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পেশা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.maritalStatus`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বৈবাহিক অবস্থা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বৈবাহিক অবস্থা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.children`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      সন্তান সংখ্যা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="সন্তান সংখ্যা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                type: "",
                occupation: "",
                maritalStatus: "",
                children: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ভাই/বোন যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="fatherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    চাচা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="চাচা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মামা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মামা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের অর্থনৈতিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyBackgrounds.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="livingCondition"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া
                    বাড়িতে?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="wealthDescription"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FinalWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FinalWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Label } from "@/components/ui/label";
import { BiodataFormDataProps, FinalWordsFormData } from "@/lib/types";
import { finalWordsFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function FinalWords({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FinalWordsFormData>({
    resolver: zodResolver(finalWordsFormData),
    defaultValues: {
      postApprovalOathTruthfulInfo:
        biodataFormData?.finalWordsFormData?.postApprovalOathTruthfulInfo ||
        false,
      postApprovalOathNoMisuse:
        biodataFormData?.finalWordsFormData?.postApprovalOathNoMisuse || false,
      postApprovalOathLegalResponsibility:
        biodataFormData?.finalWordsFormData
          ?.postApprovalOathLegalResponsibility || false,
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        finalWordsFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">শেষ কথা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-10 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl text-center">
            প্রতিশ্রুতি নামা
          </div>
          <div className="text-[#cd0000] space-y-3">
            <div className="flex items-center space-x-2">
              <Label htmlFor="preApprove1" className="text-[#6C0011] leading-5">
                আমি আল্লাহর নামে শপথ করছি যে,
              </Label>
            </div>
            <FormField
              control={form.control}
              name="postApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি বায়োডাটায় সকল তথ্য সত্য প্রদান করেছি।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathNoMisuse"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      সহজনিকাহ ম্যাট্রিমনি ওয়েবসাইটের কোনো তথ্য অসৎ কাজে ব্যবহার
                      করবো না।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      কোনো মিথ্যা তথ্য প্রদান করলে বা কোনো তথ্য অসৎ কাজে ব্যবহার
                      করে থাকলে, দুনিয়াবী যেকোনো আইনী জটিলতা এবং পরকালীন সকল
                      দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-ful">
        <Button className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]">
          Submit and Send For Approval
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FirstWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FirstWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { FirstWordsFormData } from "@/lib/types";
import { firstWordsFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import { useForm } from "react-hook-form";

interface BiodataFormDataProps {
  biodataFormData: any;
  handleSave: () => void;
  currentStep: any;
  setCurrentStep: (step: string) => void;
}

export default function FirstWords({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FirstWordsFormData>({
    resolver: zodResolver(firstWordsFormData),
    defaultValues: {
      preApprovalAcceptTerms:
        biodataFormData?.firstWordsFormData?.preApprovalAcceptTerms || false,
      preApprovalOathTruthfulInfo:
        biodataFormData?.firstWordsFormData?.preApprovalOathTruthfulInfo ||
        false,
      preApprovalOathLegalResponsibility:
        biodataFormData?.firstWordsFormData
          ?.preApprovalOathLegalResponsibility || false,
    },
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      // Only update if we have valid values
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "firstWordsFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">
        বায়োডাটা তৈরির পূর্বে কিছু গুরুত্বপূর্ণ কথা
      </div>
      <div className="max-w-4xl w-full space-y-4 text-sm text-black">
        <div>
          আপনি যখন সহজনিকাহ ম্যাট্রিমনিতে জীবনসঙ্গী খুঁজতে এসেছেন, এর মানে হলো,
          আপনি বিবাহের একটি অত্যন্ত গুরুত্বপূর্ণ অধ্যায় অতিবাহিত করছেন। চাকরির
          জন্য যেমন সুন্দর করে গুছিয়ে একটি সিভি তৈরি করা হয়, ঠিক তেমনি
          জীবনসঙ্গী নির্বাচনের ক্ষেত্রে আরও বেশি সুন্দর করে এবং গুরুত্ব দিয়ে
          বায়োডাটা তৈরি করা উচিত। কেননা যিনি আপনার কাছে জীবনসঙ্গী হয়ে আসবেন,
          তিনি যেন এই বায়োডাটার মাধ্যমে আপনাকে সঠিকভাবে জানাতে এবং বুঝতে পারেন।
        </div>
        <div>
          তাই সময় নিয়ে, মনোযোগ দিয়ে আপনার বায়োডাটা গুছিয়ে তৈরি করুন। প্রতিটি
          প্রশ্নের উত্তর সত্য এবং সঠিকভাবে দিন এবং নিশ্চিত করুন যে, তথ্যগুলো
          আপনাকে অপরপক্ষের কাছে সঠিকভাবে উপস্থাপন করছে। সম্পূর্ণ বায়োডাটা
          তৈরিতে বেশ কিছুটা সময় লাগবে, কারণ এখানে অনেকগুলো প্রশ্ন আছে। কাজেই
          ধৈর্য্য সহকারে, বেশ কিছুটা সময় নিয়ে বায়োডাটা ফর্ম পূরণ করুন।
          (আনুমানিক ৩০ মিনিট)
        </div>
        <div>
          বি: দ্র:{" "}
          <span className="text-[#005A8B]">
            আপনার এই বায়োডাটা কেউ পছন্দ করলে এবং আপনার সাথে যোগাযোগ করতে চাইলে
            শুধুমাত্র আপনার অভিভাবকের যোগাযোগের মোবাইল নম্বর প্রদান করা হবে।
            একইভাবে আপনিও কোনো বায়োডাটার যোগাযোগ তথ্য নিতে চাইলে শুধুমাত্র
            অভিভাবকের যোগাযোগ নম্বর নিতে পারবেন।
          </span>
        </div>
      </div>
      <div className="max-w-4xl w-full bg-[#f6f6f6] py-6 px-12 space-y-4 text-black rounded-4xl">
        <div className="text-[#005A8B] text-xl">
          বায়োডাটা অ্যাপ্রুভ হওয়ার শর্তসমূহ:
        </div>
        <div className="text-sm">
          <ol className="list-decimal space-y-1">
            <li>
              অবশ্যই মুসলিম হতে হবে। সহজনিকাহ শুধুমাত্র প্রাক্টিসিং,
              নন-প্রাক্টিসিং সহ সকল ধরণের মুসলিমদের নিয়ে কাজ করে থাকে।
            </li>
            <li>
              ছেলেদের বয়স কমপক্ষে ২১ বছর এবং মেয়েদের ক্ষেত্রে ১৮ বছর হতে হবে।
            </li>
            <li>
              অভিভাবকের যোগাযোগ তথ্যের ঘরে পাত্র/পাত্রীর নিজের বা বন্ধুর মোবাইল
              নম্বর প্রদান করা যাবে না।
            </li>
            <li>
              বাংলা, ইংলিশ মিশ্রিত বাংলিশ ভাষায় লেখা যাবে না। পুরোটাই বাংলায়
              অথবা পুরোটাই ইংরেজিতে লিখতে হবে।
            </li>
            <li>
              নিজের শিক্ষা, পেশা এবং পারিবারিক তথ্যে বিস্তারিত উত্তর লিখতে হবে।
            </li>
            <li>
              তথ্য ভেরিফিকেশনের সময় বায়োডাটায় দেওয়া তথ্যের সাথে মিল থাকতে হবে।
            </li>
          </ol>
        </div>
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-6 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl">প্রতিশ্রুতি নামা:</div>
          <div className="text-[#cd0000] space-y-2">
            <FormField
              control={form.control}
              name="preApprovalAcceptTerms"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি শর্তসমূহ পড়েছি এবং তা মেনে চলার প্রতিশ্রুতি দিচ্ছি।
                    </FormLabel>

                    {/* <FormDescription>
                      Describe what this resume is for.
                    </FormDescription> */}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আল্লাহর নামে শপথ করছি যে, বায়োডাটায় সকল তথ্য সত্য
                      প্রদান করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আরও শপথ করছি যে, কোনো মিথ্যা তথ্য প্রদান করলে দুনিয়াবী
                      যেকোনো আইনী জটিলতা এবং পরকালীন সকল দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/GeneralInfo.tsx

"use client";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  bloodGroups,
  heights,
  maritalStatuses,
  nationalities,
  skinTones,
} from "@/lib/consts";
import { BiodataFormDataProps, GeneralInfoFormData } from "@/lib/types";
import { cn } from "@/lib/utils";
import { generalInfoFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { useState } from "react";
import { useForm } from "react-hook-form";

export default function GeneralInfo({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<GeneralInfoFormData>({
    resolver: zodResolver(generalInfoFormData),
    defaultValues: {
      dateOfBirth: biodataFormData?.generalInfoFormData?.dateOfBirth || "",
      maritalStatus: biodataFormData?.generalInfoFormData?.maritalStatus || "",
      skinTone: biodataFormData?.generalInfoFormData?.skinTone || "",
      height: biodataFormData?.generalInfoFormData?.height || "",
      weight: biodataFormData?.generalInfoFormData?.weight || "",
      bloodGroup: biodataFormData?.generalInfoFormData?.bloodGroup || "",
      nationality: biodataFormData?.generalInfoFormData?.nationality || "",
    },
  });

  // useEffect(() => {
  //   const { unsubscribe } = form.watch(async (values) => {
  //     if (submittedOnce) {
  //       await form.trigger();
  //     }
  //     if (Object.values(values).some((value) => value !== undefined)) {
  //       dispatch(
  //         setBiodataFormData({
  //           key: "generalInfoFormData",
  //           data: values,
  //         })
  //       );
  //     }
  //   });
  //   return unsubscribe;
  // }, [submittedOnce, form, dispatch]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "generalInfoFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  const maritalStatusOptions = maritalStatuses.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">সাধারণ তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="dateOfBirth"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জন্ম তারিখ:</div>
                    <div className="text-xs">(আসল, সার্টিফিকেট অনুযায়ী নয়)</div>
                  </FormLabel>
                  <FormControl>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          className={cn(
                            "p-6 w-full bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {field.value ? (
                            format(field.value, "PPP")
                          ) : (
                            <span>জন্ম তারিখ</span>
                          )}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          className="bg-[#005889]"
                          classNames={{
                            day_selected: "bg-[#E25A6F]",
                            day_today: "bg-white text-black",
                          }}
                          mode="single"
                          selected={
                            field.value ? new Date(field.value) : undefined
                          }
                          onSelect={(date) =>
                            field.onChange(date?.toISOString())
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="বৈবাহিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {maritalStatusOptions.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="গাত্রবর্ণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {skinTones.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="weight"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ওজন:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ওজন"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="bloodGroup"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    রক্তের গ্রুপ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="রক্তের গ্রুপ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {bloodGroups.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="nationality"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জাতীয়তা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="জাতীয়তা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {nationalities.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/MarriageInfo.tsx
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import { afterMarriageJobs, afterMarriageStudies } from "@/lib/consts";
import { BiodataFormDataProps, MarriageInfoFormData } from "@/lib/types";
import { marriageInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function MarriageInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<MarriageInfoFormData>({
    resolver: zodResolver(marriageInfoFormData),
    defaultValues: {
      guardianApproval:
        biodataFormData?.marriageInfoFormData?.guardianApproval || "",
      continueStudy: biodataFormData?.marriageInfoFormData?.continueStudy || "",
      careerPlan: biodataFormData?.marriageInfoFormData?.careerPlan || "",
      residence: biodataFormData?.marriageInfoFormData?.residence || "",
      arrangeHijab: biodataFormData?.marriageInfoFormData?.arrangeHijab || "",
      dowryExpectation:
        biodataFormData?.marriageInfoFormData?.dowryExpectation || "",
      allowShowingPhotoOnline:
        biodataFormData?.marriageInfoFormData?.allowShowingPhotoOnline || "",
      additionalMarriageInfo:
        biodataFormData?.marriageInfoFormData?.additionalMarriageInfo || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        marriageInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const afterMarriageStudyOptions = afterMarriageStudies.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  const afterMarriageJobOptions = afterMarriageJobs.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">বিয়ে সংক্রান্ত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="guardianApproval"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
                    <div className="text-xs">
                      (যদি অভিভাবক রাজি নাও থাকে তাহলে এর কারণ লিখুন এবং
                      সেক্ষেত্রে আপনি কেন বিবাহে আগাচ্ছেন সেটা বিস্তারিত লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="continueStudy"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?"
                      : "বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageStudyOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="careerPlan"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?"
                      : "আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageJobOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="residence"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?"
                      : "যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="arrangeHijab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে পারবেন?"
                      : "বাড়িতে বা বাহিরে পর্দা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="dowryExpectation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক / উপহার / অর্থ আশা করবেন কিনা?"
                      : "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রপক্ষকে যৌতুক / উপহার / অর্থ দিতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="allowShowingPhotoOnline"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "পাত্রীপক্ষ"
                      : "পাত্রপক্ষ"}{" "}
                    অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="additionalMarriageInfo"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>
                      বিয়ে সংক্রান্ত আরো কিছু জানাতে চাইলে এখানে লিখুন: অন্যথায়
                      খালি রাখুন।
                    </div>
                    <div className="text-xs">
                      (যেমন: পাত্র-পাত্রী সাক্ষাতের ব্যাপারে, অভিভাবকদের মতামত
                      নিয়ে, কেমন বিয়ে চান, বিয়ের পর কোন কোন বিষয় ছাড় দিতে রাজি
                      নন ইত্যাদি কিছু জানানোর থাকলে লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\OccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/OccupationInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { occupationsList } from "@/lib/consts";
import { BiodataFormDataProps, OccupationInfoFormData } from "@/lib/types";
import { occupationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function OccupationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<OccupationInfoFormData>({
    resolver: zodResolver(occupationInfoFormData),
    defaultValues: {
      occupations: biodataFormData?.occupationInfoFormData?.occupations || [],
      detail: biodataFormData?.occupationInfoFormData?.detail || "",
      monthlyIncome:
        biodataFormData?.occupationInfoFormData?.monthlyIncome || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        occupationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পেশা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="occupations"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পেশা নিয়ে বিস্তারিত লিখুন:</div>
                    <div className="text-xs">
                      (অর্থাৎ আপনার কর্মস্থল কোথায়, কি ধরণের কাজে দায়িত্বরত আছেন
                      বা পদবি কি, এগুলো নিয়ে বিস্তারিত লিখুন। পেশা না থাকলে খালি
                      রাখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="monthlyIncome"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাসিক আয়:</div>
                    <div className="text-xs">(পেশা না থাকলে খালি রাখুন।)</div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাসিক আয়"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PersonalInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { characteristics, specialCatagories } from "@/lib/consts";
import { BiodataFormDataProps, PersonalInfoFormData } from "@/lib/types";
import { personalInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function PersonalInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PersonalInfoFormData>({
    resolver: zodResolver(personalInfoFormData),
    defaultValues: {
      beardStatus: biodataFormData?.personalInfoFormData?.beardStatus || "",
      preferredOutfit:
        biodataFormData?.personalInfoFormData?.preferredOutfit || "",
      entertainmentPreferences:
        biodataFormData?.personalInfoFormData?.entertainmentPreferences || "",
      healthConditions:
        biodataFormData?.personalInfoFormData?.healthConditions || "",
      personalTraits:
        biodataFormData?.personalInfoFormData?.personalTraits || [],
      genderEqualityView:
        biodataFormData?.personalInfoFormData?.genderEqualityView || "",
      lgbtqOpinion: biodataFormData?.personalInfoFormData?.lgbtqOpinion || "",
      specialConditions:
        biodataFormData?.personalInfoFormData?.specialConditions || [],
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        personalInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const specialCatagoryOptions = specialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ব্যক্তিগত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="beardStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "আপনি দাড়ি রেখেছেন কি?"
                      : "আপনার কি দাড়ি পছন্দ?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="preferredOutfit"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পড়তে পছন্দ করেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="entertainmentPreferences"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="healthConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মানসিক বা শারীরিক কোনো রোগ আছে কি? থাকলে বিস্তারিত লিখুন।
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="personalTraits"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নিজের কিছু গুণাবলী চিহ্নিত করুন:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {characteristics.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="genderEqualityView"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lgbtqOpinion"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {specialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PrimaryInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { biodataTypes } from "@/lib/consts";
import { BiodataFormDataProps, PrimaryInfoFormData } from "@/lib/types";
import { primaryInfoFormData } from "@/lib/validations";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function PrimaryInfo({
  biodataFormData,
  setBiodataFormData, // Added missing prop
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PrimaryInfoFormData>({
    resolver: zodResolver(primaryInfoFormData),
    defaultValues: {
      biodataType: biodataFormData?.primaryInfoFormData?.biodataType || "",
      biodataFor: biodataFormData?.primaryInfoFormData?.biodataFor || "",
      fullName: biodataFormData?.primaryInfoFormData?.fullName || "",
      fatherName: biodataFormData?.primaryInfoFormData?.fatherName || "",
      motherName: biodataFormData?.primaryInfoFormData?.motherName || "",
      email: biodataFormData?.primaryInfoFormData?.email || "",
      phoneNumber: biodataFormData?.primaryInfoFormData?.phoneNumber || "",
      guardianContacts:
        Array.isArray(biodataFormData?.primaryInfoFormData?.guardianContacts) &&
        biodataFormData.primaryInfoFormData.guardianContacts.length >= 2
          ? // Create a deep copy to avoid immutability issues
            biodataFormData.primaryInfoFormData.guardianContacts.map(
              (contact) => ({
                relation: contact.relation || "",
                fullName: contact.fullName || "",
                phoneNumber: contact.phoneNumber || "",
              })
            )
          : [
              { relation: "", fullName: "", phoneNumber: "" },
              { relation: "", fullName: "", phoneNumber: "" },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "guardianContacts",
  });

  useEffect(() => {
    const subscription = form.watch((values) => {
      if (submittedOnce) {
        form.trigger(); // Trigger validation on change after submission attempt
      }
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: values as PrimaryInfoFormData,
      });
    });
    return () => subscription.unsubscribe();
  }, [form, submittedOnce, setBiodataFormData, biodataFormData]);

  const handleAppend = () => {
    append({ relation: "", fullName: "", phoneNumber: "" });
  };

  const handleRemove = (index: number) => {
    if (fields.length > 2) {
      remove(index);
    } else {
      form.setError(`guardianContacts`, {
        type: "manual",
        message: "কমপক্ষে ২ জন অভিভাবকের তথ্য প্রয়োজন।",
      });
    }
  };

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: formValues,
      });
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রাথমিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="biodataType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বায়োডাটার ধরন:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="বায়োডাটার ধরন" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {biodataTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="biodataFor"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>বায়োডাটা কার জন্য তৈরী করছেন?</div>
                    <div className="text-xs">
                      (যেমনঃ নিজের জন্য/বোনের জন্য/বন্ধুর জন্য/ভাগ্নির জন্য
                      ইত্যাদি)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fullName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
                    <div className="text-xs">
                      (NID কার্ডে যে নাম আছে। নাম বায়োডাটায় প্রকাশ করা হবে না।
                      শুধুমাত্র ভেরিফিকেশন ও অপরপক্ষকে যোগাযোগ তথ্য প্রদানের
                      ক্ষেত্রে প্রয়োজন হবে।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="সম্পূর্ণ নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>ইমেইল আইডি:</div>
                    <div className="text-xs">
                      (পাত্র/পাত্রীর সাথে আমাদের যোগাযোগের জন্য প্রয়োজন হবে।
                      অপরপক্ষ যোগাযোগ তথ্য নিতে চাইলে যুক্তিসঙ্গত কারণ বা
                      প্রয়োজন ছাড়া পাঠানো হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ইমেইল আইডি"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phoneNumber"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর মোবাইল নম্বর:</div>
                    <div className="text-xs">
                      (মোবাইল নম্বর শুধুমাত্র ভেরিফিকেশনের জন্য আমাদের কাছে
                      থাকবে। কাউকে প্রদান করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="tel"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মোবাইল নম্বর"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="flex flex-col space-y-2">
            <FormLabel className="flex items-center justify-between space-x-8">
              <div className="text-md space-y-1 leading-4.5">
                <div>পাত্র/পাত্রীর অভিভাবকের মোবাইল নম্বর:</div>
                <div className="text-xs">
                  <div>কমপক্ষে ২ টি সচল নম্বর প্রদান করতে হবে।</div>
                </div>
              </div>
              <Button
                type="button"
                className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
                onClick={handleAppend}
              >
                <Plus size={20} /> <span>নতুন নম্বর যোগ করুন</span>
              </Button>
            </FormLabel>

            <div className="space-y-2">
              {fields.map((field, index) => (
                <div className="flex space-x-2 items-center" key={field.id}>
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.relation`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="সম্পর্ক (যেমন: বাবা, মা)"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.fullName`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের নাম"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.phoneNumber`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            type="tel"
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের মোবাইল নম্বর"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {fields.length > 2 && (
                    <Button
                      type="button"
                      className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                      onClick={() => handleRemove(index)}
                    >
                      <Minus size={20} />
                    </Button>
                  )}
                </div>
              ))}
            </div>
            {form.formState.errors.guardianContacts && (
              <p className="text-red-500 text-sm">
                {form.formState.errors.guardianContacts.message}
              </p>
            )}
          </div>
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
          disabled={!currentStep.prev}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\ProfilePic.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ProfilePic.tsx

"use client";

import female1 from "@/assets/images/female-1.svg";
import female2 from "@/assets/images/female-2.svg";
import female3 from "@/assets/images/female-3.svg";
import female4 from "@/assets/images/female-4.svg";
import female5 from "@/assets/images/female-5.svg";
import female6 from "@/assets/images/female-6.svg";
import male1 from "@/assets/images/male-1.svg";
import male2 from "@/assets/images/male-2.svg";
import male3 from "@/assets/images/male-3.svg";
import male4 from "@/assets/images/male-4.svg";
import male5 from "@/assets/images/male-5.svg";
import male6 from "@/assets/images/male-6.svg";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { BiodataFormDataProps, ProfilePicFormData } from "@/lib/types";
import { profilePicFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { CheckCircle } from "lucide-react";
import Image from "next/image";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ProfilePic({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ProfilePicFormData>({
    resolver: zodResolver(profilePicFormData),
    defaultValues: {
      photoId: biodataFormData?.profilePicFormData?.photoId || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        profilePicFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const images =
    biodataFormData?.primaryInfoFormData?.biodataType === "1"
      ? [male1, male2, male3, male4, male5, male6]
      : [female1, female2, female3, female4, female5, female6];

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রোফাইল পিকচার</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="photoId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  আপনার সাথে মানানসই বা সামঞ্জস্যপূর্ণ একটি প্রোফাইল পিকচার
                  বাছাই করুন:
                </FormLabel>
                <FormControl>
                  <div className="flex flex-wrap">
                    {images.map((image, index) => (
                      <div
                        key={index}
                        className="w-1/3 mb-4 flex items-center justify-center relative"
                      >
                        <div
                          className={`border p-12 rounded-3xl cursor-pointer transition-all relative ${
                            form.getValues().photoId === image.src
                              ? "border-[#E25A6F] ring-2 ring-[#E25A6F]"
                              : "border-gray-300"
                          } `}
                          onClick={() => {
                            field.onChange(image.src);
                          }}
                        >
                          <Image
                            src={image}
                            alt={`Profile${index + 1}`}
                            width={120}
                            height={40}
                            priority
                          />
                          {form.getValues().photoId === image.src && (
                            <CheckCircle className="absolute top-4 right-4 text-[#E25A6F]" />
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ReligiousInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { madhhabs, religiousIdeologies } from "@/lib/consts";
import { BiodataFormDataProps, ReligiousInfoFormData } from "@/lib/types";
import { religiousInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ReligiousInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ReligiousInfoFormData>({
    resolver: zodResolver(religiousInfoFormData),
    defaultValues: {
      type: biodataFormData?.religiousInfoFormData?.type || "",
      ideology: biodataFormData?.religiousInfoFormData?.ideology || "",
      madhab: biodataFormData?.religiousInfoFormData?.madhab || "",
      praysFiveTimes:
        biodataFormData?.religiousInfoFormData?.praysFiveTimes || "",
      hasQazaPrayers:
        biodataFormData?.religiousInfoFormData?.hasQazaPrayers || "",
      canReciteQuranProperly:
        biodataFormData?.religiousInfoFormData?.canReciteQuranProperly || "",
      avoidsHaramIncome:
        biodataFormData?.religiousInfoFormData?.avoidsHaramIncome || "",
      modestDressing:
        biodataFormData?.religiousInfoFormData?.modestDressing || "",
      followsMahramRules:
        biodataFormData?.religiousInfoFormData?.followsMahramRules || "",
      beliefAboutPirMurshidAndMazar:
        biodataFormData?.religiousInfoFormData?.beliefAboutPirMurshidAndMazar ||
        "",
      practicingSince:
        biodataFormData?.religiousInfoFormData?.practicingSince || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        religiousInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ধর্মীয় লাইফস্টাইল</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormControl>
                    <RadioGroup
                      className="flex"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="1" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              সেরকমভাবে মেনে চলা হয় না
                            </div>
                            <div>(জেনারেল/নন-প্রাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>
                            ১. অনিয়মিতভাবে ৫ ওয়াক্ত বা এর কম সালাত আদায় করা হয়।
                          </div>
                          <div>
                            ২. সকল ক্ষেত্রে হালাল-হারাম বাছাই করা হয় না।
                          </div>
                          <div>৩. মাহরাম-নন মাহরাম মেইনটেইন করা হয় না।</div>
                          <div>
                            ৪. হারাম উপার্জন, ব্যাংকিং সুদ, ফ্রি-মিক্সিং,
                            গান-বাজনা থেকে বিরত থাকা হয় না।
                          </div>
                          <div>
                            ৫. পরিপূর্ন ভাবে ইসলামের বিধিবিধান পালনে তেমন চেষ্টা
                            বা আগ্রহ নেই।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="2" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black">
                              পরিপূর্ণভাবে মেনে চলা হয় না কিন্তু প্রবল ইচ্ছা আছে
                              এবং চেষ্টা করছি
                            </div>
                            <div>(প্রাক্টিসিংয়ের চেষ্টায় আছি)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>
                            ২. হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত থাকছেন।
                          </div>
                          <div>
                            ৩. কিন্তু গান-বাজনা থেকে এখনো দূরে থাকা হয় না।
                          </div>
                          <div>
                            ৪. সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট বা পর্দা এখনো
                            মেনে চলতে পারছেন না।
                          </div>
                          <div>
                            ৫. এর জন্য প্রবল অনুশোচনা কাজ করে এবং পরিপূর্ন ভাবে
                            ইসলামের বিধিবিধান পালনের চেষ্টা করা হয়।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="3" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              জি পরিপূর্ণভাবে মেনে চলি এবং সর্বদা চেষ্টায় থাকি
                            </div>
                            <div>(পূর্ণ ধার্মিক/ প্র্যাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. বিশুদ্ধ ঈমান-আকিদা পোষণ করছেন।</div>
                          <div>২. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>৩. পরিপূর্ণ হালাল উপার্জন করছেন ।</div>
                          <div>
                            ৪. ফরজ, ওয়াজিব ইবাদতের পাশাপাশি সুন্নাত, নফল আমল
                            করার চেষ্টা করেন।
                          </div>
                          <div>৫. গান-বাজনা, নাটক-সিনেমা থেকে দূরে থাকছেন।</div>
                          <div>
                            ৬. পুরুষেরা সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট,
                            ইসলামিক পোশাক মেনে চলেন, নারীরা নিকাব সহ পর্দা
                            করছেন।
                          </div>
                          <div>
                            ৭. বাহিরে পর্দা মেনে চলা অর্থাৎ বেগানা নারী-পুরুষের
                            ক্ষেত্রে চক্ষু অবনত রাখছেন।
                          </div>
                          <div>
                            ৮. মাহরাম-নন মাহরাম মেইনটেইন করেন এবং ফ্রী মিক্সিং
                            এড়িয়ে চলেন।
                          </div>
                          <div>
                            ৯. সকল প্রকার হারাম ও কবীরা গুনাহ থেকে বেঁচে থাকার
                            সর্বাত্মক প্রচেষ্টায় থাকেন।
                          </div>
                          <div>
                            ১০. ইসলাম বিরোধী সকল কাজকে অপছন্দ করেন এবং জীবনটাকে
                            পরিপূর্ণভাবে কোরআন-সুন্নাহ মোতাবেক সাজাতে থাকেন।
                          </div>
                        </Label>
                      </div>
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="ideology"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় কোন মতাদর্শ মেনে চলেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {religiousIdeologies.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="madhab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কোন মাজহাব / মানহাজ অনুসরণ করেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {madhhabs.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="praysFiveTimes"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="hasQazaPrayers"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      আপনার কি নামাজ কাযা হয়?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="canReciteQuranProperly"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="avoidsHaramIncome"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <FormField
              control={form.control}
              name="modestDressing"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                        ? "টাখনুর উপরে কাপড় পরেন কিনা?"
                        : "আপনি কি নিকাব সহ পর্দা করেন?"}
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <>
              <FormField
                control={form.control}
                name="followsMahramRules"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="beliefAboutPirMurshidAndMazar"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="practicingSince"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু
                        করেছেন?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/SpousePreferenceInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  familyBackgrounds,
  heights,
  maritalStatuses,
  occupationsList,
  religiousEducation,
  religiousLifestyle,
  secondMarriageOptions,
  skinTones,
  spouseLocationOptions,
  spouseSpecialCatagories,
} from "@/lib/consts";
import {
  BiodataFormDataProps,
  SpousePreferenceInfoFormData,
} from "@/lib/types";
import { spousePreferenceInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function SpousePreferenceInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<SpousePreferenceInfoFormData>({
    resolver: zodResolver(spousePreferenceInfoFormData),
    defaultValues: {
      age: biodataFormData?.spousePreferenceInfoFormData?.age || "",
      skinTone: biodataFormData?.spousePreferenceInfoFormData?.skinTone || [],
      height: biodataFormData?.spousePreferenceInfoFormData?.height || "",
      educationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.educationalQualification || "",
      religiousEducationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.religiousEducationalQualification || [],
      address: biodataFormData?.spousePreferenceInfoFormData?.address || "",
      maritalStatus:
        biodataFormData?.spousePreferenceInfoFormData?.maritalStatus || [],
      specialCategory:
        biodataFormData?.spousePreferenceInfoFormData?.specialCategory || [],
      religiousType:
        biodataFormData?.spousePreferenceInfoFormData?.religiousType || [],
      occupation:
        biodataFormData?.spousePreferenceInfoFormData?.occupation || [],
      familyBackground:
        biodataFormData?.spousePreferenceInfoFormData?.familyBackground || [],
      secondMarriage:
        biodataFormData?.spousePreferenceInfoFormData?.secondMarriage || "",
      location: biodataFormData?.spousePreferenceInfoFormData?.location || "",
      qualities: biodataFormData?.spousePreferenceInfoFormData?.qualities || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        spousePreferenceInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const spouseSpecialCatagoryOptions = spouseSpecialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">
        যেমন জীবনসঙ্গী আশা করেন
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="age"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত বয়স:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {skinTones.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="কাঙ্খিত উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="educationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousEducationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="address"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত ঠিকানা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {maritalStatuses.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialCategory"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {spouseSpecialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় লাইফস্টাইল:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousLifestyle.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="occupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {familyBackgrounds.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          {biodataFormData?.primaryInfoFormData?.biodataType === "GROOM" && (
            <FormField
              control={form.control}
              name="secondMarriage"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী
                      আছেন?
                    </FormLabel>
                    <FormControl>
                      <RadioGroup
                        className="w-full flex flex-wrap gap-0"
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        {secondMarriageOptions.map((x) => (
                          <div
                            key={x.id}
                            className="w-1/4 flex items-center space-x-2 mb-2"
                          >
                            <RadioGroupItem value={x.id} id={x.id} />
                            <Label htmlFor={x.id}>{x.title}</Label>
                          </div>
                        ))}
                      </RadioGroup>
                    </FormControl>
                  </div>

                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {spouseLocationOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="qualities"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:</div>
                    <div className="text-xs">
                      (অর্থাৎ কাঙ্খিত জীবনসঙ্গীর স্বভাব, দ্বীনদারিতা, চারিত্রীক
                      গুণাবলী কেমন আশা করেন। বিশেষ কোনো কার্যক্রম বা চাওয়া থাকলে
                      জানাতে পারেন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\page.tsx
// --------------------
// File: src/app/(main)/biodata-editor/page.tsx
import { Metadata } from "next";
import BiodataEditor from "./BiodataEditor";

interface BiodataEditorPageProps {
  searchParams: Promise<{ biodataId?: string }>;
}

export const metadata: Metadata = {
  title: "Design your biodata",
};

export default async function BiodataEditorPage({
  searchParams,
}: BiodataEditorPageProps) {
  const { biodataId } = await searchParams;

  //TO:DO get userId from token

  const biodataToEdit = biodataId
    ? null // get from db
    : null;

  return (
    <main className="flex-grow">
      <div className="text-[#1f4f69] flex flex-col items-center justify-center mt-4 mb-12">
        <BiodataEditor biodataToEdit={biodataToEdit} />
      </div>
    </main>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\steps.ts
// --------------------
// File: src/app/(main)/biodata-editor/steps.ts
// import { BiodataFormDataProps } from "@/lib/types";
// import AddressInfo from "./biodataFormComponents/AddressInfo";
// import EducationInfo from "./biodataFormComponents/EducationInfo";
// import FamilyInfo from "./biodataFormComponents/FamilyInfo";
// import FinalWords from "./biodataFormComponents/FinalWords";
// import FirstWords from "./biodataFormComponents/FirstWords";
// import GeneralInfo from "./biodataFormComponents/GeneralInfo";
// import MarriageInfo from "./biodataFormComponents/MarriageInfo";
// import OccupationInfo from "./biodataFormComponents/OccupationInfo";
// import PersonalInfo from "./biodataFormComponents/PersonalInfo";
// import PrimaryInfo from "./biodataFormComponents/PrimaryInfo";
// import ProfilePic from "./biodataFormComponents/ProfilePic";
// import ReligiousInfo from "./biodataFormComponents/ReligiousInfo";
// import SpousePreferenceInfo from "./biodataFormComponents/SpousePreferenceInfo";

// export interface BiodataFormStep {
//   title: string;
//   component: React.ComponentType<BiodataFormDataProps>;
//   key: string;
//   disabled: boolean;
//   prev?: string;
//   next?: string;
// }

// export const steps: BiodataFormStep[] = [
//   {
//     title: "কিছু কথা",
//     component: FirstWords,
//     key: "first-words",
//     disabled: true,
//     next: "primary-info",
//   },
//   {
//     title: "প্রাথমিক তথ্য",
//     component: PrimaryInfo,
//     key: "primary-info",
//     disabled: true,
//     prev: "first-words",
//     next: "general-info",
//   },
//   {
//     title: "সাধারণ তথ্য",
//     component: GeneralInfo,
//     key: "general-info",
//     disabled: true,
//     prev: "primary-info",
//     next: "address-info",
//   },
//   {
//     title: "ঠিকানা",
//     component: AddressInfo,
//     key: "address-info",
//     disabled: true,
//     prev: "general-info",
//     next: "education-info",
//   },
//   {
//     title: "শিক্ষাগত যোগ্যতা",
//     component: EducationInfo,
//     key: "education-info",
//     disabled: true,
//     prev: "address-info",
//     next: "occupation-info",
//   },
//   {
//     title: "পেশা",
//     component: OccupationInfo,
//     key: "occupation-info",
//     disabled: true,
//     prev: "education-info",
//     next: "family-info",
//   },
//   {
//     title: "পারিবারিক তথ্য",
//     component: FamilyInfo,
//     key: "family-info",
//     disabled: true,
//     prev: "occupation-info",
//     next: "religious-info",
//   },
//   {
//     title: "ধর্মীয় লাইফস্টাইল",
//     component: ReligiousInfo,
//     key: "religious-info",
//     disabled: true,
//     prev: "family-info",
//     next: "personal-info",
//   },
//   {
//     title: "ব্যক্তিগত তথ্য",
//     component: PersonalInfo,
//     key: "personal-info",
//     disabled: true,
//     prev: "religious-info",
//     next: "marital-info",
//   },
//   {
//     title: "বিয়ে সংক্রান্ত তথ্য",
//     component: MarriageInfo,
//     key: "marital-info",
//     disabled: true,
//     prev: "personal-info",
//     next: "spouse-preference-info",
//   },
//   {
//     title: "যেমন জীবনসঙ্গী আশা করেন",
//     component: SpousePreferenceInfo,
//     key: "spouse-preference-info",
//     disabled: true,
//     prev: "marital-info",
//     next: "profile-pic",
//   },
//   {
//     title: "প্রোফাইল পিকচার",
//     component: ProfilePic,
//     key: "profile-pic",
//     disabled: true,
//     prev: "spouse-preference-info",
//     next: "final-words",
//   },
//   {
//     title: "শেষ কথা",
//     component: FinalWords,
//     key: "final-words",
//     disabled: true,
//     prev: "profile-pic",
//   },
// ];
import AddressInfo from "./biodataFormComponents/AddressInfo";
import EducationInfo from "./biodataFormComponents/EducationInfo";
import FamilyInfo from "./biodataFormComponents/FamilyInfo";
import FinalWords from "./biodataFormComponents/FinalWords";
import FirstWords from "./biodataFormComponents/FirstWords";
import GeneralInfo from "./biodataFormComponents/GeneralInfo";
import MarriageInfo from "./biodataFormComponents/MarriageInfo";
import OccupationInfo from "./biodataFormComponents/OccupationInfo";
import PersonalInfo from "./biodataFormComponents/PersonalInfo";
import PrimaryInfo from "./biodataFormComponents/PrimaryInfo";
import ProfilePic from "./biodataFormComponents/ProfilePic";
import ReligiousInfo from "./biodataFormComponents/ReligiousInfo";
import SpousePreferenceInfo from "./biodataFormComponents/SpousePreferenceInfo";

export interface BiodataFormStep {
  key: string;
  title: string;
  component: React.ComponentType<any>;
  prev: string;
  next: string;
}

export const steps: BiodataFormStep[] = [
  {
    key: "first-words",
    title: "প্রাথমিক শপথ",
    component: FirstWords,
    prev: "",
    next: "primary-info",
  },
  {
    key: "primary-info",
    title: "প্রাথমিক তথ্য",
    component: PrimaryInfo,
    prev: "first-words",
    next: "general-info",
  },
  {
    key: "general-info",
    title: "সাধারণ তথ্য",
    component: GeneralInfo,
    prev: "primary-info",
    next: "address-info",
  },
  {
    key: "address-info",
    title: "ঠিকানা",
    component: AddressInfo,
    prev: "general-info",
    next: "education-info",
  },
  {
    key: "education-info",
    title: "শিক্ষাগত তথ্য",
    component: EducationInfo,
    prev: "address-info",
    next: "occupation-info",
  },
  {
    key: "occupation-info",
    title: "পেশাগত তথ্য",
    component: OccupationInfo,
    prev: "education-info",
    next: "family-info",
  },
  {
    key: "family-info",
    title: "পারিবারিক তথ্য",
    component: FamilyInfo,
    prev: "occupation-info",
    next: "religious-info",
  },
  {
    key: "religious-info",
    title: "ধর্মীয় তথ্য",
    component: ReligiousInfo,
    prev: "family-info",
    next: "personal-info",
  },
  {
    key: "personal-info",
    title: "ব্যক্তিগত তথ্য",
    component: PersonalInfo,
    prev: "religious-info",
    next: "marriage-info",
  },
  {
    key: "marriage-info",
    title: "বিবাহ সংক্রান্ত তথ্য",
    component: MarriageInfo,
    prev: "personal-info",
    next: "spouse-preference-info",
  },
  {
    key: "spouse-preference-info",
    title: "জীবনসঙ্গীর পছন্দ",
    component: SpousePreferenceInfo,
    prev: "marriage-info",
    next: "profile-pic",
  },
  {
    key: "profile-pic",
    title: "প্রোফাইল ছবি",
    component: ProfilePic,
    prev: "spouse-preference-info",
    next: "final-words",
  },
  {
    key: "final-words",
    title: "শেষ শপথ",
    component: FinalWords,
    prev: "profile-pic",
    next: "",
  },
];


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\layout.tsx
// --------------------
// File: src/app/(main)/biodatas/layout.tsx
import { ReactNode } from "react";

export default function MainLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return <main className="flex-grow">{children}</main>;
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\biodataFilterOptions.ts
// --------------------
export const searchingFilters = {
  biodataType: [
    { id: "GROOM", title: "পাত্রের বায়োডাটা" },
    { id: "BRIDE", title: "পাত্রীর বায়োডাটা" },
  ],
  maritalStatus: [
    { id: "unmarried", title: "অবিবাহিত", for: "both" },
    { id: "married", title: "বিবাহিত", for: "both" },
    { id: "divorced", title: "ডিভোর্সড", for: "both" },
    { id: "widowed_male", title: "বিপত্নীক", for: "BRIDE" },
    { id: "widowed_female", title: "বিধবা", for: "GROOM" },
  ],
  skinTones: [
    { id: "dark", title: "গাঢ় ত্বক", for: "both" },
    { id: "medium", title: "শ্যামলা", for: "both" },
    { id: "light_medium", title: "উজ্জ্বল শ্যামলা", for: "both" },
    { id: "fair", title: "ফর্সা", for: "both" },
    { id: "very_fair", title: "উজ্জ্বল ফর্সা", for: "both" },
  ],
  permanentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  currentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  religiousLifestyle: [
    { id: "devout", title: "পূর্ণ ধার্মিক/প্র্যাক্টিসিং", for: "both" },
    { id: "practicing", title: "প্রাক্টিসিংয়ের চেষ্টারত", for: "both" },
    { id: "general", title: "জেনারেল/নন-প্রাক্টিসিং", for: "both" },
  ],
  occupation: [
    { id: "business", title: "ব্যবসা", for: "both" },
    { id: "govt_job", title: "সরকারি চাকরিজীবী", for: "both" },
    { id: "private_job", title: "বেসরকারি চাকরিজীবী", for: "both" },
    { id: "home_tutor", title: "হোম টিউটর", for: "both" },
    { id: "teacher", title: "শিক্ষক/শিক্ষিকা", for: "both" },
    { id: "lawyer", title: "আইনজীবী", for: "both" },
    { id: "engineer", title: "ইঞ্জিনিয়ার", for: "both" },
    { id: "doctor", title: "ডাক্তার", for: "both" },
    { id: "vet_doctor", title: "ভেটেরিনারি ডাক্তার", for: "both" },
    { id: "nurse", title: "নার্স", for: "both" },
    { id: "pharmacist", title: "ফার্মাসিস্ট", for: "both" },
    { id: "paramedic", title: "প্যারামেডিক", for: "both" },
    { id: "therapist", title: "থেরাপিস্ট", for: "both" },
    { id: "medical_technologist", title: "মেডিকেল টেকনোলজিস্ট", for: "both" },
    {
      id: "medical_assistant",
      title: "মেডিক্যাল অ্যাসিস্ট্যান্ট",
      for: "both",
    },
    { id: "military_job", title: "সামরিক জব", for: "both" },
    { id: "paramilitary_job", title: "আধা সামরিক জব", for: "both" },
    { id: "imam", title: "ইমাম", for: "both" },
    { id: "muezzin", title: "মুয়াজ্জিন", for: "both" },
    { id: "pilot", title: "পাইলট", for: "both" },
    { id: "freelancer", title: "ফ্রিল্যান্সার", for: "both" },
    { id: "student", title: "শিক্ষার্থী", for: "both" },
    { id: "mbbs_bds_student", title: "MBBS/BDS শিক্ষার্থী", for: "both" },
    { id: "expatriate_job", title: "প্রবাসী-প্রবাস জব", for: "both" },
    { id: "manual_labor", title: "মিস্ত্রী/কায়িক শ্রম", for: "both" },
    { id: "agriculture", title: "কৃষিকাজ", for: "both" },
    { id: "jobless", title: "চাকরির সন্ধানরত/বেকার", for: "both" },
    { id: "family_property", title: "পারিবারিক সম্পত্তি", for: "both" },
    { id: "no_occupation", title: "পেশা নেই/কর্মহীন", for: "both" },
    { id: "other_occupation", title: "অন্যান্য", for: "both" },
  ],
  education: [
    { id: "qawmi", title: "কওমি", for: "both" },
    { id: "alia", title: "আলিয়া", for: "both" },
    { id: "diploma", title: "ডিপ্লোমা", for: "both" },
    { id: "bachelor", title: "স্নাতক", for: "both" },
    { id: "masters", title: "স্নাতকোত্তর", for: "both" },
    { id: "doctoral", title: "ডক্টরাল", for: "both" },
    { id: "bcs", title: "বি.সি.এস (BCS)", for: "both" },
    { id: "medical", title: "মেডিকেল", for: "both" },
    { id: "defense", title: "ডিফেন্স", for: "both" },
    { id: "police_law", title: "পুলিশ/আইন-শৃঙ্খলা বাহিনী", for: "both" },
    { id: "aviation", title: "এভিয়েশন", for: "both" },
  ],
  religiousEducation: [
    { id: "hafiz_male", title: "হাফেজ", for: "BRIDE" },
    { id: "hafiza_female", title: "হাফেজা", for: "GROOM" },
    { id: "maulana_male", title: "মাওলানা", for: "BRIDE" },
    { id: "alema_female", title: "আলেমা", for: "GROOM" },
    { id: "mufti_male", title: "মুফতি", for: "BRIDE" },
    { id: "muftia_female", title: "মুফতিয়া", for: "GROOM" },
    { id: "muhaddis_male", title: "মুহাদ্দিস", for: "BRIDE" },
    { id: "muhaddisa_female", title: "মুহাদ্দিসা", for: "GROOM" },
    { id: "mufassir", title: "মুফাসসির", for: "both" },
    { id: "faqih", title: "ফকিহ", for: "both" },
    { id: "daee_male", title: "দা'য়ী", for: "BRIDE" },
    { id: "daiya_female", title: "দাঈয়া", for: "GROOM" },
    { id: "adib", title: "আদিব", for: "both" },
    { id: "qari_male", title: "ক্বারী", for: "BRIDE" },
    { id: "qaria_female", title: "ক্বারিয়া", for: "GROOM" },
    { id: "talib_quran", title: "তালিবে কুরআন", for: "both" },
    { id: "tajwid_student", title: "তাজবীদ শিক্ষার্থী", for: "both" },
    { id: "muallim_talim", title: "মুয়াল্লিমুন ফি তালিম", for: "both" },
    { id: "islamic_scholar", title: "ইসলামিক স্কলার", for: "both" },
  ],
  familyBackgrounds: [
    { id: "upper_class", title: "উচ্চবিত্ত", for: "both" },
    { id: "upper_middle", title: "উচ্চ মধ্যবিত্ত", for: "both" },
    { id: "middle", title: "মধ্যবিত্ত", for: "both" },
    { id: "lower_middle", title: "নিম্ন মধ্যবিত্ত", for: "both" },
    { id: "lower_class", title: "নিম্নবিত্ত", for: "both" },
  ],
  madhhab: [
    { id: "hanafi", title: "হানাফি", for: "both" },
    { id: "salafi", title: "সালাফি/আহলে হাদিস", for: "both" },
    { id: "shafi", title: "শাফেঈ", for: "both" },
    { id: "maliki", title: "মালিকী", for: "both" },
    { id: "hambali", title: "হাম্বলি", for: "both" },
    { id: "other_madhhab", title: "অন্যান্য", for: "both" },
    { id: "unknown_madhhab", title: "জানা নেই", for: "both" },
  ],
  bloodGroup: [
    { id: "A+", title: "A+", for: "both" },
    { id: "B+", title: "B+", for: "both" },
    { id: "A-", title: "A-", for: "both" },
    { id: "B-", title: "B-", for: "both" },
    { id: "AB+", title: "AB+", for: "both" },
    { id: "AB-", title: "AB-", for: "both" },
    { id: "O+", title: "O+", for: "both" },
    { id: "O-", title: "O-", for: "both" },
  ],
  specialCategory: [
    { id: "expatriate", title: "প্রবাসী", for: "both" },
    {
      id: "foreign_citizen",
      title: "ফরেইন সিটিজেন",
      for: "both",
    },
    {
      id: "social_worker",
      title: "সমাজ সেবক",
      for: "both",
    },
    { id: "tabligh", title: "তাবলীগ", for: "both" },
    {
      id: "deen_service",
      title: "দ্বীনের খেদমতকারী",
      for: "both",
    },
    { id: "new_muslim", title: "নওমুসলিম", for: "both" },
    {
      id: "disabled",
      title: "প্রতিবন্ধী",
      for: "both",
    },
    { id: "orphan", title: "এতিম", for: "both" },
    {
      id: "infertile",
      title: "বন্ধ্যা/ইনফার্টিলিটি",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "শর্ট ডিভোর্সি",
      for: "both",
    },
    {
      id: "single_father",
      title: "সিঙ্গেল ফাদার",
      for: "male",
    },
    {
      id: "single_mother",
      title: "সিঙ্গেল মাদার",
      for: "female",
    },
    {
      id: "short_height",
      title: "স্বল্প উচ্চতার",
      for: "both",
    },
    { id: "older_age", title: "বয়সে বেশি", for: "both" },
    {
      id: "urban_resident",
      title: "শহরে বসবাসকারী",
      for: "both",
    },
    {
      id: "rural_resident",
      title: "গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "allow_wife_job",
      title: "স্ত্রীকে চাকরি/ব্যবসা করতে দিবে",
      for: "male",
    },
    {
      id: "allow_wife_study",
      title: "স্ত্রীকে পড়াশোনা করতে দিবে",
      for: "male",
    },
    {
      id: "employed_female",
      title: "চাকরিজীবী",
      for: "female",
    },
    {
      id: "job_interest_post_marriage",
      title: "বিয়ের পর চাকরি/ব্যাবসায় আগ্রহী",
      for: "female",
    },
    {
      id: "masna_interest",
      title: "মাসনায় আগ্রহী",
      for: "female",
    },
  ],
};

export const beingSearchedFilters = {
  selfBiodataType: [
    { id: "BRIDE", title: "আমি পাত্র" },
    {
      id: "GROOM",
      title: "আমি পাত্রী",
    },
  ],
  specialCategory: [
    {
      id: "expatriate",
      title: "আমি একজন প্রবাসী",
      for: "both",
    },
    {
      id: "foreign_citizen",
      title: "আমার ফরেইন সিটিজেনশিপ আছে",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "আমি শর্ট ডিভোর্সি বা ডিভোর্সড",
      for: "both",
    },
    {
      id: "widowed_male",
      title: "আমি বিপত্নীক",
      for: "BRIDE",
    },
    {
      id: "widowed_female",
      title: "আমি বিধবা",
      for: "GROOM",
    },
    {
      id: "single_father",
      title: "আমি সিঙ্গেল ফাদার (সন্তান আছে কিন্তু মা নেই বা দায়িত্বে নেই)",
      for: "BRIDE",
    },
    {
      id: "single_mother",
      title: "আমি সিঙ্গেল মাদার (সন্তান আছে কিন্তু বাবা নেই বা দায়িত্বে নেই)",
      for: "GROOM",
    },
    {
      id: "second_marriage_male",
      title: "আমি মাসনা বা দ্বিতীয় বিবাহে আগ্রহী",
      for: "BRIDE",
    },
    {
      id: "second_marriage_female",
      title: "আমি দ্বিতীয় স্ত্রী বা মাসনা হতে আগ্রহী",
      for: "GROOM",
    },
    {
      id: "short_height",
      title: "আমি স্বল্প উচ্চতার",
      for: "both",
    },
    {
      id: "older_age",
      title: "আমি বয়সে বেশি",
      for: "both",
    },
    {
      id: "village_resident",
      title: "আমি গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "dark_complexion",
      title: "আমার গায়ের বর্ণ গাঢ়",
      for: "GROOM",
    },
    {
      id: "infertility",
      title: "আমি বন্ধ্যাত্ব সমস্যায় ভুগছি",
      for: "both",
    },
    {
      id: "new_muslim",
      title: "আমি একজন নওমুসলিম",
      for: "both",
    },
    { id: "orphan", title: "আমি এতিম", for: "both" },
    {
      id: "disabled",
      title: "আমি প্রতিবন্ধী",
      for: "both",
    },
    {
      id: "religious_service",
      title: "আমি দ্বীনের খেদমতে আছি",
      for: "both",
    },
    {
      id: "tabligh",
      title: "আমি তাবলীগ এর সাথে যুক্ত",
      for: "both",
    },
    {
      id: "social_worker",
      title: "আমি একজন সমাজ সেবক",
      for: "both",
    },
    {
      id: "employed",
      title: "আমি একজন চাকরিজীবী",
      for: "both",
    },
    {
      id: "post_marriage_job",
      title: "আমি বিয়ের পর চাকরি / ব্যাবসায় আগ্রহী",
      for: "both",
    },
    {
      id: "post_marriage_study",
      title: "আমি বিয়ের পর পড়াশোনা করতে আগ্রহী",
      for: "both",
    },
  ],
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodataPage.tsx
// --------------------
// src/app/(main)/biodatas/listPageComponentes/BiodataPage.tsx

"use client";
import { useGetAllBiodatasQuery } from "@/redux/features/admin/biodataApi";
import { useDebounced } from "@/redux/hooks";
import { useMemo, useState } from "react";
import BiodatasPageCard from "./BiodatasPageCard";
import BiodatasPageFilters from "./BiodatasPageFilters";
import BiodatasPageSearchByBiodataNo from "./SearchByBiodataNo";

const BiodataPage = () => {
  const [fileList, setFileList] = useState<any[]>([]);
  const [modalActive, setModalActive] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [filterActive, setFilterActive] = useState(false);
  const [filters, setFilters] = useState({});
  const [selectedData, setSelectedData] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [pagination, setPagination] = useState({
    page: 1,
    pageSize: 25,
    sortOrder: "desc",
    sortBy: "createdAt",
  });
  const debouncedTerm = useDebounced({ searchQuery: searchTerm, delay: 600 });

  // Query
  const query = useMemo(
    () => ({
      page: pagination.page,
      limit: pagination.pageSize,
      sortBy: pagination.sortBy,
      sortOrder: pagination.sortOrder,
      ...(debouncedTerm && { searchTerm: debouncedTerm }),
      ...filters,
    }),
    [pagination, debouncedTerm, filters]
  );

  const { data: biodatas, isLoading } = useGetAllBiodatasQuery(query, {
    refetchOnMountOrArgChange: true,
  });

  console.log("biodatas", biodatas);
  // Handle filter change
  const handleFilter = (newFilters: Record<string, any>) => {
    setFilters(newFilters);
    setFilterActive(Object.keys(newFilters).length > 0);
  };

  // Handle reset
  const handleReset = () => {
    setFilters({});
    setSearchTerm("");
    setFilterActive(false);
    setFileList([]);
    setModalActive(false);
    setSelectedData(null);
    setIsEdit(false);
    setPagination({
      page: 1,
      pageSize: 25,
      sortOrder: "desc",
      sortBy: "createdAt",
    });
  };

  return (
    <div className="flex justify-between container mx-auto gap-5">
      <BiodatasPageFilters
        onFilterChange={handleFilter}
        onReset={handleReset}
      />
      <div className="flex-grow max-w-7xl">
        <div className="flex justify-end items-center mb-6">
          <BiodatasPageSearchByBiodataNo />
        </div>
        {isLoading ? (
          <div className="text-center py-4">Loading...</div>
        ) : biodatas && biodatas.data.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {biodatas?.data?.map((biodata) => (
              <BiodatasPageCard key={biodata.id} {...biodata} />
            ))}
          </div>
        ) : (
          <div className="text-center py-4">No biodatas found</div>
        )}
      </div>
      {/* <BiodatasPageAppliedFilters /> */}
    </div>
  );
};

export default BiodataPage;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageAppliedFilters.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageAppliedFilters.tsx

import { X } from "lucide-react";

export default function BiodatasPageAppliedFilters() {
  const appliedFilters = [
    {
      id: 1,
      name: "বায়োডাটার ধরন",
      selected: [
        {
          id: 1,
          name: "পুরুষ",
        },
      ],
    },
    {
      id: 2,
      name: "বৈবাহিক অবস্থা",
      selected: [
        {
          id: 1,
          name: "অবিবাহিত",
        },
        {
          id: 2,
          name: "বিবাহিত",
        },
      ],
    },
  ];

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">আপনি বাছাই করেছেন</div>
      </div>
      <div className="flex flex-col space-y-4">
        {appliedFilters.length > 0 &&
          appliedFilters.map((x) => (
            <div
              key={x.id}
              className="flex flex-col space-y-3 text-black text-xs border border-gray-300 rounded-xl px-6 py-2"
            >
              {x.selected.length > 0 &&
                x.selected.map((y) => (
                  <div key={y.id} className="flex justify-between items-center">
                    <div>{y.name}</div>
                    <X className="text-[#e25a6f] w-4 h-4" />
                  </div>
                ))}
            </div>
          ))}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageCard.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageCard.tsx

"use client";
import male from "@/assets/images/male-5.svg";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Heart } from "lucide-react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export interface BiodatasPageCardProps {
  id: number;
  name: string;
  code: number;
  age: number;
  height: number;
  permanentAddress: string;
  occupation: string;
  maritalStatus: string;
}

export default function BioCard({
  id,
  name,
  code,
  age,
  height,
  permanentAddress,
  occupation,
  maritalStatus,
}: BiodatasPageCardProps) {
  const router = useRouter();
  const handleOnClick = () => {
    router.push(`/biodatas/${id}`);
  };
  return (
    <Card
      key={id}
      className="border-none overflow-hidden bg-gradient-to-t from-[#e6f2ff] to-[#fff0f6]"
    >
      <CardContent className="p-4">
        <div className="flex justify-between items-start mb-4">
          <div className="w-1/3">
            <Heart className="w-8 h-8 text-[#E25A6F]" fill="#E25A6F" />
          </div>
          <div className="w-1/3 flex items-center justify-center">
            <Image src={male} alt="Male" width={80} height={40} priority />
          </div>
          <div className="w-1/3 flex flex-col items-end space-y-2">
            <Badge className="text-[#00b754]">Verified</Badge>
            <Badge className="text-[#016ca7]">Seen</Badge>
          </div>
        </div>

        <div className="text-center mb-4 flex items-center justify-center">
          <div className="text-black bg-[#fcfafd] p-3 rounded-md">
            বায়োডাটা নং: {code}
          </div>
        </div>

        <div className="space-y-3 text-black">
          <div className="flex justify-between">
            <span>বৈবাহিক অবস্থা:</span>
            <span>{maritalStatus}</span>
          </div>
          <div className="flex justify-between">
            <span>জন্মসন:</span>
            <span>{age}</span>
          </div>
          <div className="flex justify-between">
            <span>উচ্চতা:</span>
            <span>{height}</span>
          </div>
          <div className="flex justify-between">
            <span>স্থায়ী ঠিকানা:</span>
            <span>{permanentAddress}</span>
          </div>
          <div className="flex justify-between">
            <span>পেশা:</span>
            <span>{occupation[0]}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          className="w-full text-white bg-[#E25A6F]  hover:bg-[#D14A5F]"
          onClick={handleOnClick}
        >
          বায়োডাটা দেখুন
        </Button>
      </CardFooter>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageFilters.tsx
// --------------------
"use client";

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { beingSearchedFilters, searchingFilters } from "./biodataFilterOptions";
import { FilterAccordion } from "./FilterAccordian";

interface BiodatasPageFiltersProps {
  onFilterChange: (filters: Record<string, any>) => void;
  onReset: () => void;
}

export default function BiodatasPageFilters({
  onFilterChange,
  onReset,
}: BiodatasPageFiltersProps) {
  const searchParams = useSearchParams();
  const [activeTab, setActiveTab] = useState<"searching" | "beingSearched">(
    "searching"
  );
  const [ageRange, setAgeRange] = useState<[number, number]>([18, 80]);
  const [heightRange, setHeightRange] = useState<[number, number]>([36, 84]);
  const [selectedFilters, setSelectedFilters] = useState<
    Record<string, string | string[] | [number, number]>
  >({});

  // Initialize filters from URL query parameters
  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString());
    const initialFilters: Record<string, any> = {};

    // Single value filters
    const singleValueKeys = [
      "biodataType",
      "maritalStatus",
      "location",
      "religiousLifestyle",
      // Remove ageMin and ageMax from here since they’re handled separately
    ];
    singleValueKeys.forEach((key) => {
      const value = params.get(key);
      if (value) initialFilters[key] = value;
    });

    // Range filters (e.g., age)
    const ageMin = params.get("ageMin");
    const ageMax = params.get("ageMax");
    if (ageMin && ageMax) {
      const min = parseInt(ageMin, 10);
      const max = parseInt(ageMax, 10);
      if (!isNaN(min) && !isNaN(max)) {
        initialFilters["age"] = [min, max];
        // Only update ageRange if it’s different from the current value
        if (ageRange[0] !== min || ageRange[1] !== max) {
          setAgeRange([min, max]);
        }
      }
    }

    // Only update selectedFilters if it’s different from the current value
    if (JSON.stringify(selectedFilters) !== JSON.stringify(initialFilters)) {
      setSelectedFilters(initialFilters);
      onFilterChange(initialFilters);
    }
  }, [searchParams, ageRange, selectedFilters]);

  // Radio change handler
  const handleRadioChange = (key: string, value: string) => {
    setSelectedFilters((prev) => {
      const newFilters = { ...prev, [key]: value };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Checkbox change handler
  const handleCheckboxChange = (
    key: string,
    value: string,
    checked: boolean
  ) => {
    setSelectedFilters((prev) => {
      const currentValues = Array.isArray(prev[key])
        ? [...(prev[key] as string[])]
        : [];
      if (checked) {
        currentValues.push(value);
      } else {
        const index = currentValues.indexOf(value);
        if (index > -1) currentValues.splice(index, 1);
      }
      const newFilters = { ...prev, [key]: currentValues };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Slider change handler
  const handleSliderChange = (key: string, value: [number, number]) => {
    if (key === "age" || key === "partner_age") setAgeRange(value);
    if (key === "height" || key === "partner_height") setHeightRange(value);
    const newFilters = { ...selectedFilters, [key]: value };
    setSelectedFilters(newFilters);
    onFilterChange(newFilters);
  };

  // Tab change handler
  const handleTabChange = (tab: "searching" | "beingSearched") => {
    setActiveTab(tab);
    setSelectedFilters({});
    setAgeRange([18, 80]);
    setHeightRange([36, 84]);
    onFilterChange({});
  };

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">ফিল্টার করুন</div>
      </div>
      {/* Filter buttons */}
      <div className="flex justify-center mb-4">
        <button
          className={`mr-[-1rem] rounded-xl py-3 px-4 z-10 ${
            activeTab === "searching"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("searching")}
        >
          আমি খুঁজছি
        </button>
        <button
          className={`py-3 rounded-xl px-4 ${
            activeTab === "beingSearched"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("beingSearched")}
        >
          আমাকে খুঁজছে
        </button>
      </div>
      {/* Filter accordion */}
      <form className="flex flex-col space-y-2">
        <Accordion type="multiple" className="flex flex-col space-y-2 mb-2">
          {activeTab === "searching" ? (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="biodataType"
                options={searchingFilters.biodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বৈবাহিক অবস্থা"
                title="বৈবাহিক অবস্থা"
                contentType="radio"
                filterKey="maritalStatus"
                options={searchingFilters.maritalStatus}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বয়স"
                title="বয়স"
                contentType="slider"
                filterKey="age"
                range={ageRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("age", val)
                }
                min={18}
                max={80}
              />
              <FilterAccordion
                value="উচ্চতা"
                title="উচ্চতা"
                contentType="slider"
                filterKey="height"
                range={heightRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("height", val)
                }
                min={36}
                max={84}
              />
              <FilterAccordion
                value="গাত্রবর্ণ"
                title="গাত্রবর্ণ"
                contentType="radio"
                filterKey="complexion"
                options={searchingFilters.skinTones}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="স্থায়ী ঠিকানা"
                title="স্থায়ী ঠিকানা"
                contentType="radio"
                filterKey="permanentAddress"
                options={searchingFilters.permanentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বর্তমান ঠিকানা"
                title="বর্তমান ঠিকানা"
                contentType="radio"
                filterKey="currentAddress"
                options={searchingFilters.currentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="ধর্মীয় লাইফস্টাইল"
                title="ধর্মীয় লাইফস্টাইল"
                contentType="radio"
                filterKey="religiousLifestyle"
                options={searchingFilters.religiousLifestyle}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পেশা"
                title="পেশা"
                contentType="radio"
                filterKey="occupation"
                options={searchingFilters.occupation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="শিক্ষা"
                title="শিক্ষা"
                contentType="radio"
                filterKey="education"
                options={searchingFilters.education}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="দ্বীনি যোগ্যতা"
                title="দ্বীনি যোগ্যতা"
                contentType="radio"
                filterKey="religiousEducation"
                options={searchingFilters.religiousEducation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পরিবারের আর্থসামাজিক অবস্থা"
                title="পরিবারের আর্থসামাজিক অবস্থা"
                contentType="radio"
                filterKey="familyStatus"
                options={searchingFilters.familyBackgrounds}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="মাজহাব/মানহাজ"
                title="মাজহাব/মানহাজ"
                contentType="radio"
                filterKey="madhhab"
                options={searchingFilters.madhhab}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="রক্তের গ্রুপ"
                title="রক্তের গ্রুপ"
                contentType="radio"
                filterKey="bloodGroup"
                options={searchingFilters.bloodGroup}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={searchingFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
            </>
          ) : (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="selfBiodataType"
                options={beingSearchedFilters.selfBiodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={beingSearchedFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
              <AccordionItem
                className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
                value="যেমন জীবনসঙ্গী আশা করেন"
              >
                <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
                  যেমন জীবনসঙ্গী আশা করেন
                </AccordionTrigger>
                <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
                  <Accordion
                    type="multiple"
                    className="flex flex-col space-y-2"
                  >
                    <FilterAccordion
                      value="partner_biodataType"
                      title="জীবনসঙ্গীর বায়োডাটার ধরন"
                      contentType="radio"
                      filterKey="partner_biodataType"
                      options={searchingFilters.biodataType}
                      selectedFilters={
                        selectedFilters as Record<string, string>
                      }
                      handleRadioChange={handleRadioChange}
                    />
                    <FilterAccordion
                      value="partner_maritalStatus"
                      title="জীবনসঙ্গীর বৈবাহিক অবস্থা"
                      contentType="checkbox"
                      filterKey="partner_maritalStatus"
                      options={searchingFilters.maritalStatus}
                      selectedFilters={
                        selectedFilters as Record<string, string[]>
                      }
                      handleCheckboxChange={handleCheckboxChange}
                    />
                    <FilterAccordion
                      value="partner_age"
                      title="জীবনসঙ্গীর বয়স"
                      contentType="slider"
                      filterKey="partner_age"
                      range={ageRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_age", val)
                      }
                      min={18}
                      max={80}
                    />
                    <FilterAccordion
                      value="partner_height"
                      title="জীবনসঙ্গীর উচ্চতা"
                      contentType="slider"
                      filterKey="partner_height"
                      range={heightRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_height", val)
                      }
                      min={36}
                      max={84}
                    />
                  </Accordion>
                </AccordionContent>
              </AccordionItem>
            </>
          )}
        </Accordion>
        <button
          type="button"
          className="py-2 px-4 bg-[#e25a6f] text-white rounded-xl"
          onClick={() => {
            setSelectedFilters({});
            setAgeRange([18, 80]);
            setHeightRange([36, 84]);
            onReset();
          }}
        >
          ফিল্টার রিসেট
        </button>
      </form>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\FilterAccordian.tsx
// --------------------
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Slider } from "@/components/ui/slider";

interface FilterAccordionProps {
  value: string;
  title: string;
  contentType: string;
  filterKey?: string;
  options?: { id: string; title: string }[];
  selectedFilters?: Record<string, string | string[]>;
  handleRadioChange?: (key: string, value: string) => void;
  handleCheckboxChange?: (key: string, value: string, checked: boolean) => void;
  range?: number[];
  onRangeChange?: (value: number[]) => void;
  min?: number;
  max?: number;
}

export const FilterAccordion = (props: FilterAccordionProps) => {
  const { value, title, contentType } = props;

  // Validation for radio
  if (
    contentType === "radio" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleRadioChange)
  ) {
    return null;
  }

  // Validation for checkbox
  if (
    contentType === "checkbox" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleCheckboxChange)
  ) {
    return null;
  }

  // Validation for slider
  if (
    contentType === "slider" &&
    (!props.filterKey ||
      !props.range ||
      !props.onRangeChange ||
      props.min === undefined ||
      props.max === undefined)
  ) {
    return null;
  }

  const renderRadioGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleRadioChange: (key: string, value: string) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <RadioGroup
        value={(selectedFilters[key] as string) || ""}
        onValueChange={(value) => handleRadioChange(key, value)}
      >
        {options.map((option) => (
          <div key={option.id} className="flex items-center space-x-2">
            <RadioGroupItem value={option.id} id={`${key}-${option.id}`} />
            <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
          </div>
        ))}
      </RadioGroup>
    </AccordionContent>
  );

  const renderCheckboxGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleCheckboxChange: (key: string, value: string, checked: boolean) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      {options.map((option) => (
        <div key={option.id} className="flex items-center space-x-2">
          <Checkbox
            id={`${key}-${option.id}`}
            checked={
              (selectedFilters[key] as string[])?.includes(option.id) || false
            }
            onCheckedChange={(checked) =>
              handleCheckboxChange(key, option.id, checked as boolean)
            }
          />
          <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
        </div>
      ))}
    </AccordionContent>
  );

  const renderSlider = (
    key: string,
    label: string,
    value: number[],
    onChange: (value: number[]) => void,
    min: number,
    max: number
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <div className="flex items-center space-x-2">
        <div className="text-[#1f4f69]">{value[0]}</div>
        <Slider
          value={value}
          onValueChange={(val) => onChange(val)}
          min={min}
          max={max}
          step={1}
          className="w-full"
        />
        <div className="text-[#1f4f69]">{value[1]}</div>
      </div>
    </AccordionContent>
  );

  return (
    <AccordionItem
      className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
      value={value}
    >
      <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
        {title}
      </AccordionTrigger>
      {contentType === "radio" &&
        renderRadioGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleRadioChange
        )}
      {contentType === "checkbox" &&
        renderCheckboxGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleCheckboxChange
        )}
      {contentType === "slider" &&
        renderSlider(
          props.filterKey,
          title,
          props.range,
          props.onRangeChange,
          props.min,
          props.max
        )}
    </AccordionItem>
  );
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\SearchByBiodataNo.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/SearchByBiodataNo.tsx

import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Search } from "lucide-react";

export default function BiodatasPageSearchByBiodataNo() {
  return (
    <form className="flex items-center space-x-4">
      <div className="w-32">
        <Select>
          <SelectTrigger className="text-[#1f4f69]">
            <SelectValue placeholder="SNM" />
          </SelectTrigger>
          <SelectContent className="bg-white text-[#1f4f69]">
            {/* <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="all"
            >
              SNM
            </SelectItem> */}
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="male"
            >
              পুরুষ
            </SelectItem>
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="female"
            >
              নারী
            </SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="relative w-64">
        <div className="space-y-2">
          <Input
            className="w-full px-4 py-2 border rounded-md text-[#1f4f69] selection:bg-[#E25A6F] selection:text-white"
            id="biodataNo"
            type="text"
            placeholder="বায়োডাটা নং"
          />
        </div>
        <button className="absolute right-3 top-1/2 transform -translate-y-1/2">
          <Search className="w-4 h-4 text-gray-400" />
        </button>
      </div>
    </form>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\page.tsx
// --------------------
import BiodataPage from "./listPageComponentes/BiodataPage";

export default function BiodatasPage() {
  return (
    <>
      <div className="mt-12 text-3xl text-center text-black mb-4 ">
        বায়োডাটা সমূহ
      </div>
      <BiodataPage />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\page.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/page.tsx
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import AddressInfo from "./viewBioDataComponents/AddressInfo";
import EducationAndOccupationInfo from "./viewBioDataComponents/EducationAndOccupationInfo";
import FamilyInfo from "./viewBioDataComponents/FamilyInfo";
import FooterSection from "./viewBioDataComponents/FooterSection";
import GeneralInfo from "./viewBioDataComponents/GeneralInfo";
import HeaderSection from "./viewBioDataComponents/HeaderSection";
import MarriageInfo from "./viewBioDataComponents/MarriageInfo";
import PersonalInfo from "./viewBioDataComponents/PersonalInfo";
import PrimaryInfo from "./viewBioDataComponents/PrimaryInfo";
import ReligiousInfo from "./viewBioDataComponents/ReligiousInfo";
import SpousePreferenceInfo from "./viewBioDataComponents/SpousePreferenceInfo";

export default function BiodataPage() {
  const tabs = [
    "প্রাথমিক তথ্য",
    "সাধারণ তথ্য",
    "ঠিকানা",
    "শিক্ষা ও পেশা",
    "পারিবারিক তথ্য",
    "ধর্মীয় লাইফস্টাইল",
    "ব্যক্তিগত তথ্য",
    "বিয়ে সংক্রান্ত তথ্য",
    "যেমন জীবনসঙ্গী আশা করেন",
  ];

  return (
    <>
      <HeaderSection />
      <div className="py-12 flex flex-col items-center justify-center space-y-6">
        <div className="text-4xl text-center text-black">সম্পূর্ণ বায়োডাটা</div>
        <Tabs defaultValue="ঠিকানা" className="max-w-7xl">
          <TabsList className="flex flex-wrap h-auto space-x-2 bg-[#f6f6f6] rounded-2xl p-2">
            {tabs.map((tab) => (
              <TabsTrigger
                key={tab}
                value={tab}
                className="data-[state=active]:bg-[#e25a6f] data-[state=active]:text-white text-[#004972] rounded-full px-4 py-2"
              >
                {tab}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>

        <div className="w-full max-w-6xl space-y-6">
          <PrimaryInfo />
          <GeneralInfo />
          <AddressInfo />
          <EducationAndOccupationInfo />
          <FamilyInfo />
          <ReligiousInfo />
          <PersonalInfo />
          <MarriageInfo />
          <SpousePreferenceInfo />
        </div>
      </div>
      <FooterSection />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/AddressInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function AddressInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ঠিকানা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোথায় বেড়ে উঠেছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\EducationAndOccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/EducationAndOccupationInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function EducationAndOccupationInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          শিক্ষাগত যোগ্যতা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষার ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">জেনারেল</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এস.এস.সি/দাখিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এস.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এইচ.এস.সি/আলিম/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এইচ.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(ডিপ্লোমা):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">ডিপ্লোমা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(অনার্স/ফাজিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অনার্স</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(মাস্টার্স/কামিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>

        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা নিয়ে বিস্তারিত লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাসিক আয়:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FamilyInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function FamilyInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          পারিবারিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পিতা-মাতা উভয়েই জীবিত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনারা ভাই-বোন কতজন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ভাই-বোন কে কি করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">চাচা মামাদের পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">যৌথ পরিবার</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পারিবারিক বিষয়ে আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FooterSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FooterSection.tsx

import { Card, CardContent } from "@/components/ui/card";
import Link from "next/link";
export default function FooterSection() {
  return (
    <div className="py-12 flex flex-col items-center justify-center">
      <div className="text-4xl text-center text-[#004972] mb-4">
        বায়োডাটা পছন্দ হয়েছে?
      </div>
      <div className="text-md text-center text-black mb-8">
        আপনি আগ্রহী হলে আপনার জন্য ৩টি অপশন রয়েছে।
      </div>
      <div className="max-w-6xl flex space-x-6 text-black">
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                প্রাথমিক প্রস্তাব পাঠিয়ে আপনার প্রতি আগ্রহী কিনা জানতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                প্রাথমিক প্রস্তাব পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                ছবি দেখার জন্য অনুরোধ পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                যোগাযোগ তথ্য দেখুন
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        {/* <div>পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন</div>
        <div>সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন</div> */}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/GeneralInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function GeneralInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          সাধারণ তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জন্ম তারিখ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অবিবাহিত</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'১"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ওজন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">রক্তের গ্রুপ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">AB−</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জাতীয়তা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বাংলাদেশী, ফরেইন সিটিজেন
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSection.tsx

import male from "@/assets/images/male-5.svg";
import { Card, CardContent } from "@/components/ui/card";
import {
  CircleChevronDown,
  Copy,
  Heart,
  IdCard,
  Mail,
  Send,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import HeaderShortBio from "./HeaderShortBio";
import HeaderSpousePreferenceRequierment from "./HeaderSpousePreferenceRequierment";

export default function HeaderSection() {
  return (
    <div className="py-12 flex justify-center bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <div className="min-w-7xl flex space-x-8">
        <div className="w-1/4 flex flex-col space-y-8">
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col items-center space-y-4">
                <div className="w-full flex items-start justify-between">
                  <div className="w-1 text-[#00b754] text-md font-semibold">
                    Verified
                  </div>
                  <Image
                    src={male}
                    alt="Male"
                    width={100}
                    height={40}
                    priority
                  />
                  <div className="w-1"></div>
                </div>

                <div className="text-lg">
                  বায়োডাটা কোড: <span className="font-semibold">SNM-392</span>
                </div>

                <div className="flex space-x-4 border border-gray-400 rounded-xl p-4">
                  <Heart className="h-6 w-6" />
                  <IdCard className="h-6 w-6" />
                  <Copy className="h-6 w-6 rotate-90" />
                  <Mail className="h-6 w-6" />
                  <CircleChevronDown className="h-6 w-6 text-[#b52d1f]" />
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col space-y-4">
                <div className="text-xl font-medium text-center mb-4 text-[#b52d1f]">
                  আপনি আগ্রহী?
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col">
                    <div>প্রাথমিক প্রস্তাব পাঠান</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col space-x-2">
                    <div>অভিভাবকের যোগাযোগ তথ্য দেখুন</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <Link
                  href="/tutorial"
                  className="text-xs text-center hover:underline text-blue-300"
                >
                  (বিস্তারিত জানুন)
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="w-3/4 flex space-x-8">
          <HeaderShortBio />
          <HeaderSpousePreferenceRequierment />
        </div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderShortBio.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderShortBio.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderShortBio() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          পাত্রের সংক্ষিপ্ত বিবরণ
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSpousePreferenceRequierment.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSpousePreferenceRequierment.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderSpousePreferenceRequierment() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          যেমন জীবনসঙ্গী আশা করেন
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/MarriageInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function MarriageInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          বিয়ে সংক্রান্ত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?</div> */}
          <div className="w-1/2">
            বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">
            বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?
          </div> */}
          <div className="w-1/2">
            আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?</div> */}
          <div className="w-1/2">
            যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* Male only */}
          <div className="w-1/2">
            বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে
            পারবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক বা উপহার
            বা অর্থ আশা করবেন কিনা?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পাত্রপক্ষ/পাত্রীপক্ষ অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিয়ে সংক্রান্ত আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PersonalInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PersonalInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ব্যক্তিগত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি দাড়ি পছন্দ?/দাড়ি রেখেছেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পরতে পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মানসিক বা শারীরিক কোনো রোগ আছে কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের কিছু গুণাবলী চিহ্নিত করুন</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শান্ত-শিষ্ট, ধৈর্যশীল, ইমোশনাল
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            আমি একজন সমাজ সেবক, আমি বন্ধ্যা-ইনফার্টিলিটি
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের মতো করে নিজের সম্পর্কে কিছু লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            রাজনীতি নিয়ে আপনার দৃষ্টিভঙ্গি কি? এর সাথে যুক্ত থাকলে বিস্তারিত
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অবসর সময়ে কি করতে পছন্দ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">সামাজিক বা ধর্মীয় কোনো কাজে যুক্ত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কিছু বইয়ের নাম (যদি পড়ে থাকেন)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">দৈনন্দিন খাবারে কি কি পছন্দ এবং অপছন্দ?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কয়েকজন ব্যক্তিত্বের নাম যাদেরকে নিয়মিত ফলো করেন
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার জীবনের লক্ষ্য কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন কোন সোসাল মিডিয়া ব্যবহার করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার আগ্রহ ও শখ কি কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div> */}
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PrimaryInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PrimaryInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          প্রাথমিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটার ধরন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটা কার জন্য তৈরী করছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/ReligiousInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function ReligiousInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ধর্মীয় লাইফস্টাইল
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি কি আপনার জীবনকে পরিপূর্ণ ভাবে ইসলামিক বিধি-বিধান অনুযায়ী
            পরিচালনা করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            জেনারেল/নন-প্রাক্টিসিং
          </div>
        </div>

        {/* Non Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় কোন মতাদর্শ মেনে চলেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সুন্নি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন মাজহাব / মানহাজ অনুসরণ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সালাফি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">প্রতিদিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Try Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি নামাজ কাযা হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Common */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু করেছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Male */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">টাখনুর উপরে কাপড় পরেন কিনা?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Female */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কি নিকাব সহ পর্দা করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/SpousePreferenceInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function SpousePreferenceInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          যেমন জীবনসঙ্গী আশা করেন
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত বয়স:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'২"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিশেষ শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মুহাদ্দিসা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            অবিবাহিত, ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেন, শর্ট ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় লাইফস্টাইল:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আল্লাহ যাদেরকে গাঢ় ত্বক বা কালো বর্ণ দিয়েছেন, এরকম পাত্রীর প্রতি
            আপনি আগ্রহী?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div> */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শহরে বসবাসকারী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardLeftNav.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardLeftNav.tsx
import profilePic from "@/assets/images/profile-pic.png";
import { Separator } from "@/components/ui/separator";
import Image from "next/image";

export default function DashboardLeftNav() {
  return (
    <div className="py-12 w-72 flex flex-col items-center space-y-1 bg-[#5b8eaa]">
      <Image
        src={profilePic}
        alt="Male"
        width={80}
        height={40}
        priority
        className="bg-[#77a1b8] p-4 rounded-full"
      />
      <div className="p-2">আব্দুল্লাহ বিন আব্দুর রাজ্জাক</div>
      <div className="mb-4 p-3 bg-[#c6d8e1] text-black rounded-xl">
        বায়োডাটা নং: <span className="font-semibold">43527</span>
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        বায়োডাটা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        নোটিফিকেশন
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        পছন্দের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        শর্টলিস্টের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        শর্টলিস্টের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        যোগাযোগ তথ্যের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        টোকেন
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        বিবাহ সম্পন্ন
      </div>
      <Separator className="bg-white my-4" />
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        জিজ্ঞাসা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        অভিযোগ
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        পরামর্শ
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        মন্তব্য
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainBioStatus.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainBioStatus.tsx
import { Slider } from "@/components/ui/slider";

export default function DashboardMainBioStatus() {
  return (
    <div className="bg-[#f2f4fc] p-8 flex flex-col space-y-2 rounded-xl">
      <div className="text-[#005381] text-center text-2xl">বায়োডাটা</div>
      <div className="text-xs text-[#8c8e92] text-center">
        বায়োডাটা পাবলিশ হয়েছে ৫ নভেম্বর, ২০২৪
      </div>
      <div className="flex space-x-6 text-black mt-4">
        <div className="flex flex-col items-center bg-[#e7ecf6] p-6 space-y-6 rounded-xl">
          <div className="text-lg">বায়োডাটা স্ট্যাটাস</div>
          <div className="flex">
            <div className="py-4 rounded-3xl mr-[-2rem] px-6 bg-[#c65c5c] text-white z-10">
              প্রাইভেট
            </div>
            <div className="py-4 rounded-3xl pr-6 pl-12 bg-[#d9d9d9] text-[#777] ">
              পাবলিক
            </div>
            {/* <div className="py-4 rounded-3xl mr-[-2rem] pl-6 pr-12 bg-[#d9d9d9] text-[#777]">
                প্রাইভেট
              </div>
              <div className="py-4 rounded-3xl px-6 bg-[#c65c5c] text-white z-10">
                পাবলিক
              </div> */}
          </div>
        </div>
        <div className="w-72 flex flex-col items-center bg-[#e7ecf6] p-6 space-y-6 rounded-xl">
          <div className="text-lg">বায়োডাটা সম্পূর্ণতা</div>
          <Slider value={[70]} min={0} max={100} step={1} className="w-full" />
          <div>৭০%</div>
        </div>
        <div className="flex flex-col items-center space-y-6">
          <div className="w-48 p-4 bg-[#5b8eaa] rounded-xl text-white text-center">
            বায়োডাটা দেখুন
          </div>
          <div className="w-48 p-4 bg-[#5b8eaa] rounded-xl text-white text-center">
            বায়োডাটা এডিট করুন
          </div>
        </div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainContactUs.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainContactUs.tsx
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";

export default function DashboardMainContactUs() {
  const tabs = ["জিজ্ঞাসা", "অভিযোগ", "পরামর্শ", "মন্তব্য"];

  return (
    <Tabs defaultValue="জিজ্ঞাসা" className="bg-[#f2f4fc] p-4 rounded-xl gap-0">
      <TabsList className="bg-[#5b8eaa] text-white p-0">
        {tabs.map((x) => (
          <TabsTrigger
            key={x}
            className="p-0 data-[state=active]:bg-[#f2f4fc] data-[state=active]:text-black"
            value={x}
          >
            <div className="px-4 py-2">{x}</div>
          </TabsTrigger>
        ))}
      </TabsList>
      {tabs.map((x) => (
        <TabsContent key={x} value={x}>
          <ContactUsCard />
        </TabsContent>
      ))}
    </Tabs>
  );
}

export function ContactUsCard() {
  return (
    <Card className="bg-transparent border-none shadow-none p-4">
      <CardContent className="flex p-0 items-center space-x-8">
        <Textarea
          className="bg-white text-black selection:bg-[#E25A6F] selection:text-white"
          id="comment"
        />
        <Button className="bg-[#5b8eaa] text-white">Send</Button>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainContent.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainContent.tsx
import DashboardMainBioStatus from "./DashboardMainBioStatus";
import DashboardMainContactUs from "./DashboardMainContactUs";
import DashboardMainMyActivityStatus from "./DashboardMainMyActivityStatus";
import DashboardMainMyBioStatus from "./DashboardMainMyBioStatus";
import DashboardMainNotifications from "./DashboardMainNotifications";

export default function DashboardMainContent() {
  return (
    <div className="py-12 flex flex-col space-y-8 max-w-7xl">
      <DashboardMainBioStatus />
      <div className="flex justify-center space-x-16 text-black">
        <DashboardMainMyActivityStatus />
        <DashboardMainMyBioStatus />
      </div>
      <DashboardMainNotifications />
      <DashboardMainContactUs />
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainMyActivityStatus.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainMyActivityStatus.tsx
export default function DashboardMainMyActivityStatus() {
  return (
    <div className="w-96 bg-[#f2f4fc] p-8 flex flex-col space-y-4 rounded-xl">
      <div className="text-2xl text-[#005381] text-center mb-8">
        আপনার বায়োডাটা সর্বমোট
      </div>
      <div className="flex justify-between">
        <div>ভিউ হয়েছে</div>
        <div className="w-6 text-center">১২</div>
      </div>
      <div className="flex justify-between">
        <div>পছন্দের তালিকায় রেখেছে</div>
        <div className="w-6 text-center">৮</div>
      </div>
      <div className="flex justify-between">
        <div>শর্টলিস্টে রেখেছে</div>
        <div className="w-6 text-center">৫</div>
      </div>
      <div className="flex justify-between">
        <div>প্রাথমিক প্রস্তাব এসেছে</div>
        <div className="w-6 text-center">১২</div>
      </div>
      <div className="flex justify-between">
        <div>যোগাযোগ তথ্য নিয়েছে</div>
        <div className="w-6 text-center">৩</div>
      </div>
      <div className="flex justify-between">
        <div>রিপোর্ট এসেছে</div>
        <div className="w-6 text-center">৩</div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainMyBioStatus.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainMyBioStatus.tsx
export default function DashboardMainMyBioStatus() {
  return (
    <div className="w-96 bg-[#f2f4fc] p-8 flex flex-col space-y-4 rounded-xl">
      <div className="text-2xl text-[#005381] text-center mb-8">
        আপনি সর্বমোট বায়োডাটা
      </div>
      <div className="flex justify-between">
        <div>পছন্দের তালিকায় রেখেছেন</div>
        <div className="w-6 text-center">৮</div>
      </div>
      <div className="flex justify-between">
        <div>শর্টলিস্টে রেখেছেন</div>
        <div className="w-6 text-center">৮</div>
      </div>
      <div className="flex justify-between">
        <div>প্রাথমিক প্রস্তাব পাঠিয়েছেন</div>
        <div className="w-6 text-center">৫</div>
      </div>
      <div className="flex justify-between">
        <div>যোগাযোগ তথ্য নিয়েছেন </div>
        <div className="w-6 text-center">৩</div>
      </div>
      <div className="flex justify-between">
        <div>রিপোর্ট করেছেন</div>
        <div className="w-6 text-center">৩</div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainNotifications.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainNotifications.tsx

export default function DashboardMainNotifications() {
  const notiication = [
    {
      id: 1,
      description: "নোটিফিকেশন 1",
    },
    {
      id: 2,
      description: "নোটিফিকেশন 2",
    },
  ];

  return (
    <div className="bg-[#f2f4fc] p-8 flex flex-col space-y-4 rounded-xl text-black">
      <div className="text-[#005381] text-center text-2xl mb-4">নোটিফিকেশন</div>
      {notiication &&
        notiication.map((x) => (
          <div key={x.id} className="bg-[#e8e8ed] mx-8 p-2 rounded-md text-sm">
            {x.description}
          </div>
        ))}
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardRightSection.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardRightSection.tsx
export default function DashboardRightSection() {
  return (
    <div className="py-12 mr-8 flex flex-col items-center space-y-6">
      <div className="p-10 bg-[#f9f3f9] rounded-3xl flex flex-col items-center justify-center space-y-4">
        <div className="text-black text-center">আপনার সর্বমোট টোকেন সংখ্যা</div>
        <div className="text-8xl text-[#ad0000] font-semibold">১</div>
        <div className="px-6 py-4 bg-[#3c4652] rounded-md">টোকেন কিনুন</div>
      </div>
      <div className="p-10 bg-[#f9f3f9] rounded-3xl flex flex-col items-center justify-center space-y-4">
        <div className="text-black text-center">
          আপনার কি বিবাহ সম্পন্ন হয়েছে?
        </div>
        <div className="px-16 py-4 bg-[#5b8eaa] rounded-md">হ্যা</div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\page.tsx
// --------------------
// File: src/app/(main)/dashboard/page.tsx
"use client";
import { useAppSelector } from "@/redux/hooks";
import { redirect } from "next/navigation";
import DashboardLeftNav from "./DashboardLeftNav";
import DashboardMainContent from "./DashboardMainContent";
import DashboardRightSection from "./DashboardRightSection";

export default function DashboardPage() {
  const user = useAppSelector((state) => state.auth.user);
  const token = useAppSelector((state) => state.auth.acesstoken);
  console.log(user);
  if (!user || !token) {
    redirect("/login");
  }
  return (
    <main className="flex justify-between flex-grow bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <DashboardLeftNav />

      <DashboardMainContent />
      <DashboardRightSection />
    </main>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\layout.tsx
// --------------------
// File: src/app/(main)/layout.tsx
import { Footer } from "@/components/footer";
import { Navbar } from "@/components/navbar";
import { ReactNode } from "react";

export default function MainLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <div className="flex flex-col min-h-screen bg-white">
      <Navbar />
      {children}
      <Footer />
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\tutorial\page.tsx
// --------------------
// File: src/app/(main)/tutorial/page.tsx
const Page = () => {
  return (
    <div>
      <h1>This is Page component</h1>
    </div>
  );
};

export default Page;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\favicon.png
// --------------------
�PNG

   IHDR           ½"   sRGB ���  �IDATHK�V	PUe������Mȥ�u,��1Qf25M��}JSS) �QpI1-�\��r�6&wSGs�Q-DӔ2AA��x����/<|<�ٝ��޽�?�����s�#�ŕ����kPSo�,	�C�d��-�\�(��v������k��M�u�qz�u�¼dt��"�S�E�Pl��J��T����C�I?x�~�/�?w0[���G�����a������YZ7)V(����{����'�R�:�LߕG{.��O�����a�>.d��:L���s�� ��@����1*v�0�OG�9Hp Tl�AJ�%�,�R��:-t�:"8=����9Ag
+�����#��%
(��Ԛ��K�N#!������j#�-v0���VQ�5��@�D���0���T+�,���L�.,ؓO�N�h:���],6��i$����hB�S����R��ƽ0�q��U���.%���H���A3'�o�֒����Q a![��K�M�&h$��zi����\��ͧioA$Q�Y���U�S����;n �fOr1�=%Y�+�A��=�y&_�h/��3� o/ݦH��L�pM��J&%�9D�\�&@U�Wd�+P���k��֏���V����n+DL���ƝgD�	�"�w|��t�{D����ԡ㗫��0��]���- @�m$0�=b�go�we?X��d��� �!r�2�v�)m={��*����5#�c=�&��A�)n�jr�"ù|UL�1]�4�]�����Œ���T	p��,�%��E���6�^���tZf*S>"sQ�ZD��j����\2�m|m���V�m�%�%�" ���޶��$�͎��z#cDO�t�"�E�
?_DnZ�*��.ІS�<z�;�v��w�	ܚ���:���}���_���yE<� Vr���������k�2< Ao��q�%����V����N�7� �<$h$Dm�؅@�%�����+�[hG�5c!)F�Z�r���׹c}��@\�`�3.��i���q 9"�-��K��l
��Ӟ댭S�� w27QåkjZ�$��ڠ�1�(�!{�#8�(MIQ�ٷBޟ��,؝Ok�]s԰}�x'ے�I�Q�(���AhZ�>$�8�*�����{E`���m�\�)���� ��FU��_�J��r v�׽�D�����͜��[W�3���]�-���8|���P�¹U��ز�ed�S�S&�� r�N�ѫ圀�����d[���l�U��
GؚTa�Z{�/X���Ɇ��D��}�j���~?l�):�g9�b�$ռ�̌����(��+����`�� ����`�ا]n�qp=4P���]����DX8�V�v����y���+�Be��7c�`��g[��.���Ⳁ��?c� &|G|$`J�F��QN��>���ޮU�<$o�������m�g��G��r2�N����� ��z��NF���MVܩk��X�Y�l�����킪5[�t�2�� x�d�g^.���FQ�.��쌀V��Ʊ�C�b�+Y>o%�+��8���<B7*��j���8��SQ8:���[
���Gb�U������Ow�,���2��A6���1�8옶�h�o��#�-w�gd��DQ� ���q2�`7�@Z�K�v���E�	��~�
��
A��}�����9��xa��    IEND�B`�

// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\globals.css
// --------------------
/* File: src/app/globals.css */
@import "tailwindcss";

@plugin "tailwindcss-animate";

@custom-variant dark (&:is(.dark *));

:root {
  --background: hsl(0 0% 100%);
  --foreground: hsl(0 0% 3.9%);
  --card: hsl(0 0% 100%);
  --card-foreground: hsl(0 0% 3.9%);
  --popover: hsl(0 0% 100%);
  --popover-foreground: hsl(0 0% 3.9%);
  --primary: hsl(0 0% 9%);
  --primary-foreground: hsl(0 0% 98%);
  --secondary: hsl(0 0% 96.1%);
  --secondary-foreground: hsl(0 0% 9%);
  --muted: hsl(0 0% 96.1%);
  --muted-foreground: hsl(0 0% 45.1%);
  --accent: hsl(0 0% 96.1%);
  --accent-foreground: hsl(0 0% 9%);
  --destructive: hsl(0 84.2% 60.2%);
  --destructive-foreground: hsl(0 0% 98%);
  --border: hsl(0 0% 89.8%);
  --input: hsl(0 0% 89.8%);
  --ring: hsl(0 0% 3.9%);
  --chart-1: hsl(12 76% 61%);
  --chart-2: hsl(173 58% 39%);
  --chart-3: hsl(197 37% 24%);
  --chart-4: hsl(43 74% 66%);
  --chart-5: hsl(27 87% 67%);
  --radius: 0.6rem;
  --sidebar: hsl(0 0% 98%);
  --sidebar-foreground: hsl(240 5.3% 26.1%);
  --sidebar-primary: hsl(240 5.9% 10%);
  --sidebar-primary-foreground: hsl(0 0% 98%);
  --sidebar-accent: hsl(240 4.8% 95.9%);
  --sidebar-accent-foreground: hsl(240 5.9% 10%);
  --sidebar-border: hsl(220 13% 91%);
  --sidebar-ring: hsl(217.2 91.2% 59.8%);
}

.dark {
  --background: hsl(0 0% 3.9%);
  --foreground: hsl(0 0% 98%);
  --card: hsl(0 0% 3.9%);
  --card-foreground: hsl(0 0% 98%);
  --popover: hsl(0 0% 3.9%);
  --popover-foreground: hsl(0 0% 98%);
  --primary: hsl(0 0% 98%);
  --primary-foreground: hsl(0 0% 9%);
  --secondary: hsl(0 0% 14.9%);
  --secondary-foreground: hsl(0 0% 98%);
  --muted: hsl(0 0% 14.9%);
  --muted-foreground: hsl(0 0% 63.9%);
  --accent: hsl(0 0% 14.9%);
  --accent-foreground: hsl(0 0% 98%);
  --destructive: hsl(0 62.8% 30.6%);
  --destructive-foreground: hsl(0 0% 98%);
  --border: hsl(0 0% 14.9%);
  --input: hsl(0 0% 14.9%);
  --ring: hsl(0 0% 83.1%);
  --chart-1: hsl(220 70% 50%);
  --chart-2: hsl(160 60% 45%);
  --chart-3: hsl(30 80% 55%);
  --chart-4: hsl(280 65% 60%);
  --chart-5: hsl(340 75% 55%);
  --sidebar: hsl(240 5.9% 10%);
  --sidebar-foreground: hsl(240 4.8% 95.9%);
  --sidebar-primary: hsl(224.3 76.3% 48%);
  --sidebar-primary-foreground: hsl(0 0% 100%);
  --sidebar-accent: hsl(240 3.7% 15.9%);
  --sidebar-accent-foreground: hsl(240 4.8% 95.9%);
  --sidebar-border: hsl(240 3.7% 15.9%);
  --sidebar-ring: hsl(217.2 91.2% 59.8%);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;

  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }

  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\HomeSearchBiodata.tsx
// --------------------
"use client";

import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import {
  biodataTypes,
  locations,
  maritalStatuses,
  religiousLifestyle,
} from "@/lib/consts";
import { useRouter } from "next/navigation";
import { MouseEvent, useState } from "react";

export function HomeSearchBiodata() {
  const router = useRouter();
  const [range, setRange] = useState([18, 80]);
  const [biodataType, setBiodataType] = useState("all");
  const [maritalStatus, setMaritalStatus] = useState("all");
  const [location, setLocation] = useState("all");
  const [muslimType, setMuslimType] = useState("all");

  const handleSearchClick = (event: MouseEvent) => {
    event.preventDefault();
    const query = new URLSearchParams({
      biodataType: biodataType === "all" ? "" : biodataType,
      maritalStatus: maritalStatus === "all" ? "" : maritalStatus,
      location: location === "all" ? "" : location,
      religiousLifestyle: muslimType === "all" ? "" : muslimType,
      ageMin: range[0].toString(),
      ageMax: range[1].toString(),
    }).toString();
    router.push(`/biodatas?${query}`);
  };

  return (
    <div className="bg-white p-8 shadow-lg flex flex-wrap">
      <div className="w-1/3 space-y-2 p-2">
        <Label>আমি খুঁজছি</Label>
        <Select value={biodataType} onValueChange={setBiodataType}>
          <SelectTrigger>
            <SelectValue placeholder="সকল বায়োডাটা" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">সকল বায়োডাটা</SelectItem>
            {biodataTypes.map((type) => (
              <SelectItem key={type.id} value={type.id}>
                {type.title}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="w-1/3 space-y-2 p-2">
        <Label>বৈবাহিক অবস্থা</Label>
        <Select value={maritalStatus} onValueChange={setMaritalStatus}>
          <SelectTrigger>
            <SelectValue placeholder="সকল অবস্থা" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">সকল অবস্থা</SelectItem>
            {maritalStatuses
              .filter((m) => m.for === biodataType || m.for === "both")
              .map((status) => (
                <SelectItem key={status.id} value={status.id}>
                  {status.title}
                </SelectItem>
              ))}
          </SelectContent>
        </Select>
      </div>

      <div className="w-1/3 space-y-2 p-2">
        <Label>স্থায়ী ঠিকানা</Label>
        <Select value={location} onValueChange={setLocation}>
          <SelectTrigger>
            <SelectValue placeholder="সকল ঠিকানা" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">সকল ঠিকানা</SelectItem>
            {locations.map((loc) => (
              <SelectItem key={loc.id} value={loc.id}>
                {loc.title}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="w-1/3 space-y-2 p-2">
        <Label>ধর্মীয় লাইফস্টাইল</Label>
        <Select value={muslimType} onValueChange={setMuslimType}>
          <SelectTrigger>
            <SelectValue placeholder="সকল" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">সকল</SelectItem>
            {religiousLifestyle.map((type) => (
              <SelectItem key={type.id} value={type.id}>
                {type.title}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <div className="w-1/3 space-y-3 p-2">
        <Label
          className="block font-medium text-[#1f4f69] text-center"
          htmlFor="religious"
        >
          বয়স
        </Label>
        <div className="flex items-center space-x-1">
          <div className="text-[#1f4f69]">{range[0]}</div>
          <Slider
            value={range}
            onValueChange={setRange}
            min={18}
            max={80}
            step={1}
            className="w-full"
          />
          <div className="text-[#1f4f69]">{range[1]}</div>
        </div>
      </div>
      <div className="w-1/3 space-y-1 p-2">
        <p className="text-center text-sm text-gray-700">বিসমিল্লাহ</p>
        <Button
          className="w-full p-2 bg-[#E25A6F] text-white rounded hover:bg-[#D14A5F]"
          onClick={handleSearchClick}
        >
          খুঁজুন
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\interfaces\biodata.interfaces.ts
// --------------------
export type BiodataStatus =
  | "draft"
  | "completed"
  | "pendingApproval"
  | "approved";

export interface CreateBiodataResponse {
  id: string;
  status: BiodataStatus;
}

export interface UpdateBiodataResponse {
  id: string;
  status: BiodataStatus;
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\layout.tsx
// --------------------
// File: src/app/layout.tsx
import RootProvider from "@/lib/provider/RootProvider";
import type { Metadata } from "next";
import { ThemeProvider } from "next-themes";
import { Inter } from "next/font/google";
import { ReactNode } from "react";
import { Toaster } from "sonner";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: {
    template: "%s - Sohoz Nikah",
    absolute: "Sohoz Nikah",
  },
  description:
    "Sohoz Nikah is the easiest way to create and search life partners.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className} suppressHydrationWarning>
        <RootProvider>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
            <Toaster />
          </ThemeProvider>
        </RootProvider>
      </body>
    </html>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\loading.tsx
// --------------------
// File: src/app/loading.tsx

import { Loader2 } from "lucide-react";

export default function Loading() {
  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <Loader2 className="animate-spin text-[#E25A6F]" size={64} />
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\page.tsx
// --------------------
// File: src/app/page.tsx
import { Footer } from "@/components/footer";
import { Navbar } from "@/components/navbar";
import { HomeSearchBiodata } from "./HomeSearchBiodata";

export default function HomePage() {
  return (
    <div className="flex flex-col min-h-screen bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <Navbar />

      <main className="flex-grow max-w-7xl mt-12 mx-auto flex flex-col text-[#1f4f69]">
        <div className="text-3xl text-center mb-8">
          বিবাহযোগ্য মুসলিম পাত্র-পাত্রী খোঁজার সহজ মাধ্যম
        </div>

        <p className="text-center mb-4">
          Bangladesh's Trusted Matrimony Platform
        </p>

        <div className="text-center mb-12">
          <blockquote className="italic text-[#b1466e]">
            "তোমরা সহজ করো এবং কঠিন করো না।
            <br />
            সুসংবাদ দাও এবং বিরক্ত করো না।"
          </blockquote>
          <p className="text-gray-500 mt-2">(বুখারী ৩০৩৮)</p>
        </div>

        <div className="flex items-center justify-center">
          <div className="text-2xl text-center mb-4 pb-4 border-b-4 border-[#1f4f69]">
            জীবনসঙ্গী খুঁজুন
          </div>
        </div>
        <div className="p-4 bg-gradient-to-r from-[#dce9f0] to-[#fbe6e9]">
          <HomeSearchBiodata />
        </div>
      </main>

      <Footer />
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\services\base.ts
// --------------------
import axios from "axios";

// Create an axios instance
export const http = axios.create({
  withCredentials: true,
  baseURL: process.env.NEXT_PUBLIC_API_URL, // Replace with your base URL
  headers: {
    "Content-Type": "application/json", // Default headers
  },
});

http.interceptors.request.use(
  function (config) {
    // Do something before request is sent
    console.log("request interceptor");
    return config;
  },
  function (error) {
    // Do something with request error
    console.log("request interceptor error");
    return Promise.reject(error);
  }
);

http.interceptors.response.use(
  function (response) {
    // Any status code that lie within the range of 2xx cause this function to trigger
    // Do something with response data
    console.log("response interceptor");
    return response;
  },
  function (error) {
    // Any status codes that falls outside the range of 2xx cause this function to trigger
    // Do something with response error
    console.log("response interceptor error");
    if (error.response?.status === 401) {
      // Handle session expiry globally
      // useUserStore.getState().setUser(null);
      // useSessionStore.getState().setIsAdmin(false);
      // useSessionStore.getState().setIsAuthenticated(false);
    }
    return Promise.reject(error);
  }
);


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\services\biodata.service.ts
// --------------------
import {
  FirstWordsFormData,
  GeneralInfoFormData,
  PrimaryInfoFormData,
} from "@/lib/types";
import {
  CreateBiodataResponse,
  UpdateBiodataResponse,
} from "../interfaces/biodata.interfaces";
import { http } from "./base";

export const createBiodata = async (
  data: FirstWordsFormData
): Promise<CreateBiodataResponse> => {
  //   const result = await http.post<CreateBiodataResponse>(`/biodatas`);
  //   return result.data;
  console.log(data);
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        id: "12345",
        status: "draft",
      });
    }, 1000); // Simulate network delay
  });
};

export const updatePrimaryInfo = async (
  id: string,
  data: PrimaryInfoFormData
): Promise<UpdateBiodataResponse> => {
  const result = await http.patch<UpdateBiodataResponse>(
    `/biodatas/${id}/primary-info`
  );
  return result.data;
};

export const updateGeneralInfo = async (
  id: string,
  data: GeneralInfoFormData
): Promise<UpdateBiodataResponse> => {
  const result = await http.patch<UpdateBiodataResponse>(
    `/biodatas/${id}/general-info`
  );
  return result.data;
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\BiodataEditor.tsx
// --------------------
// File: src/app/(main)/biodata-editor/BiodataEditor.tsx

"use client";

import { useCreateBiodataMutation } from "@/redux/features/admin/biodataApi";
import {
  clearBiodataFormData,
  updateBiodataFormData,
} from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch, useAppSelector } from "@/redux/hooks";
import { useRouter, useSearchParams } from "next/navigation";
import { useCallback, useEffect, useMemo } from "react";
import { toast } from "sonner";
import Breadcrumbs from "./biodataFormComponents/Breadcrumbs";
import { steps } from "./steps";

// Map step keys to Redux state keys
const stepKeyToStateKey: Record<string, string> = {
  "first-words": "firstWordsFormData",
  "primary-info": "primaryInfoFormData",
  "general-info": "generalInfoFormData",
  "address-info": "addressInfoFormData",
  "education-info": "educationInfoFormData",
  "occupation-info": "occupationInfoFormData",
  "family-info": "familyInfoFormData",
  "religious-info": "religiousInfoFormData",
  "personal-info": "personalInfoFormData",
  "marriage-info": "marriageInfoFormData",
  "spouse-preference-info": "spousePreferenceInfoFormData",
  "profile-pic": "profilePicFormData",
  "final-words": "finalWordsFormData",
};

interface BiodataEditorProps {
  biodataToEdit: any | null;
}

export default function BiodataEditor({ biodataToEdit }: BiodataEditorProps) {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const biodataFormData = useAppSelector(
    (state) => state.biodata.biodataFormData
  );
  const { user, acesstoken } = useAppSelector((state) => state.auth);
  const [createBiodata, { isLoading }] = useCreateBiodataMutation();

  const searchParams = useSearchParams();
  const currentStepKey = searchParams.get("step") || steps[0].key;
  const currentStep = useMemo(
    () => steps.find((x) => x.key === currentStepKey),
    [currentStepKey]
  );

  useEffect(() => {
    if (!user || !acesstoken) {
      const redirectUrl = `/biodata-editor?step=${currentStepKey}`;
      router.push(`/login?redirect=${encodeURIComponent(redirectUrl)}`);
    }
  }, [user, acesstoken, router, currentStepKey]);

  const setStep = useCallback(
    (key: string) => {
      const newSearchParams = new URLSearchParams(searchParams);
      newSearchParams.set("step", key);
      window.history.pushState(null, "", `?${newSearchParams.toString()}`);
    },
    [searchParams]
  );

  const FormComponent = useMemo(() => currentStep?.component, [currentStep]);

  const handleFormDataUpdate = useCallback(
    (data: any) => {
      const cleanData = JSON.parse(JSON.stringify(data));
      const stateKey = stepKeyToStateKey[currentStepKey] || currentStepKey;
      dispatch(
        updateBiodataFormData({
          key: stateKey,
          data: cleanData,
        })
      );
    },
    [dispatch, currentStepKey]
  );

  const handleSave = useCallback(async () => {
    if (!currentStep || !user) return;

    if (currentStep.key === "final-words") {
      try {
        const completeBiodata = {
          userId: user.userId,
          ...JSON.parse(JSON.stringify(biodataFormData)),
        };
        const result = await createBiodata(completeBiodata).unwrap();
        if (result.success) {
          toast.success("Biodata created successfully!");
          dispatch(clearBiodataFormData());
          setStep(steps[0].key);
          router.push("/dashboard");
        } else {
          toast.error(result.message || "Failed to create biodata.");
        }
      } catch (error: any) {
        console.error("Failed to save biodata:", error);
        toast.error(error?.message || "Failed to create biodata.");
      }
    } else {
      setStep(currentStep.next);
    }
  }, [
    currentStep,
    biodataFormData,
    setStep,
    dispatch,
    createBiodata,
    user,
    router,
  ]);

  if (!FormComponent || !user) return null;

  return (
    <div className="container mx-auto p-4">
      <Breadcrumbs currentStep={currentStepKey} setCurrentStep={setStep} />
      <FormComponent
        biodataFormData={biodataFormData}
        setBiodataFormData={handleFormDataUpdate}
        handleSave={handleSave}
        currentStep={currentStep}
        setCurrentStep={setStep}
      />
      {process.env.NODE_ENV === "development" && (
        <pre>{JSON.stringify(biodataFormData, null, 2)}</pre>
      )}
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/AddressInfo.tsx

"use client";

// import { Button } from "@/components/ui/button";
// import {
//   Form,
//   FormControl,
//   FormField,
//   FormItem,
//   FormLabel,
//   FormMessage,
// } from "@/components/ui/form";
// import { Input } from "@/components/ui/input";
// import { Label } from "@/components/ui/label";
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
// import {
//   Select,
//   SelectContent,
//   SelectItem,
//   SelectTrigger,
//   SelectValue,
// } from "@/components/ui/select";
// import { citizenshipOptions, locations, types } from "@/lib/consts";
// import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
// import { addressInfoFormData } from "@/lib/validations";
// import { zodResolver } from "@hookform/resolvers/zod";
// import { Minus, Plus } from "lucide-react";
// import { useEffect, useState } from "react";
// import { useFieldArray, useForm } from "react-hook-form";

// export default function AddressInfo({
//   biodataFormData,
//   setBiodataFormData,
//   handleSave,
//   currentStep,
//   setCurrentStep,
// }: BiodataFormDataProps) {
//   const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

//   const form = useForm<AddressInfoFormData>({
//     resolver: zodResolver(addressInfoFormData),
//     defaultValues: {
//       addresses: biodataFormData?.addressInfoFormData?.addresses || [
//         {
//           type: "",
//           location: "",
//           state: "",
//           city: "",
//           detail: "",
//           country: "",
//           cityzenshipStatus: "",
//         },
//       ],
//     },
//   });

//   const { fields, append, remove } = useFieldArray({
//     control: form.control,
//     name: "addresses",
//   });

//   useEffect(() => {
//     const { unsubscribe } = form.watch(async (values) => {
//       if (submittedOnce) {
//         await form.trigger();
//       }
//       setBiodataFormData({
//         ...biodataFormData,
//         addressInfoFormData: { ...values },
//       });
//     });
//     return unsubscribe;
//   }, [
//     submittedOnce,
//     setSubmittedOnce,
//     form,
//     biodataFormData,
//     setBiodataFormData,
//   ]);

//   const handleNextClick = async () => {
//     setSubmittedOnce(true);
//     const isValid = await form.trigger();
//     if (isValid) {
//       handleSave();
//     }
//   };

//   return (
//     <div className="flex flex-col items-center justify-center space-y-8">
//       <div className="text-3xl text-center text-black">ঠিকানা</div>
//       <Form {...form}>
//         <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
//           {fields.map((field, index) => (
//             <div
//               className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
//               key={field.id}
//             >
//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.type`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার ধরন:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="ঠিকানার ধরন" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {types.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                         <Button
//                           type="button"
//                           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
//                           onClick={() => remove(index)}
//                         >
//                           <Minus size={20} />
//                         </Button>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.location`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       অবস্থান ধরণ:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="অবস্থান ধরণ:" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {locations.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.state`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "স্টেট"
//                       : "স্থায়ী জেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         {label}:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.city`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "শহর"
//                       : "স্থায়ী উপজেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         <div>{label}:</div>
//                         <div className="text-xs">(যদি থাকে)</div>
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.detail`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার বিস্তারিত:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Input
//                             {...field}
//                             className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                             type="text"
//                             placeholder="ঠিকানার বিস্তারিত"
//                           />
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.country`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         দেশের নাম:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               id="emailMobileNumber"
//                               type="text"
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.cityzenshipStatus`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         সিটিজেনশিপ আছে?
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <RadioGroup
//                               className="w-full flex flex-wrap gap-0 min-h-12"
//                               onValueChange={field.onChange}
//                               value={field.value}
//                             >
//                               {citizenshipOptions.map((x) => (
//                                 <div
//                                   key={x.id}
//                                   className="w-1/3 flex items-center space-x-2"
//                                 >
//                                   <RadioGroupItem value={x.id} id={x.id} />
//                                   <Label htmlFor={x.id}>{x.title}</Label>
//                                 </div>
//                               ))}
//                             </RadioGroup>
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//             </div>
//           ))}

//           {/* Add New Address */}
//           <Button
//             type="button"
//             className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
//             onClick={() =>
//               append({
//                 type: "",
//                 location: "",
//                 state: "",
//                 city: "",
//                 detail: "",
//                 country: "",
//                 cityzenshipStatus: "",
//               })
//             }
//           >
//             <Plus size={20} /> <span>নতুন ঠিকানা যোগ করুন</span>
//           </Button>
//         </form>
//       </Form>

//       <div className="max-w-4xl w-full space-x-2 flex justify-center">
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={() => setCurrentStep(currentStep.prev)}
//         >
//           Previous
//         </Button>
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={handleNextClick}
//         >
//           Next
//         </Button>
//       </div>
//     </div>
//   );
// }

"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { citizenshipOptions, locations, types } from "@/lib/consts";
import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
import { addressInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function AddressInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState(false);

  const form = useForm<AddressInfoFormData>({
    resolver: zodResolver(addressInfoFormData),
    defaultValues: {
      addresses:
        biodataFormData?.addressInfoFormData?.addresses?.length > 0
          ? biodataFormData.addressInfoFormData.addresses
          : [
              {
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "addresses",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({ addressInfoFormData: values }); // Update Redux with form data
    });
    return unsubscribe;
  }, [submittedOnce, form, setBiodataFormData]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">ঠিকানা</h2>
      <Form {...form}>
        <form className="space-y-4">
          {fields.map((field, index) => (
            <div key={field.id} className="space-y-4 border p-4 rounded-md">
              <FormField
                control={form.control}
                name={`addresses.${index}.type`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার ধরন:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {types.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                    {fields.length > 1 && (
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        onClick={() => remove(index)}
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    )}
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.location`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>অবস্থান ধরণ:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {locations.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.state`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "স্টেট"
                      : "স্থায়ী জেলা";
                  return (
                    <FormItem>
                      <FormLabel>{label}:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.city`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "শহর"
                      : "স্থায়ী উপজেলা";
                  return (
                    <FormItem>
                      <FormLabel>
                        {label}:{" "}
                        <span className="text-muted-foreground">
                          (যদি থাকে)
                        </span>
                      </FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.detail`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার বিস্তারিত:</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="উল্লেখ করুন" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.country`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>দেশের নাম:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.cityzenshipStatus`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>সিটিজেনশিপ আছে?</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="নির্বাচন করুন" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {citizenshipOptions.map((x) => (
                            <SelectItem key={x.id} value={x.id}>
                              {x.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>
          ))}
          <Button
            type="button"
            variant="outline"
            onClick={() =>
              append({
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              })
            }
          >
            <Plus className="h-4 w-4 mr-2" /> নতুন ঠিকানা যোগ করুন
          </Button>
        </form>
      </Form>
      <div className="flex justify-between mt-4">
        <Button
          variant="outline"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\Breadcrumbs.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/Breadcrumbs.tsx

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
} from "@/components/ui/breadcrumb";
import { steps } from "../steps";

interface BreadcrumbsProps {
  currentStep: string;
  setCurrentStep: (step: string) => void;
}

export default function Breadcrumbs({
  currentStep,

  setCurrentStep,
}: BreadcrumbsProps) {
  return (
    <Breadcrumb className="max-w-6xl bg-[#f6f6f6] rounded-2xl p-2">
      <BreadcrumbList className="flex justify-center">
        {steps.map((step) => (
          <BreadcrumbItem
            key={step.key}
            className="text-[#004972] rounded-full"
          >
            {step.key === currentStep ? (
              <BreadcrumbPage className="bg-[#e25a6f] text-white px-3 py-2 rounded-full">
                {step.title}
              </BreadcrumbPage>
            ) : (
              <BreadcrumbLink
                asChild
                className="hover:text-[#e25a6f] px-3 py-2 cursor-pointer"
              >
                <button onClick={() => setCurrentStep(step.key)}>
                  {step.title}
                </button>
              </BreadcrumbLink>
            )}
          </BreadcrumbItem>
        ))}
      </BreadcrumbList>
    </Breadcrumb>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\EducationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/EducationInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { educationTypes, religiousEducation } from "@/lib/consts";
import { BiodataFormDataProps, EducationInfoFormData } from "@/lib/types";
import { educationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function EducationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<EducationInfoFormData>({
    resolver: zodResolver(educationInfoFormData),
    defaultValues: {
      type: biodataFormData?.educationInfoFormData?.type || "",
      highestDegree:
        biodataFormData?.educationInfoFormData?.highestDegree || "",
      degrees:
        biodataFormData?.educationInfoFormData?.degrees?.length > 0
          ? biodataFormData?.educationInfoFormData?.degrees.map((x) => {
              return {
                name: x.name,
                passYear: x.passYear,
                group: x.group,
                institute: x.institute,
              };
            })
          : [{ name: "", passYear: "", group: "", institute: "" }],
      religiousEducation:
        biodataFormData?.educationInfoFormData?.religiousEducation || [],
      detail: biodataFormData?.educationInfoFormData?.detail || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        educationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "degrees",
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">শিক্ষাগত যোগ্যতা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষার ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="শিক্ষার ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {educationTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="highestDegree"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার সর্বোচ্চ শিক্ষাগত ডিগ্রীর নাম:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="text-[#E25A6F]">
            মাধ্যমিক পর্যায় থেকে শুরু করে এখন পর্যন্ত যেসকল ডিগ্রী অর্জন করেছেন
            বা চলমান রয়েছে সেগুলো নিচে প্লাস বাটন চাপ দিয়ে ধাপে ধাপে যুক্ত করুন।
            কোনো ডিগ্রী না থাকলে খালি রাখুন।
          </div>
          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`degrees.${index}.name`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ডিগ্রীর নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center space-x-2">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="ডিগ্রীর নাম"
                          />
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.passYear`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পাশের সন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পাশের সন"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.group`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বিভাগ/বিষয়:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বিভাগ/বিষয়"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.institute`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      শিক্ষা প্রতিষ্ঠানের নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="শিক্ষা প্রতিষ্ঠানের নাম"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                name: "",
                passYear: "",
                group: "",
                institute: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ডিগ্রী যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="religiousEducation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value?.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষা সম্পর্কিত আরো কিছু জানাতে চাইলে নিচে লিখুন। অন্যথায়
                    খালি রাখুন।
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FamilyInfo.tsx

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { familyBackgrounds, familyTypes, siblingTypes } from "@/lib/consts";
import { BiodataFormDataProps, FamilyInfoFormData } from "@/lib/types";
import { familyInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function FamilyInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FamilyInfoFormData>({
    resolver: zodResolver(familyInfoFormData),
    defaultValues: {
      parentsAlive: biodataFormData?.familyInfoFormData?.parentsAlive || "",
      fatherOccupation:
        biodataFormData?.familyInfoFormData?.fatherOccupation || "",
      motherOccupation:
        biodataFormData?.familyInfoFormData?.motherOccupation || "",
      siblings: biodataFormData?.familyInfoFormData?.siblings || [],
      fatherSideDetail:
        biodataFormData?.familyInfoFormData?.fatherSideDetail || "",
      motherSideDetail:
        biodataFormData?.familyInfoFormData?.motherSideDetail || "",
      familyType: biodataFormData?.familyInfoFormData?.familyType || "",
      familyBackground:
        biodataFormData?.familyInfoFormData?.familyBackground || "",
      livingCondition:
        biodataFormData?.familyInfoFormData?.livingCondition || "",
      wealthDescription:
        biodataFormData?.familyInfoFormData?.wealthDescription || "",
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "siblings",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        familyInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পারিবারিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="parentsAlive"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পিতা-মাতা উভয়েই জীবিত আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনার পিতা-মাতা উভয়েই জীবিত আছেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`siblings.${index}.type`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ভাই/বোন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Select
                            value={field.value}
                            onValueChange={field.onChange}
                          >
                            <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                              <SelectValue placeholder="ভাই/বোন" />
                            </SelectTrigger>
                            <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                              {siblingTypes.map((x) => (
                                <SelectItem
                                  key={x.id}
                                  className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                                  value={x.id}
                                >
                                  {x.title}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.occupation`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পেশা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পেশা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.maritalStatus`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বৈবাহিক অবস্থা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বৈবাহিক অবস্থা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.children`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      সন্তান সংখ্যা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="সন্তান সংখ্যা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                type: "",
                occupation: "",
                maritalStatus: "",
                children: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ভাই/বোন যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="fatherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    চাচা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="চাচা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মামা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মামা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের অর্থনৈতিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyBackgrounds.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="livingCondition"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া
                    বাড়িতে?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="wealthDescription"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FinalWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FinalWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Label } from "@/components/ui/label";
import { BiodataFormDataProps, FinalWordsFormData } from "@/lib/types";
import { finalWordsFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function FinalWords({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FinalWordsFormData>({
    resolver: zodResolver(finalWordsFormData),
    defaultValues: {
      postApprovalOathTruthfulInfo:
        biodataFormData?.finalWordsFormData?.postApprovalOathTruthfulInfo ||
        false,
      postApprovalOathNoMisuse:
        biodataFormData?.finalWordsFormData?.postApprovalOathNoMisuse || false,
      postApprovalOathLegalResponsibility:
        biodataFormData?.finalWordsFormData
          ?.postApprovalOathLegalResponsibility || false,
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        finalWordsFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">শেষ কথা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-10 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl text-center">
            প্রতিশ্রুতি নামা
          </div>
          <div className="text-[#cd0000] space-y-3">
            <div className="flex items-center space-x-2">
              <Label htmlFor="preApprove1" className="text-[#6C0011] leading-5">
                আমি আল্লাহর নামে শপথ করছি যে,
              </Label>
            </div>
            <FormField
              control={form.control}
              name="postApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি বায়োডাটায় সকল তথ্য সত্য প্রদান করেছি।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathNoMisuse"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      সহজনিকাহ ম্যাট্রিমনি ওয়েবসাইটের কোনো তথ্য অসৎ কাজে ব্যবহার
                      করবো না।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      কোনো মিথ্যা তথ্য প্রদান করলে বা কোনো তথ্য অসৎ কাজে ব্যবহার
                      করে থাকলে, দুনিয়াবী যেকোনো আইনী জটিলতা এবং পরকালীন সকল
                      দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-ful">
        <Button className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]">
          Submit and Send For Approval
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FirstWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FirstWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { FirstWordsFormData } from "@/lib/types";
import { firstWordsFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import { useForm } from "react-hook-form";

interface BiodataFormDataProps {
  biodataFormData: any;
  handleSave: () => void;
  currentStep: any;
  setCurrentStep: (step: string) => void;
}

export default function FirstWords({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FirstWordsFormData>({
    resolver: zodResolver(firstWordsFormData),
    defaultValues: {
      preApprovalAcceptTerms:
        biodataFormData?.firstWordsFormData?.preApprovalAcceptTerms || false,
      preApprovalOathTruthfulInfo:
        biodataFormData?.firstWordsFormData?.preApprovalOathTruthfulInfo ||
        false,
      preApprovalOathLegalResponsibility:
        biodataFormData?.firstWordsFormData
          ?.preApprovalOathLegalResponsibility || false,
    },
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      // Only update if we have valid values
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "firstWordsFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">
        বায়োডাটা তৈরির পূর্বে কিছু গুরুত্বপূর্ণ কথা
      </div>
      <div className="max-w-4xl w-full space-y-4 text-sm text-black">
        <div>
          আপনি যখন সহজনিকাহ ম্যাট্রিমনিতে জীবনসঙ্গী খুঁজতে এসেছেন, এর মানে হলো,
          আপনি বিবাহের একটি অত্যন্ত গুরুত্বপূর্ণ অধ্যায় অতিবাহিত করছেন। চাকরির
          জন্য যেমন সুন্দর করে গুছিয়ে একটি সিভি তৈরি করা হয়, ঠিক তেমনি
          জীবনসঙ্গী নির্বাচনের ক্ষেত্রে আরও বেশি সুন্দর করে এবং গুরুত্ব দিয়ে
          বায়োডাটা তৈরি করা উচিত। কেননা যিনি আপনার কাছে জীবনসঙ্গী হয়ে আসবেন,
          তিনি যেন এই বায়োডাটার মাধ্যমে আপনাকে সঠিকভাবে জানাতে এবং বুঝতে পারেন।
        </div>
        <div>
          তাই সময় নিয়ে, মনোযোগ দিয়ে আপনার বায়োডাটা গুছিয়ে তৈরি করুন। প্রতিটি
          প্রশ্নের উত্তর সত্য এবং সঠিকভাবে দিন এবং নিশ্চিত করুন যে, তথ্যগুলো
          আপনাকে অপরপক্ষের কাছে সঠিকভাবে উপস্থাপন করছে। সম্পূর্ণ বায়োডাটা
          তৈরিতে বেশ কিছুটা সময় লাগবে, কারণ এখানে অনেকগুলো প্রশ্ন আছে। কাজেই
          ধৈর্য্য সহকারে, বেশ কিছুটা সময় নিয়ে বায়োডাটা ফর্ম পূরণ করুন।
          (আনুমানিক ৩০ মিনিট)
        </div>
        <div>
          বি: দ্র:{" "}
          <span className="text-[#005A8B]">
            আপনার এই বায়োডাটা কেউ পছন্দ করলে এবং আপনার সাথে যোগাযোগ করতে চাইলে
            শুধুমাত্র আপনার অভিভাবকের যোগাযোগের মোবাইল নম্বর প্রদান করা হবে।
            একইভাবে আপনিও কোনো বায়োডাটার যোগাযোগ তথ্য নিতে চাইলে শুধুমাত্র
            অভিভাবকের যোগাযোগ নম্বর নিতে পারবেন।
          </span>
        </div>
      </div>
      <div className="max-w-4xl w-full bg-[#f6f6f6] py-6 px-12 space-y-4 text-black rounded-4xl">
        <div className="text-[#005A8B] text-xl">
          বায়োডাটা অ্যাপ্রুভ হওয়ার শর্তসমূহ:
        </div>
        <div className="text-sm">
          <ol className="list-decimal space-y-1">
            <li>
              অবশ্যই মুসলিম হতে হবে। সহজনিকাহ শুধুমাত্র প্রাক্টিসিং,
              নন-প্রাক্টিসিং সহ সকল ধরণের মুসলিমদের নিয়ে কাজ করে থাকে।
            </li>
            <li>
              ছেলেদের বয়স কমপক্ষে ২১ বছর এবং মেয়েদের ক্ষেত্রে ১৮ বছর হতে হবে।
            </li>
            <li>
              অভিভাবকের যোগাযোগ তথ্যের ঘরে পাত্র/পাত্রীর নিজের বা বন্ধুর মোবাইল
              নম্বর প্রদান করা যাবে না।
            </li>
            <li>
              বাংলা, ইংলিশ মিশ্রিত বাংলিশ ভাষায় লেখা যাবে না। পুরোটাই বাংলায়
              অথবা পুরোটাই ইংরেজিতে লিখতে হবে।
            </li>
            <li>
              নিজের শিক্ষা, পেশা এবং পারিবারিক তথ্যে বিস্তারিত উত্তর লিখতে হবে।
            </li>
            <li>
              তথ্য ভেরিফিকেশনের সময় বায়োডাটায় দেওয়া তথ্যের সাথে মিল থাকতে হবে।
            </li>
          </ol>
        </div>
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-6 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl">প্রতিশ্রুতি নামা:</div>
          <div className="text-[#cd0000] space-y-2">
            <FormField
              control={form.control}
              name="preApprovalAcceptTerms"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি শর্তসমূহ পড়েছি এবং তা মেনে চলার প্রতিশ্রুতি দিচ্ছি।
                    </FormLabel>

                    {/* <FormDescription>
                      Describe what this resume is for.
                    </FormDescription> */}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আল্লাহর নামে শপথ করছি যে, বায়োডাটায় সকল তথ্য সত্য
                      প্রদান করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আরও শপথ করছি যে, কোনো মিথ্যা তথ্য প্রদান করলে দুনিয়াবী
                      যেকোনো আইনী জটিলতা এবং পরকালীন সকল দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/GeneralInfo.tsx

"use client";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  bloodGroups,
  heights,
  maritalStatuses,
  nationalities,
  skinTones,
} from "@/lib/consts";
import { BiodataFormDataProps, GeneralInfoFormData } from "@/lib/types";
import { cn } from "@/lib/utils";
import { generalInfoFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { useState } from "react";
import { useForm } from "react-hook-form";

export default function GeneralInfo({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<GeneralInfoFormData>({
    resolver: zodResolver(generalInfoFormData),
    defaultValues: {
      dateOfBirth: biodataFormData?.generalInfoFormData?.dateOfBirth || "",
      maritalStatus: biodataFormData?.generalInfoFormData?.maritalStatus || "",
      skinTone: biodataFormData?.generalInfoFormData?.skinTone || "",
      height: biodataFormData?.generalInfoFormData?.height || "",
      weight: biodataFormData?.generalInfoFormData?.weight || "",
      bloodGroup: biodataFormData?.generalInfoFormData?.bloodGroup || "",
      nationality: biodataFormData?.generalInfoFormData?.nationality || "",
    },
  });

  // useEffect(() => {
  //   const { unsubscribe } = form.watch(async (values) => {
  //     if (submittedOnce) {
  //       await form.trigger();
  //     }
  //     if (Object.values(values).some((value) => value !== undefined)) {
  //       dispatch(
  //         setBiodataFormData({
  //           key: "generalInfoFormData",
  //           data: values,
  //         })
  //       );
  //     }
  //   });
  //   return unsubscribe;
  // }, [submittedOnce, form, dispatch]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "generalInfoFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  const maritalStatusOptions = maritalStatuses.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">সাধারণ তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="dateOfBirth"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জন্ম তারিখ:</div>
                    <div className="text-xs">(আসল, সার্টিফিকেট অনুযায়ী নয়)</div>
                  </FormLabel>
                  <FormControl>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          className={cn(
                            "p-6 w-full bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {field.value ? (
                            format(field.value, "PPP")
                          ) : (
                            <span>জন্ম তারিখ</span>
                          )}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          className="bg-[#005889]"
                          classNames={{
                            day_selected: "bg-[#E25A6F]",
                            day_today: "bg-white text-black",
                          }}
                          mode="single"
                          selected={
                            field.value ? new Date(field.value) : undefined
                          }
                          onSelect={(date) =>
                            field.onChange(date?.toISOString())
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="বৈবাহিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {maritalStatusOptions.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="গাত্রবর্ণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {skinTones.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="weight"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ওজন:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ওজন"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="bloodGroup"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    রক্তের গ্রুপ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="রক্তের গ্রুপ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {bloodGroups.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="nationality"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জাতীয়তা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="জাতীয়তা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {nationalities.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/MarriageInfo.tsx
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import { afterMarriageJobs, afterMarriageStudies } from "@/lib/consts";
import { BiodataFormDataProps, MarriageInfoFormData } from "@/lib/types";
import { marriageInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function MarriageInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<MarriageInfoFormData>({
    resolver: zodResolver(marriageInfoFormData),
    defaultValues: {
      guardianApproval:
        biodataFormData?.marriageInfoFormData?.guardianApproval || "",
      continueStudy: biodataFormData?.marriageInfoFormData?.continueStudy || "",
      careerPlan: biodataFormData?.marriageInfoFormData?.careerPlan || "",
      residence: biodataFormData?.marriageInfoFormData?.residence || "",
      arrangeHijab: biodataFormData?.marriageInfoFormData?.arrangeHijab || "",
      dowryExpectation:
        biodataFormData?.marriageInfoFormData?.dowryExpectation || "",
      allowShowingPhotoOnline:
        biodataFormData?.marriageInfoFormData?.allowShowingPhotoOnline || "",
      additionalMarriageInfo:
        biodataFormData?.marriageInfoFormData?.additionalMarriageInfo || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        marriageInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const afterMarriageStudyOptions = afterMarriageStudies.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  const afterMarriageJobOptions = afterMarriageJobs.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">বিয়ে সংক্রান্ত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="guardianApproval"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
                    <div className="text-xs">
                      (যদি অভিভাবক রাজি নাও থাকে তাহলে এর কারণ লিখুন এবং
                      সেক্ষেত্রে আপনি কেন বিবাহে আগাচ্ছেন সেটা বিস্তারিত লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="continueStudy"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?"
                      : "বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageStudyOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="careerPlan"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?"
                      : "আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageJobOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="residence"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?"
                      : "যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="arrangeHijab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে পারবেন?"
                      : "বাড়িতে বা বাহিরে পর্দা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="dowryExpectation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক / উপহার / অর্থ আশা করবেন কিনা?"
                      : "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রপক্ষকে যৌতুক / উপহার / অর্থ দিতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="allowShowingPhotoOnline"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "পাত্রীপক্ষ"
                      : "পাত্রপক্ষ"}{" "}
                    অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="additionalMarriageInfo"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>
                      বিয়ে সংক্রান্ত আরো কিছু জানাতে চাইলে এখানে লিখুন: অন্যথায়
                      খালি রাখুন।
                    </div>
                    <div className="text-xs">
                      (যেমন: পাত্র-পাত্রী সাক্ষাতের ব্যাপারে, অভিভাবকদের মতামত
                      নিয়ে, কেমন বিয়ে চান, বিয়ের পর কোন কোন বিষয় ছাড় দিতে রাজি
                      নন ইত্যাদি কিছু জানানোর থাকলে লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\OccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/OccupationInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { occupationsList } from "@/lib/consts";
import { BiodataFormDataProps, OccupationInfoFormData } from "@/lib/types";
import { occupationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function OccupationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<OccupationInfoFormData>({
    resolver: zodResolver(occupationInfoFormData),
    defaultValues: {
      occupations: biodataFormData?.occupationInfoFormData?.occupations || [],
      detail: biodataFormData?.occupationInfoFormData?.detail || "",
      monthlyIncome:
        biodataFormData?.occupationInfoFormData?.monthlyIncome || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        occupationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পেশা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="occupations"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পেশা নিয়ে বিস্তারিত লিখুন:</div>
                    <div className="text-xs">
                      (অর্থাৎ আপনার কর্মস্থল কোথায়, কি ধরণের কাজে দায়িত্বরত আছেন
                      বা পদবি কি, এগুলো নিয়ে বিস্তারিত লিখুন। পেশা না থাকলে খালি
                      রাখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="monthlyIncome"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাসিক আয়:</div>
                    <div className="text-xs">(পেশা না থাকলে খালি রাখুন।)</div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাসিক আয়"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PersonalInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { characteristics, specialCatagories } from "@/lib/consts";
import { BiodataFormDataProps, PersonalInfoFormData } from "@/lib/types";
import { personalInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function PersonalInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PersonalInfoFormData>({
    resolver: zodResolver(personalInfoFormData),
    defaultValues: {
      beardStatus: biodataFormData?.personalInfoFormData?.beardStatus || "",
      preferredOutfit:
        biodataFormData?.personalInfoFormData?.preferredOutfit || "",
      entertainmentPreferences:
        biodataFormData?.personalInfoFormData?.entertainmentPreferences || "",
      healthConditions:
        biodataFormData?.personalInfoFormData?.healthConditions || "",
      personalTraits:
        biodataFormData?.personalInfoFormData?.personalTraits || [],
      genderEqualityView:
        biodataFormData?.personalInfoFormData?.genderEqualityView || "",
      lgbtqOpinion: biodataFormData?.personalInfoFormData?.lgbtqOpinion || "",
      specialConditions:
        biodataFormData?.personalInfoFormData?.specialConditions || [],
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        personalInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const specialCatagoryOptions = specialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ব্যক্তিগত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="beardStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "আপনি দাড়ি রেখেছেন কি?"
                      : "আপনার কি দাড়ি পছন্দ?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="preferredOutfit"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পড়তে পছন্দ করেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="entertainmentPreferences"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="healthConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মানসিক বা শারীরিক কোনো রোগ আছে কি? থাকলে বিস্তারিত লিখুন।
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="personalTraits"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নিজের কিছু গুণাবলী চিহ্নিত করুন:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {characteristics.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="genderEqualityView"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lgbtqOpinion"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {specialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PrimaryInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { biodataTypes } from "@/lib/consts";
import { BiodataFormDataProps, PrimaryInfoFormData } from "@/lib/types";
import { primaryInfoFormData } from "@/lib/validations";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function PrimaryInfo({
  biodataFormData,
  setBiodataFormData, // Added missing prop
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PrimaryInfoFormData>({
    resolver: zodResolver(primaryInfoFormData),
    defaultValues: {
      biodataType: biodataFormData?.primaryInfoFormData?.biodataType || "",
      biodataFor: biodataFormData?.primaryInfoFormData?.biodataFor || "",
      fullName: biodataFormData?.primaryInfoFormData?.fullName || "",
      fatherName: biodataFormData?.primaryInfoFormData?.fatherName || "",
      motherName: biodataFormData?.primaryInfoFormData?.motherName || "",
      email: biodataFormData?.primaryInfoFormData?.email || "",
      phoneNumber: biodataFormData?.primaryInfoFormData?.phoneNumber || "",
      guardianContacts:
        Array.isArray(biodataFormData?.primaryInfoFormData?.guardianContacts) &&
        biodataFormData.primaryInfoFormData.guardianContacts.length >= 2
          ? // Create a deep copy to avoid immutability issues
            biodataFormData.primaryInfoFormData.guardianContacts.map(
              (contact) => ({
                relation: contact.relation || "",
                fullName: contact.fullName || "",
                phoneNumber: contact.phoneNumber || "",
              })
            )
          : [
              { relation: "", fullName: "", phoneNumber: "" },
              { relation: "", fullName: "", phoneNumber: "" },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "guardianContacts",
  });

  useEffect(() => {
    const subscription = form.watch((values) => {
      if (submittedOnce) {
        form.trigger(); // Trigger validation on change after submission attempt
      }
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: values as PrimaryInfoFormData,
      });
    });
    return () => subscription.unsubscribe();
  }, [form, submittedOnce, setBiodataFormData, biodataFormData]);

  const handleAppend = () => {
    append({ relation: "", fullName: "", phoneNumber: "" });
  };

  const handleRemove = (index: number) => {
    if (fields.length > 2) {
      remove(index);
    } else {
      form.setError(`guardianContacts`, {
        type: "manual",
        message: "কমপক্ষে ২ জন অভিভাবকের তথ্য প্রয়োজন।",
      });
    }
  };

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: formValues,
      });
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রাথমিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="biodataType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বায়োডাটার ধরন:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="বায়োডাটার ধরন" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {biodataTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="biodataFor"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>বায়োডাটা কার জন্য তৈরী করছেন?</div>
                    <div className="text-xs">
                      (যেমনঃ নিজের জন্য/বোনের জন্য/বন্ধুর জন্য/ভাগ্নির জন্য
                      ইত্যাদি)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fullName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
                    <div className="text-xs">
                      (NID কার্ডে যে নাম আছে। নাম বায়োডাটায় প্রকাশ করা হবে না।
                      শুধুমাত্র ভেরিফিকেশন ও অপরপক্ষকে যোগাযোগ তথ্য প্রদানের
                      ক্ষেত্রে প্রয়োজন হবে।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="সম্পূর্ণ নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>ইমেইল আইডি:</div>
                    <div className="text-xs">
                      (পাত্র/পাত্রীর সাথে আমাদের যোগাযোগের জন্য প্রয়োজন হবে।
                      অপরপক্ষ যোগাযোগ তথ্য নিতে চাইলে যুক্তিসঙ্গত কারণ বা
                      প্রয়োজন ছাড়া পাঠানো হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ইমেইল আইডি"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phoneNumber"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর মোবাইল নম্বর:</div>
                    <div className="text-xs">
                      (মোবাইল নম্বর শুধুমাত্র ভেরিফিকেশনের জন্য আমাদের কাছে
                      থাকবে। কাউকে প্রদান করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="tel"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মোবাইল নম্বর"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="flex flex-col space-y-2">
            <FormLabel className="flex items-center justify-between space-x-8">
              <div className="text-md space-y-1 leading-4.5">
                <div>পাত্র/পাত্রীর অভিভাবকের মোবাইল নম্বর:</div>
                <div className="text-xs">
                  <div>কমপক্ষে ২ টি সচল নম্বর প্রদান করতে হবে।</div>
                </div>
              </div>
              <Button
                type="button"
                className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
                onClick={handleAppend}
              >
                <Plus size={20} /> <span>নতুন নম্বর যোগ করুন</span>
              </Button>
            </FormLabel>

            <div className="space-y-2">
              {fields.map((field, index) => (
                <div className="flex space-x-2 items-center" key={field.id}>
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.relation`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="সম্পর্ক (যেমন: বাবা, মা)"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.fullName`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের নাম"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.phoneNumber`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            type="tel"
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের মোবাইল নম্বর"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {fields.length > 2 && (
                    <Button
                      type="button"
                      className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                      onClick={() => handleRemove(index)}
                    >
                      <Minus size={20} />
                    </Button>
                  )}
                </div>
              ))}
            </div>
            {form.formState.errors.guardianContacts && (
              <p className="text-red-500 text-sm">
                {form.formState.errors.guardianContacts.message}
              </p>
            )}
          </div>
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
          disabled={!currentStep.prev}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\ProfilePic.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ProfilePic.tsx

"use client";

import female1 from "@/assets/images/female-1.svg";
import female2 from "@/assets/images/female-2.svg";
import female3 from "@/assets/images/female-3.svg";
import female4 from "@/assets/images/female-4.svg";
import female5 from "@/assets/images/female-5.svg";
import female6 from "@/assets/images/female-6.svg";
import male1 from "@/assets/images/male-1.svg";
import male2 from "@/assets/images/male-2.svg";
import male3 from "@/assets/images/male-3.svg";
import male4 from "@/assets/images/male-4.svg";
import male5 from "@/assets/images/male-5.svg";
import male6 from "@/assets/images/male-6.svg";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { BiodataFormDataProps, ProfilePicFormData } from "@/lib/types";
import { profilePicFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { CheckCircle } from "lucide-react";
import Image from "next/image";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ProfilePic({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ProfilePicFormData>({
    resolver: zodResolver(profilePicFormData),
    defaultValues: {
      photoId: biodataFormData?.profilePicFormData?.photoId || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        profilePicFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const images =
    biodataFormData?.primaryInfoFormData?.biodataType === "1"
      ? [male1, male2, male3, male4, male5, male6]
      : [female1, female2, female3, female4, female5, female6];

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রোফাইল পিকচার</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="photoId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  আপনার সাথে মানানসই বা সামঞ্জস্যপূর্ণ একটি প্রোফাইল পিকচার
                  বাছাই করুন:
                </FormLabel>
                <FormControl>
                  <div className="flex flex-wrap">
                    {images.map((image, index) => (
                      <div
                        key={index}
                        className="w-1/3 mb-4 flex items-center justify-center relative"
                      >
                        <div
                          className={`border p-12 rounded-3xl cursor-pointer transition-all relative ${
                            form.getValues().photoId === image.src
                              ? "border-[#E25A6F] ring-2 ring-[#E25A6F]"
                              : "border-gray-300"
                          } `}
                          onClick={() => {
                            field.onChange(image.src);
                          }}
                        >
                          <Image
                            src={image}
                            alt={`Profile${index + 1}`}
                            width={120}
                            height={40}
                            priority
                          />
                          {form.getValues().photoId === image.src && (
                            <CheckCircle className="absolute top-4 right-4 text-[#E25A6F]" />
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ReligiousInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { madhhabs, religiousIdeologies } from "@/lib/consts";
import { BiodataFormDataProps, ReligiousInfoFormData } from "@/lib/types";
import { religiousInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ReligiousInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ReligiousInfoFormData>({
    resolver: zodResolver(religiousInfoFormData),
    defaultValues: {
      type: biodataFormData?.religiousInfoFormData?.type || "",
      ideology: biodataFormData?.religiousInfoFormData?.ideology || "",
      madhab: biodataFormData?.religiousInfoFormData?.madhab || "",
      praysFiveTimes:
        biodataFormData?.religiousInfoFormData?.praysFiveTimes || "",
      hasQazaPrayers:
        biodataFormData?.religiousInfoFormData?.hasQazaPrayers || "",
      canReciteQuranProperly:
        biodataFormData?.religiousInfoFormData?.canReciteQuranProperly || "",
      avoidsHaramIncome:
        biodataFormData?.religiousInfoFormData?.avoidsHaramIncome || "",
      modestDressing:
        biodataFormData?.religiousInfoFormData?.modestDressing || "",
      followsMahramRules:
        biodataFormData?.religiousInfoFormData?.followsMahramRules || "",
      beliefAboutPirMurshidAndMazar:
        biodataFormData?.religiousInfoFormData?.beliefAboutPirMurshidAndMazar ||
        "",
      practicingSince:
        biodataFormData?.religiousInfoFormData?.practicingSince || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        religiousInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ধর্মীয় লাইফস্টাইল</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormControl>
                    <RadioGroup
                      className="flex"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="1" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              সেরকমভাবে মেনে চলা হয় না
                            </div>
                            <div>(জেনারেল/নন-প্রাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>
                            ১. অনিয়মিতভাবে ৫ ওয়াক্ত বা এর কম সালাত আদায় করা হয়।
                          </div>
                          <div>
                            ২. সকল ক্ষেত্রে হালাল-হারাম বাছাই করা হয় না।
                          </div>
                          <div>৩. মাহরাম-নন মাহরাম মেইনটেইন করা হয় না।</div>
                          <div>
                            ৪. হারাম উপার্জন, ব্যাংকিং সুদ, ফ্রি-মিক্সিং,
                            গান-বাজনা থেকে বিরত থাকা হয় না।
                          </div>
                          <div>
                            ৫. পরিপূর্ন ভাবে ইসলামের বিধিবিধান পালনে তেমন চেষ্টা
                            বা আগ্রহ নেই।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="2" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black">
                              পরিপূর্ণভাবে মেনে চলা হয় না কিন্তু প্রবল ইচ্ছা আছে
                              এবং চেষ্টা করছি
                            </div>
                            <div>(প্রাক্টিসিংয়ের চেষ্টায় আছি)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>
                            ২. হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত থাকছেন।
                          </div>
                          <div>
                            ৩. কিন্তু গান-বাজনা থেকে এখনো দূরে থাকা হয় না।
                          </div>
                          <div>
                            ৪. সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট বা পর্দা এখনো
                            মেনে চলতে পারছেন না।
                          </div>
                          <div>
                            ৫. এর জন্য প্রবল অনুশোচনা কাজ করে এবং পরিপূর্ন ভাবে
                            ইসলামের বিধিবিধান পালনের চেষ্টা করা হয়।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="3" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              জি পরিপূর্ণভাবে মেনে চলি এবং সর্বদা চেষ্টায় থাকি
                            </div>
                            <div>(পূর্ণ ধার্মিক/ প্র্যাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. বিশুদ্ধ ঈমান-আকিদা পোষণ করছেন।</div>
                          <div>২. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>৩. পরিপূর্ণ হালাল উপার্জন করছেন ।</div>
                          <div>
                            ৪. ফরজ, ওয়াজিব ইবাদতের পাশাপাশি সুন্নাত, নফল আমল
                            করার চেষ্টা করেন।
                          </div>
                          <div>৫. গান-বাজনা, নাটক-সিনেমা থেকে দূরে থাকছেন।</div>
                          <div>
                            ৬. পুরুষেরা সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট,
                            ইসলামিক পোশাক মেনে চলেন, নারীরা নিকাব সহ পর্দা
                            করছেন।
                          </div>
                          <div>
                            ৭. বাহিরে পর্দা মেনে চলা অর্থাৎ বেগানা নারী-পুরুষের
                            ক্ষেত্রে চক্ষু অবনত রাখছেন।
                          </div>
                          <div>
                            ৮. মাহরাম-নন মাহরাম মেইনটেইন করেন এবং ফ্রী মিক্সিং
                            এড়িয়ে চলেন।
                          </div>
                          <div>
                            ৯. সকল প্রকার হারাম ও কবীরা গুনাহ থেকে বেঁচে থাকার
                            সর্বাত্মক প্রচেষ্টায় থাকেন।
                          </div>
                          <div>
                            ১০. ইসলাম বিরোধী সকল কাজকে অপছন্দ করেন এবং জীবনটাকে
                            পরিপূর্ণভাবে কোরআন-সুন্নাহ মোতাবেক সাজাতে থাকেন।
                          </div>
                        </Label>
                      </div>
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="ideology"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় কোন মতাদর্শ মেনে চলেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {religiousIdeologies.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="madhab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কোন মাজহাব / মানহাজ অনুসরণ করেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {madhhabs.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="praysFiveTimes"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="hasQazaPrayers"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      আপনার কি নামাজ কাযা হয়?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="canReciteQuranProperly"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="avoidsHaramIncome"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <FormField
              control={form.control}
              name="modestDressing"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                        ? "টাখনুর উপরে কাপড় পরেন কিনা?"
                        : "আপনি কি নিকাব সহ পর্দা করেন?"}
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <>
              <FormField
                control={form.control}
                name="followsMahramRules"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="beliefAboutPirMurshidAndMazar"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="practicingSince"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু
                        করেছেন?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/SpousePreferenceInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  familyBackgrounds,
  heights,
  maritalStatuses,
  occupationsList,
  religiousEducation,
  religiousLifestyle,
  secondMarriageOptions,
  skinTones,
  spouseLocationOptions,
  spouseSpecialCatagories,
} from "@/lib/consts";
import {
  BiodataFormDataProps,
  SpousePreferenceInfoFormData,
} from "@/lib/types";
import { spousePreferenceInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function SpousePreferenceInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<SpousePreferenceInfoFormData>({
    resolver: zodResolver(spousePreferenceInfoFormData),
    defaultValues: {
      age: biodataFormData?.spousePreferenceInfoFormData?.age || "",
      skinTone: biodataFormData?.spousePreferenceInfoFormData?.skinTone || [],
      height: biodataFormData?.spousePreferenceInfoFormData?.height || "",
      educationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.educationalQualification || "",
      religiousEducationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.religiousEducationalQualification || [],
      address: biodataFormData?.spousePreferenceInfoFormData?.address || "",
      maritalStatus:
        biodataFormData?.spousePreferenceInfoFormData?.maritalStatus || [],
      specialCategory:
        biodataFormData?.spousePreferenceInfoFormData?.specialCategory || [],
      religiousType:
        biodataFormData?.spousePreferenceInfoFormData?.religiousType || [],
      occupation:
        biodataFormData?.spousePreferenceInfoFormData?.occupation || [],
      familyBackground:
        biodataFormData?.spousePreferenceInfoFormData?.familyBackground || [],
      secondMarriage:
        biodataFormData?.spousePreferenceInfoFormData?.secondMarriage || "",
      location: biodataFormData?.spousePreferenceInfoFormData?.location || "",
      qualities: biodataFormData?.spousePreferenceInfoFormData?.qualities || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        spousePreferenceInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const spouseSpecialCatagoryOptions = spouseSpecialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">
        যেমন জীবনসঙ্গী আশা করেন
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="age"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত বয়স:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {skinTones.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="কাঙ্খিত উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="educationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousEducationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="address"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত ঠিকানা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {maritalStatuses.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialCategory"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {spouseSpecialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় লাইফস্টাইল:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousLifestyle.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="occupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {familyBackgrounds.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          {biodataFormData?.primaryInfoFormData?.biodataType === "GROOM" && (
            <FormField
              control={form.control}
              name="secondMarriage"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী
                      আছেন?
                    </FormLabel>
                    <FormControl>
                      <RadioGroup
                        className="w-full flex flex-wrap gap-0"
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        {secondMarriageOptions.map((x) => (
                          <div
                            key={x.id}
                            className="w-1/4 flex items-center space-x-2 mb-2"
                          >
                            <RadioGroupItem value={x.id} id={x.id} />
                            <Label htmlFor={x.id}>{x.title}</Label>
                          </div>
                        ))}
                      </RadioGroup>
                    </FormControl>
                  </div>

                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {spouseLocationOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="qualities"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:</div>
                    <div className="text-xs">
                      (অর্থাৎ কাঙ্খিত জীবনসঙ্গীর স্বভাব, দ্বীনদারিতা, চারিত্রীক
                      গুণাবলী কেমন আশা করেন। বিশেষ কোনো কার্যক্রম বা চাওয়া থাকলে
                      জানাতে পারেন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\page.tsx
// --------------------
// File: src/app/(main)/biodata-editor/page.tsx
import { Metadata } from "next";
import BiodataEditor from "./BiodataEditor";

interface BiodataEditorPageProps {
  searchParams: Promise<{ biodataId?: string }>;
}

export const metadata: Metadata = {
  title: "Design your biodata",
};

export default async function BiodataEditorPage({
  searchParams,
}: BiodataEditorPageProps) {
  const { biodataId } = await searchParams;

  //TO:DO get userId from token

  const biodataToEdit = biodataId
    ? null // get from db
    : null;

  return (
    <main className="flex-grow">
      <div className="text-[#1f4f69] flex flex-col items-center justify-center mt-4 mb-12">
        <BiodataEditor biodataToEdit={biodataToEdit} />
      </div>
    </main>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\steps.ts
// --------------------
// File: src/app/(main)/biodata-editor/steps.ts
// import { BiodataFormDataProps } from "@/lib/types";
// import AddressInfo from "./biodataFormComponents/AddressInfo";
// import EducationInfo from "./biodataFormComponents/EducationInfo";
// import FamilyInfo from "./biodataFormComponents/FamilyInfo";
// import FinalWords from "./biodataFormComponents/FinalWords";
// import FirstWords from "./biodataFormComponents/FirstWords";
// import GeneralInfo from "./biodataFormComponents/GeneralInfo";
// import MarriageInfo from "./biodataFormComponents/MarriageInfo";
// import OccupationInfo from "./biodataFormComponents/OccupationInfo";
// import PersonalInfo from "./biodataFormComponents/PersonalInfo";
// import PrimaryInfo from "./biodataFormComponents/PrimaryInfo";
// import ProfilePic from "./biodataFormComponents/ProfilePic";
// import ReligiousInfo from "./biodataFormComponents/ReligiousInfo";
// import SpousePreferenceInfo from "./biodataFormComponents/SpousePreferenceInfo";

// export interface BiodataFormStep {
//   title: string;
//   component: React.ComponentType<BiodataFormDataProps>;
//   key: string;
//   disabled: boolean;
//   prev?: string;
//   next?: string;
// }

// export const steps: BiodataFormStep[] = [
//   {
//     title: "কিছু কথা",
//     component: FirstWords,
//     key: "first-words",
//     disabled: true,
//     next: "primary-info",
//   },
//   {
//     title: "প্রাথমিক তথ্য",
//     component: PrimaryInfo,
//     key: "primary-info",
//     disabled: true,
//     prev: "first-words",
//     next: "general-info",
//   },
//   {
//     title: "সাধারণ তথ্য",
//     component: GeneralInfo,
//     key: "general-info",
//     disabled: true,
//     prev: "primary-info",
//     next: "address-info",
//   },
//   {
//     title: "ঠিকানা",
//     component: AddressInfo,
//     key: "address-info",
//     disabled: true,
//     prev: "general-info",
//     next: "education-info",
//   },
//   {
//     title: "শিক্ষাগত যোগ্যতা",
//     component: EducationInfo,
//     key: "education-info",
//     disabled: true,
//     prev: "address-info",
//     next: "occupation-info",
//   },
//   {
//     title: "পেশা",
//     component: OccupationInfo,
//     key: "occupation-info",
//     disabled: true,
//     prev: "education-info",
//     next: "family-info",
//   },
//   {
//     title: "পারিবারিক তথ্য",
//     component: FamilyInfo,
//     key: "family-info",
//     disabled: true,
//     prev: "occupation-info",
//     next: "religious-info",
//   },
//   {
//     title: "ধর্মীয় লাইফস্টাইল",
//     component: ReligiousInfo,
//     key: "religious-info",
//     disabled: true,
//     prev: "family-info",
//     next: "personal-info",
//   },
//   {
//     title: "ব্যক্তিগত তথ্য",
//     component: PersonalInfo,
//     key: "personal-info",
//     disabled: true,
//     prev: "religious-info",
//     next: "marital-info",
//   },
//   {
//     title: "বিয়ে সংক্রান্ত তথ্য",
//     component: MarriageInfo,
//     key: "marital-info",
//     disabled: true,
//     prev: "personal-info",
//     next: "spouse-preference-info",
//   },
//   {
//     title: "যেমন জীবনসঙ্গী আশা করেন",
//     component: SpousePreferenceInfo,
//     key: "spouse-preference-info",
//     disabled: true,
//     prev: "marital-info",
//     next: "profile-pic",
//   },
//   {
//     title: "প্রোফাইল পিকচার",
//     component: ProfilePic,
//     key: "profile-pic",
//     disabled: true,
//     prev: "spouse-preference-info",
//     next: "final-words",
//   },
//   {
//     title: "শেষ কথা",
//     component: FinalWords,
//     key: "final-words",
//     disabled: true,
//     prev: "profile-pic",
//   },
// ];
import AddressInfo from "./biodataFormComponents/AddressInfo";
import EducationInfo from "./biodataFormComponents/EducationInfo";
import FamilyInfo from "./biodataFormComponents/FamilyInfo";
import FinalWords from "./biodataFormComponents/FinalWords";
import FirstWords from "./biodataFormComponents/FirstWords";
import GeneralInfo from "./biodataFormComponents/GeneralInfo";
import MarriageInfo from "./biodataFormComponents/MarriageInfo";
import OccupationInfo from "./biodataFormComponents/OccupationInfo";
import PersonalInfo from "./biodataFormComponents/PersonalInfo";
import PrimaryInfo from "./biodataFormComponents/PrimaryInfo";
import ProfilePic from "./biodataFormComponents/ProfilePic";
import ReligiousInfo from "./biodataFormComponents/ReligiousInfo";
import SpousePreferenceInfo from "./biodataFormComponents/SpousePreferenceInfo";

export interface BiodataFormStep {
  key: string;
  title: string;
  component: React.ComponentType<any>;
  prev: string;
  next: string;
}

export const steps: BiodataFormStep[] = [
  {
    key: "first-words",
    title: "প্রাথমিক শপথ",
    component: FirstWords,
    prev: "",
    next: "primary-info",
  },
  {
    key: "primary-info",
    title: "প্রাথমিক তথ্য",
    component: PrimaryInfo,
    prev: "first-words",
    next: "general-info",
  },
  {
    key: "general-info",
    title: "সাধারণ তথ্য",
    component: GeneralInfo,
    prev: "primary-info",
    next: "address-info",
  },
  {
    key: "address-info",
    title: "ঠিকানা",
    component: AddressInfo,
    prev: "general-info",
    next: "education-info",
  },
  {
    key: "education-info",
    title: "শিক্ষাগত তথ্য",
    component: EducationInfo,
    prev: "address-info",
    next: "occupation-info",
  },
  {
    key: "occupation-info",
    title: "পেশাগত তথ্য",
    component: OccupationInfo,
    prev: "education-info",
    next: "family-info",
  },
  {
    key: "family-info",
    title: "পারিবারিক তথ্য",
    component: FamilyInfo,
    prev: "occupation-info",
    next: "religious-info",
  },
  {
    key: "religious-info",
    title: "ধর্মীয় তথ্য",
    component: ReligiousInfo,
    prev: "family-info",
    next: "personal-info",
  },
  {
    key: "personal-info",
    title: "ব্যক্তিগত তথ্য",
    component: PersonalInfo,
    prev: "religious-info",
    next: "marriage-info",
  },
  {
    key: "marriage-info",
    title: "বিবাহ সংক্রান্ত তথ্য",
    component: MarriageInfo,
    prev: "personal-info",
    next: "spouse-preference-info",
  },
  {
    key: "spouse-preference-info",
    title: "জীবনসঙ্গীর পছন্দ",
    component: SpousePreferenceInfo,
    prev: "marriage-info",
    next: "profile-pic",
  },
  {
    key: "profile-pic",
    title: "প্রোফাইল ছবি",
    component: ProfilePic,
    prev: "spouse-preference-info",
    next: "final-words",
  },
  {
    key: "final-words",
    title: "শেষ শপথ",
    component: FinalWords,
    prev: "profile-pic",
    next: "",
  },
];


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\layout.tsx
// --------------------
// File: src/app/(main)/biodatas/layout.tsx
import { ReactNode } from "react";

export default function MainLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return <main className="flex-grow">{children}</main>;
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\biodataFilterOptions.ts
// --------------------
export const searchingFilters = {
  biodataType: [
    { id: "GROOM", title: "পাত্রের বায়োডাটা" },
    { id: "BRIDE", title: "পাত্রীর বায়োডাটা" },
  ],
  maritalStatus: [
    { id: "unmarried", title: "অবিবাহিত", for: "both" },
    { id: "married", title: "বিবাহিত", for: "both" },
    { id: "divorced", title: "ডিভোর্সড", for: "both" },
    { id: "widowed_male", title: "বিপত্নীক", for: "BRIDE" },
    { id: "widowed_female", title: "বিধবা", for: "GROOM" },
  ],
  skinTones: [
    { id: "dark", title: "গাঢ় ত্বক", for: "both" },
    { id: "medium", title: "শ্যামলা", for: "both" },
    { id: "light_medium", title: "উজ্জ্বল শ্যামলা", for: "both" },
    { id: "fair", title: "ফর্সা", for: "both" },
    { id: "very_fair", title: "উজ্জ্বল ফর্সা", for: "both" },
  ],
  permanentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  currentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  religiousLifestyle: [
    { id: "devout", title: "পূর্ণ ধার্মিক/প্র্যাক্টিসিং", for: "both" },
    { id: "practicing", title: "প্রাক্টিসিংয়ের চেষ্টারত", for: "both" },
    { id: "general", title: "জেনারেল/নন-প্রাক্টিসিং", for: "both" },
  ],
  occupation: [
    { id: "business", title: "ব্যবসা", for: "both" },
    { id: "govt_job", title: "সরকারি চাকরিজীবী", for: "both" },
    { id: "private_job", title: "বেসরকারি চাকরিজীবী", for: "both" },
    { id: "home_tutor", title: "হোম টিউটর", for: "both" },
    { id: "teacher", title: "শিক্ষক/শিক্ষিকা", for: "both" },
    { id: "lawyer", title: "আইনজীবী", for: "both" },
    { id: "engineer", title: "ইঞ্জিনিয়ার", for: "both" },
    { id: "doctor", title: "ডাক্তার", for: "both" },
    { id: "vet_doctor", title: "ভেটেরিনারি ডাক্তার", for: "both" },
    { id: "nurse", title: "নার্স", for: "both" },
    { id: "pharmacist", title: "ফার্মাসিস্ট", for: "both" },
    { id: "paramedic", title: "প্যারামেডিক", for: "both" },
    { id: "therapist", title: "থেরাপিস্ট", for: "both" },
    { id: "medical_technologist", title: "মেডিকেল টেকনোলজিস্ট", for: "both" },
    {
      id: "medical_assistant",
      title: "মেডিক্যাল অ্যাসিস্ট্যান্ট",
      for: "both",
    },
    { id: "military_job", title: "সামরিক জব", for: "both" },
    { id: "paramilitary_job", title: "আধা সামরিক জব", for: "both" },
    { id: "imam", title: "ইমাম", for: "both" },
    { id: "muezzin", title: "মুয়াজ্জিন", for: "both" },
    { id: "pilot", title: "পাইলট", for: "both" },
    { id: "freelancer", title: "ফ্রিল্যান্সার", for: "both" },
    { id: "student", title: "শিক্ষার্থী", for: "both" },
    { id: "mbbs_bds_student", title: "MBBS/BDS শিক্ষার্থী", for: "both" },
    { id: "expatriate_job", title: "প্রবাসী-প্রবাস জব", for: "both" },
    { id: "manual_labor", title: "মিস্ত্রী/কায়িক শ্রম", for: "both" },
    { id: "agriculture", title: "কৃষিকাজ", for: "both" },
    { id: "jobless", title: "চাকরির সন্ধানরত/বেকার", for: "both" },
    { id: "family_property", title: "পারিবারিক সম্পত্তি", for: "both" },
    { id: "no_occupation", title: "পেশা নেই/কর্মহীন", for: "both" },
    { id: "other_occupation", title: "অন্যান্য", for: "both" },
  ],
  education: [
    { id: "qawmi", title: "কওমি", for: "both" },
    { id: "alia", title: "আলিয়া", for: "both" },
    { id: "diploma", title: "ডিপ্লোমা", for: "both" },
    { id: "bachelor", title: "স্নাতক", for: "both" },
    { id: "masters", title: "স্নাতকোত্তর", for: "both" },
    { id: "doctoral", title: "ডক্টরাল", for: "both" },
    { id: "bcs", title: "বি.সি.এস (BCS)", for: "both" },
    { id: "medical", title: "মেডিকেল", for: "both" },
    { id: "defense", title: "ডিফেন্স", for: "both" },
    { id: "police_law", title: "পুলিশ/আইন-শৃঙ্খলা বাহিনী", for: "both" },
    { id: "aviation", title: "এভিয়েশন", for: "both" },
  ],
  religiousEducation: [
    { id: "hafiz_male", title: "হাফেজ", for: "BRIDE" },
    { id: "hafiza_female", title: "হাফেজা", for: "GROOM" },
    { id: "maulana_male", title: "মাওলানা", for: "BRIDE" },
    { id: "alema_female", title: "আলেমা", for: "GROOM" },
    { id: "mufti_male", title: "মুফতি", for: "BRIDE" },
    { id: "muftia_female", title: "মুফতিয়া", for: "GROOM" },
    { id: "muhaddis_male", title: "মুহাদ্দিস", for: "BRIDE" },
    { id: "muhaddisa_female", title: "মুহাদ্দিসা", for: "GROOM" },
    { id: "mufassir", title: "মুফাসসির", for: "both" },
    { id: "faqih", title: "ফকিহ", for: "both" },
    { id: "daee_male", title: "দা'য়ী", for: "BRIDE" },
    { id: "daiya_female", title: "দাঈয়া", for: "GROOM" },
    { id: "adib", title: "আদিব", for: "both" },
    { id: "qari_male", title: "ক্বারী", for: "BRIDE" },
    { id: "qaria_female", title: "ক্বারিয়া", for: "GROOM" },
    { id: "talib_quran", title: "তালিবে কুরআন", for: "both" },
    { id: "tajwid_student", title: "তাজবীদ শিক্ষার্থী", for: "both" },
    { id: "muallim_talim", title: "মুয়াল্লিমুন ফি তালিম", for: "both" },
    { id: "islamic_scholar", title: "ইসলামিক স্কলার", for: "both" },
  ],
  familyBackgrounds: [
    { id: "upper_class", title: "উচ্চবিত্ত", for: "both" },
    { id: "upper_middle", title: "উচ্চ মধ্যবিত্ত", for: "both" },
    { id: "middle", title: "মধ্যবিত্ত", for: "both" },
    { id: "lower_middle", title: "নিম্ন মধ্যবিত্ত", for: "both" },
    { id: "lower_class", title: "নিম্নবিত্ত", for: "both" },
  ],
  madhhab: [
    { id: "hanafi", title: "হানাফি", for: "both" },
    { id: "salafi", title: "সালাফি/আহলে হাদিস", for: "both" },
    { id: "shafi", title: "শাফেঈ", for: "both" },
    { id: "maliki", title: "মালিকী", for: "both" },
    { id: "hambali", title: "হাম্বলি", for: "both" },
    { id: "other_madhhab", title: "অন্যান্য", for: "both" },
    { id: "unknown_madhhab", title: "জানা নেই", for: "both" },
  ],
  bloodGroup: [
    { id: "A+", title: "A+", for: "both" },
    { id: "B+", title: "B+", for: "both" },
    { id: "A-", title: "A-", for: "both" },
    { id: "B-", title: "B-", for: "both" },
    { id: "AB+", title: "AB+", for: "both" },
    { id: "AB-", title: "AB-", for: "both" },
    { id: "O+", title: "O+", for: "both" },
    { id: "O-", title: "O-", for: "both" },
  ],
  specialCategory: [
    { id: "expatriate", title: "প্রবাসী", for: "both" },
    {
      id: "foreign_citizen",
      title: "ফরেইন সিটিজেন",
      for: "both",
    },
    {
      id: "social_worker",
      title: "সমাজ সেবক",
      for: "both",
    },
    { id: "tabligh", title: "তাবলীগ", for: "both" },
    {
      id: "deen_service",
      title: "দ্বীনের খেদমতকারী",
      for: "both",
    },
    { id: "new_muslim", title: "নওমুসলিম", for: "both" },
    {
      id: "disabled",
      title: "প্রতিবন্ধী",
      for: "both",
    },
    { id: "orphan", title: "এতিম", for: "both" },
    {
      id: "infertile",
      title: "বন্ধ্যা/ইনফার্টিলিটি",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "শর্ট ডিভোর্সি",
      for: "both",
    },
    {
      id: "single_father",
      title: "সিঙ্গেল ফাদার",
      for: "male",
    },
    {
      id: "single_mother",
      title: "সিঙ্গেল মাদার",
      for: "female",
    },
    {
      id: "short_height",
      title: "স্বল্প উচ্চতার",
      for: "both",
    },
    { id: "older_age", title: "বয়সে বেশি", for: "both" },
    {
      id: "urban_resident",
      title: "শহরে বসবাসকারী",
      for: "both",
    },
    {
      id: "rural_resident",
      title: "গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "allow_wife_job",
      title: "স্ত্রীকে চাকরি/ব্যবসা করতে দিবে",
      for: "male",
    },
    {
      id: "allow_wife_study",
      title: "স্ত্রীকে পড়াশোনা করতে দিবে",
      for: "male",
    },
    {
      id: "employed_female",
      title: "চাকরিজীবী",
      for: "female",
    },
    {
      id: "job_interest_post_marriage",
      title: "বিয়ের পর চাকরি/ব্যাবসায় আগ্রহী",
      for: "female",
    },
    {
      id: "masna_interest",
      title: "মাসনায় আগ্রহী",
      for: "female",
    },
  ],
};

export const beingSearchedFilters = {
  selfBiodataType: [
    { id: "BRIDE", title: "আমি পাত্র" },
    {
      id: "GROOM",
      title: "আমি পাত্রী",
    },
  ],
  specialCategory: [
    {
      id: "expatriate",
      title: "আমি একজন প্রবাসী",
      for: "both",
    },
    {
      id: "foreign_citizen",
      title: "আমার ফরেইন সিটিজেনশিপ আছে",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "আমি শর্ট ডিভোর্সি বা ডিভোর্সড",
      for: "both",
    },
    {
      id: "widowed_male",
      title: "আমি বিপত্নীক",
      for: "BRIDE",
    },
    {
      id: "widowed_female",
      title: "আমি বিধবা",
      for: "GROOM",
    },
    {
      id: "single_father",
      title: "আমি সিঙ্গেল ফাদার (সন্তান আছে কিন্তু মা নেই বা দায়িত্বে নেই)",
      for: "BRIDE",
    },
    {
      id: "single_mother",
      title: "আমি সিঙ্গেল মাদার (সন্তান আছে কিন্তু বাবা নেই বা দায়িত্বে নেই)",
      for: "GROOM",
    },
    {
      id: "second_marriage_male",
      title: "আমি মাসনা বা দ্বিতীয় বিবাহে আগ্রহী",
      for: "BRIDE",
    },
    {
      id: "second_marriage_female",
      title: "আমি দ্বিতীয় স্ত্রী বা মাসনা হতে আগ্রহী",
      for: "GROOM",
    },
    {
      id: "short_height",
      title: "আমি স্বল্প উচ্চতার",
      for: "both",
    },
    {
      id: "older_age",
      title: "আমি বয়সে বেশি",
      for: "both",
    },
    {
      id: "village_resident",
      title: "আমি গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "dark_complexion",
      title: "আমার গায়ের বর্ণ গাঢ়",
      for: "GROOM",
    },
    {
      id: "infertility",
      title: "আমি বন্ধ্যাত্ব সমস্যায় ভুগছি",
      for: "both",
    },
    {
      id: "new_muslim",
      title: "আমি একজন নওমুসলিম",
      for: "both",
    },
    { id: "orphan", title: "আমি এতিম", for: "both" },
    {
      id: "disabled",
      title: "আমি প্রতিবন্ধী",
      for: "both",
    },
    {
      id: "religious_service",
      title: "আমি দ্বীনের খেদমতে আছি",
      for: "both",
    },
    {
      id: "tabligh",
      title: "আমি তাবলীগ এর সাথে যুক্ত",
      for: "both",
    },
    {
      id: "social_worker",
      title: "আমি একজন সমাজ সেবক",
      for: "both",
    },
    {
      id: "employed",
      title: "আমি একজন চাকরিজীবী",
      for: "both",
    },
    {
      id: "post_marriage_job",
      title: "আমি বিয়ের পর চাকরি / ব্যাবসায় আগ্রহী",
      for: "both",
    },
    {
      id: "post_marriage_study",
      title: "আমি বিয়ের পর পড়াশোনা করতে আগ্রহী",
      for: "both",
    },
  ],
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodataPage.tsx
// --------------------
// src/app/(main)/biodatas/listPageComponentes/BiodataPage.tsx

"use client";
import { useGetAllBiodatasQuery } from "@/redux/features/admin/biodataApi";
import { useDebounced } from "@/redux/hooks";
import { useMemo, useState } from "react";
import BiodatasPageCard from "./BiodatasPageCard";
import BiodatasPageFilters from "./BiodatasPageFilters";
import BiodatasPageSearchByBiodataNo from "./SearchByBiodataNo";

const BiodataPage = () => {
  const [fileList, setFileList] = useState<any[]>([]);
  const [modalActive, setModalActive] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [filterActive, setFilterActive] = useState(false);
  const [filters, setFilters] = useState({});
  const [selectedData, setSelectedData] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [pagination, setPagination] = useState({
    page: 1,
    pageSize: 25,
    sortOrder: "desc",
    sortBy: "createdAt",
  });
  const debouncedTerm = useDebounced({ searchQuery: searchTerm, delay: 600 });

  // Query
  const query = useMemo(
    () => ({
      page: pagination.page,
      limit: pagination.pageSize,
      sortBy: pagination.sortBy,
      sortOrder: pagination.sortOrder,
      ...(debouncedTerm && { searchTerm: debouncedTerm }),
      ...filters,
    }),
    [pagination, debouncedTerm, filters]
  );

  const { data: biodatas, isLoading } = useGetAllBiodatasQuery(query, {
    refetchOnMountOrArgChange: true,
  });

  console.log("biodatas", biodatas);
  // Handle filter change
  const handleFilter = (newFilters: Record<string, any>) => {
    setFilters(newFilters);
    setFilterActive(Object.keys(newFilters).length > 0);
  };

  // Handle reset
  const handleReset = () => {
    setFilters({});
    setSearchTerm("");
    setFilterActive(false);
    setFileList([]);
    setModalActive(false);
    setSelectedData(null);
    setIsEdit(false);
    setPagination({
      page: 1,
      pageSize: 25,
      sortOrder: "desc",
      sortBy: "createdAt",
    });
  };

  return (
    <div className="flex justify-between container mx-auto gap-5">
      <BiodatasPageFilters
        onFilterChange={handleFilter}
        onReset={handleReset}
      />
      <div className="flex-grow max-w-7xl">
        <div className="flex justify-end items-center mb-6">
          <BiodatasPageSearchByBiodataNo />
        </div>
        {isLoading ? (
          <div className="text-center py-4">Loading...</div>
        ) : biodatas && biodatas.data.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {biodatas?.data?.map((biodata) => (
              <BiodatasPageCard key={biodata.id} {...biodata} />
            ))}
          </div>
        ) : (
          <div className="text-center py-4">No biodatas found</div>
        )}
      </div>
      {/* <BiodatasPageAppliedFilters /> */}
    </div>
  );
};

export default BiodataPage;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageAppliedFilters.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageAppliedFilters.tsx

import { X } from "lucide-react";

export default function BiodatasPageAppliedFilters() {
  const appliedFilters = [
    {
      id: 1,
      name: "বায়োডাটার ধরন",
      selected: [
        {
          id: 1,
          name: "পুরুষ",
        },
      ],
    },
    {
      id: 2,
      name: "বৈবাহিক অবস্থা",
      selected: [
        {
          id: 1,
          name: "অবিবাহিত",
        },
        {
          id: 2,
          name: "বিবাহিত",
        },
      ],
    },
  ];

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">আপনি বাছাই করেছেন</div>
      </div>
      <div className="flex flex-col space-y-4">
        {appliedFilters.length > 0 &&
          appliedFilters.map((x) => (
            <div
              key={x.id}
              className="flex flex-col space-y-3 text-black text-xs border border-gray-300 rounded-xl px-6 py-2"
            >
              {x.selected.length > 0 &&
                x.selected.map((y) => (
                  <div key={y.id} className="flex justify-between items-center">
                    <div>{y.name}</div>
                    <X className="text-[#e25a6f] w-4 h-4" />
                  </div>
                ))}
            </div>
          ))}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageCard.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageCard.tsx

"use client";
import male from "@/assets/images/male-5.svg";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Heart } from "lucide-react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export interface BiodatasPageCardProps {
  id: number;
  name: string;
  code: number;
  age: number;
  height: number;
  permanentAddress: string;
  occupation: string;
  maritalStatus: string;
}

export default function BioCard({
  id,
  name,
  code,
  age,
  height,
  permanentAddress,
  occupation,
  maritalStatus,
}: BiodatasPageCardProps) {
  const router = useRouter();
  const handleOnClick = () => {
    router.push(`/biodatas/${id}`);
  };
  return (
    <Card
      key={id}
      className="border-none overflow-hidden bg-gradient-to-t from-[#e6f2ff] to-[#fff0f6]"
    >
      <CardContent className="p-4">
        <div className="flex justify-between items-start mb-4">
          <div className="w-1/3">
            <Heart className="w-8 h-8 text-[#E25A6F]" fill="#E25A6F" />
          </div>
          <div className="w-1/3 flex items-center justify-center">
            <Image src={male} alt="Male" width={80} height={40} priority />
          </div>
          <div className="w-1/3 flex flex-col items-end space-y-2">
            <Badge className="text-[#00b754]">Verified</Badge>
            <Badge className="text-[#016ca7]">Seen</Badge>
          </div>
        </div>

        <div className="text-center mb-4 flex items-center justify-center">
          <div className="text-black bg-[#fcfafd] p-3 rounded-md">
            বায়োডাটা নং: {code}
          </div>
        </div>

        <div className="space-y-3 text-black">
          <div className="flex justify-between">
            <span>বৈবাহিক অবস্থা:</span>
            <span>{maritalStatus}</span>
          </div>
          <div className="flex justify-between">
            <span>জন্মসন:</span>
            <span>{age}</span>
          </div>
          <div className="flex justify-between">
            <span>উচ্চতা:</span>
            <span>{height}</span>
          </div>
          <div className="flex justify-between">
            <span>স্থায়ী ঠিকানা:</span>
            <span>{permanentAddress}</span>
          </div>
          <div className="flex justify-between">
            <span>পেশা:</span>
            <span>{occupation[0]}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          className="w-full text-white bg-[#E25A6F]  hover:bg-[#D14A5F]"
          onClick={handleOnClick}
        >
          বায়োডাটা দেখুন
        </Button>
      </CardFooter>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageFilters.tsx
// --------------------
"use client";

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { beingSearchedFilters, searchingFilters } from "./biodataFilterOptions";
import { FilterAccordion } from "./FilterAccordian";

interface BiodatasPageFiltersProps {
  onFilterChange: (filters: Record<string, any>) => void;
  onReset: () => void;
}

export default function BiodatasPageFilters({
  onFilterChange,
  onReset,
}: BiodatasPageFiltersProps) {
  const searchParams = useSearchParams();
  const [activeTab, setActiveTab] = useState<"searching" | "beingSearched">(
    "searching"
  );
  const [ageRange, setAgeRange] = useState<[number, number]>([18, 80]);
  const [heightRange, setHeightRange] = useState<[number, number]>([36, 84]);
  const [selectedFilters, setSelectedFilters] = useState<
    Record<string, string | string[] | [number, number]>
  >({});

  // Initialize filters from URL query parameters
  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString());
    const initialFilters: Record<string, any> = {};

    // Single value filters
    const singleValueKeys = [
      "biodataType",
      "maritalStatus",
      "location",
      "religiousLifestyle",
      // Remove ageMin and ageMax from here since they’re handled separately
    ];
    singleValueKeys.forEach((key) => {
      const value = params.get(key);
      if (value) initialFilters[key] = value;
    });

    // Range filters (e.g., age)
    const ageMin = params.get("ageMin");
    const ageMax = params.get("ageMax");
    if (ageMin && ageMax) {
      const min = parseInt(ageMin, 10);
      const max = parseInt(ageMax, 10);
      if (!isNaN(min) && !isNaN(max)) {
        initialFilters["age"] = [min, max];
        // Only update ageRange if it’s different from the current value
        if (ageRange[0] !== min || ageRange[1] !== max) {
          setAgeRange([min, max]);
        }
      }
    }

    // Only update selectedFilters if it’s different from the current value
    if (JSON.stringify(selectedFilters) !== JSON.stringify(initialFilters)) {
      setSelectedFilters(initialFilters);
      onFilterChange(initialFilters);
    }
  }, [searchParams, ageRange, selectedFilters]);

  // Radio change handler
  const handleRadioChange = (key: string, value: string) => {
    setSelectedFilters((prev) => {
      const newFilters = { ...prev, [key]: value };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Checkbox change handler
  const handleCheckboxChange = (
    key: string,
    value: string,
    checked: boolean
  ) => {
    setSelectedFilters((prev) => {
      const currentValues = Array.isArray(prev[key])
        ? [...(prev[key] as string[])]
        : [];
      if (checked) {
        currentValues.push(value);
      } else {
        const index = currentValues.indexOf(value);
        if (index > -1) currentValues.splice(index, 1);
      }
      const newFilters = { ...prev, [key]: currentValues };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Slider change handler
  const handleSliderChange = (key: string, value: [number, number]) => {
    if (key === "age" || key === "partner_age") setAgeRange(value);
    if (key === "height" || key === "partner_height") setHeightRange(value);
    const newFilters = { ...selectedFilters, [key]: value };
    setSelectedFilters(newFilters);
    onFilterChange(newFilters);
  };

  // Tab change handler
  const handleTabChange = (tab: "searching" | "beingSearched") => {
    setActiveTab(tab);
    setSelectedFilters({});
    setAgeRange([18, 80]);
    setHeightRange([36, 84]);
    onFilterChange({});
  };

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">ফিল্টার করুন</div>
      </div>
      {/* Filter buttons */}
      <div className="flex justify-center mb-4">
        <button
          className={`mr-[-1rem] rounded-xl py-3 px-4 z-10 ${
            activeTab === "searching"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("searching")}
        >
          আমি খুঁজছি
        </button>
        <button
          className={`py-3 rounded-xl px-4 ${
            activeTab === "beingSearched"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("beingSearched")}
        >
          আমাকে খুঁজছে
        </button>
      </div>
      {/* Filter accordion */}
      <form className="flex flex-col space-y-2">
        <Accordion type="multiple" className="flex flex-col space-y-2 mb-2">
          {activeTab === "searching" ? (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="biodataType"
                options={searchingFilters.biodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বৈবাহিক অবস্থা"
                title="বৈবাহিক অবস্থা"
                contentType="radio"
                filterKey="maritalStatus"
                options={searchingFilters.maritalStatus}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বয়স"
                title="বয়স"
                contentType="slider"
                filterKey="age"
                range={ageRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("age", val)
                }
                min={18}
                max={80}
              />
              <FilterAccordion
                value="উচ্চতা"
                title="উচ্চতা"
                contentType="slider"
                filterKey="height"
                range={heightRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("height", val)
                }
                min={36}
                max={84}
              />
              <FilterAccordion
                value="গাত্রবর্ণ"
                title="গাত্রবর্ণ"
                contentType="radio"
                filterKey="complexion"
                options={searchingFilters.skinTones}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="স্থায়ী ঠিকানা"
                title="স্থায়ী ঠিকানা"
                contentType="radio"
                filterKey="permanentAddress"
                options={searchingFilters.permanentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বর্তমান ঠিকানা"
                title="বর্তমান ঠিকানা"
                contentType="radio"
                filterKey="currentAddress"
                options={searchingFilters.currentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="ধর্মীয় লাইফস্টাইল"
                title="ধর্মীয় লাইফস্টাইল"
                contentType="radio"
                filterKey="religiousLifestyle"
                options={searchingFilters.religiousLifestyle}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পেশা"
                title="পেশা"
                contentType="radio"
                filterKey="occupation"
                options={searchingFilters.occupation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="শিক্ষা"
                title="শিক্ষা"
                contentType="radio"
                filterKey="education"
                options={searchingFilters.education}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="দ্বীনি যোগ্যতা"
                title="দ্বীনি যোগ্যতা"
                contentType="radio"
                filterKey="religiousEducation"
                options={searchingFilters.religiousEducation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পরিবারের আর্থসামাজিক অবস্থা"
                title="পরিবারের আর্থসামাজিক অবস্থা"
                contentType="radio"
                filterKey="familyStatus"
                options={searchingFilters.familyBackgrounds}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="মাজহাব/মানহাজ"
                title="মাজহাব/মানহাজ"
                contentType="radio"
                filterKey="madhhab"
                options={searchingFilters.madhhab}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="রক্তের গ্রুপ"
                title="রক্তের গ্রুপ"
                contentType="radio"
                filterKey="bloodGroup"
                options={searchingFilters.bloodGroup}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={searchingFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
            </>
          ) : (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="selfBiodataType"
                options={beingSearchedFilters.selfBiodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={beingSearchedFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
              <AccordionItem
                className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
                value="যেমন জীবনসঙ্গী আশা করেন"
              >
                <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
                  যেমন জীবনসঙ্গী আশা করেন
                </AccordionTrigger>
                <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
                  <Accordion
                    type="multiple"
                    className="flex flex-col space-y-2"
                  >
                    <FilterAccordion
                      value="partner_biodataType"
                      title="জীবনসঙ্গীর বায়োডাটার ধরন"
                      contentType="radio"
                      filterKey="partner_biodataType"
                      options={searchingFilters.biodataType}
                      selectedFilters={
                        selectedFilters as Record<string, string>
                      }
                      handleRadioChange={handleRadioChange}
                    />
                    <FilterAccordion
                      value="partner_maritalStatus"
                      title="জীবনসঙ্গীর বৈবাহিক অবস্থা"
                      contentType="checkbox"
                      filterKey="partner_maritalStatus"
                      options={searchingFilters.maritalStatus}
                      selectedFilters={
                        selectedFilters as Record<string, string[]>
                      }
                      handleCheckboxChange={handleCheckboxChange}
                    />
                    <FilterAccordion
                      value="partner_age"
                      title="জীবনসঙ্গীর বয়স"
                      contentType="slider"
                      filterKey="partner_age"
                      range={ageRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_age", val)
                      }
                      min={18}
                      max={80}
                    />
                    <FilterAccordion
                      value="partner_height"
                      title="জীবনসঙ্গীর উচ্চতা"
                      contentType="slider"
                      filterKey="partner_height"
                      range={heightRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_height", val)
                      }
                      min={36}
                      max={84}
                    />
                  </Accordion>
                </AccordionContent>
              </AccordionItem>
            </>
          )}
        </Accordion>
        <button
          type="button"
          className="py-2 px-4 bg-[#e25a6f] text-white rounded-xl"
          onClick={() => {
            setSelectedFilters({});
            setAgeRange([18, 80]);
            setHeightRange([36, 84]);
            onReset();
          }}
        >
          ফিল্টার রিসেট
        </button>
      </form>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\FilterAccordian.tsx
// --------------------
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Slider } from "@/components/ui/slider";

interface FilterAccordionProps {
  value: string;
  title: string;
  contentType: string;
  filterKey?: string;
  options?: { id: string; title: string }[];
  selectedFilters?: Record<string, string | string[]>;
  handleRadioChange?: (key: string, value: string) => void;
  handleCheckboxChange?: (key: string, value: string, checked: boolean) => void;
  range?: number[];
  onRangeChange?: (value: number[]) => void;
  min?: number;
  max?: number;
}

export const FilterAccordion = (props: FilterAccordionProps) => {
  const { value, title, contentType } = props;

  // Validation for radio
  if (
    contentType === "radio" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleRadioChange)
  ) {
    return null;
  }

  // Validation for checkbox
  if (
    contentType === "checkbox" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleCheckboxChange)
  ) {
    return null;
  }

  // Validation for slider
  if (
    contentType === "slider" &&
    (!props.filterKey ||
      !props.range ||
      !props.onRangeChange ||
      props.min === undefined ||
      props.max === undefined)
  ) {
    return null;
  }

  const renderRadioGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleRadioChange: (key: string, value: string) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <RadioGroup
        value={(selectedFilters[key] as string) || ""}
        onValueChange={(value) => handleRadioChange(key, value)}
      >
        {options.map((option) => (
          <div key={option.id} className="flex items-center space-x-2">
            <RadioGroupItem value={option.id} id={`${key}-${option.id}`} />
            <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
          </div>
        ))}
      </RadioGroup>
    </AccordionContent>
  );

  const renderCheckboxGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleCheckboxChange: (key: string, value: string, checked: boolean) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      {options.map((option) => (
        <div key={option.id} className="flex items-center space-x-2">
          <Checkbox
            id={`${key}-${option.id}`}
            checked={
              (selectedFilters[key] as string[])?.includes(option.id) || false
            }
            onCheckedChange={(checked) =>
              handleCheckboxChange(key, option.id, checked as boolean)
            }
          />
          <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
        </div>
      ))}
    </AccordionContent>
  );

  const renderSlider = (
    key: string,
    label: string,
    value: number[],
    onChange: (value: number[]) => void,
    min: number,
    max: number
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <div className="flex items-center space-x-2">
        <div className="text-[#1f4f69]">{value[0]}</div>
        <Slider
          value={value}
          onValueChange={(val) => onChange(val)}
          min={min}
          max={max}
          step={1}
          className="w-full"
        />
        <div className="text-[#1f4f69]">{value[1]}</div>
      </div>
    </AccordionContent>
  );

  return (
    <AccordionItem
      className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
      value={value}
    >
      <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
        {title}
      </AccordionTrigger>
      {contentType === "radio" &&
        renderRadioGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleRadioChange
        )}
      {contentType === "checkbox" &&
        renderCheckboxGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleCheckboxChange
        )}
      {contentType === "slider" &&
        renderSlider(
          props.filterKey,
          title,
          props.range,
          props.onRangeChange,
          props.min,
          props.max
        )}
    </AccordionItem>
  );
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\SearchByBiodataNo.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/SearchByBiodataNo.tsx

import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Search } from "lucide-react";

export default function BiodatasPageSearchByBiodataNo() {
  return (
    <form className="flex items-center space-x-4">
      <div className="w-32">
        <Select>
          <SelectTrigger className="text-[#1f4f69]">
            <SelectValue placeholder="SNM" />
          </SelectTrigger>
          <SelectContent className="bg-white text-[#1f4f69]">
            {/* <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="all"
            >
              SNM
            </SelectItem> */}
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="male"
            >
              পুরুষ
            </SelectItem>
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="female"
            >
              নারী
            </SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="relative w-64">
        <div className="space-y-2">
          <Input
            className="w-full px-4 py-2 border rounded-md text-[#1f4f69] selection:bg-[#E25A6F] selection:text-white"
            id="biodataNo"
            type="text"
            placeholder="বায়োডাটা নং"
          />
        </div>
        <button className="absolute right-3 top-1/2 transform -translate-y-1/2">
          <Search className="w-4 h-4 text-gray-400" />
        </button>
      </div>
    </form>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\page.tsx
// --------------------
import BiodataPage from "./listPageComponentes/BiodataPage";

export default function BiodatasPage() {
  return (
    <>
      <div className="mt-12 text-3xl text-center text-black mb-4 ">
        বায়োডাটা সমূহ
      </div>
      <BiodataPage />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\page.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/page.tsx
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import AddressInfo from "./viewBioDataComponents/AddressInfo";
import EducationAndOccupationInfo from "./viewBioDataComponents/EducationAndOccupationInfo";
import FamilyInfo from "./viewBioDataComponents/FamilyInfo";
import FooterSection from "./viewBioDataComponents/FooterSection";
import GeneralInfo from "./viewBioDataComponents/GeneralInfo";
import HeaderSection from "./viewBioDataComponents/HeaderSection";
import MarriageInfo from "./viewBioDataComponents/MarriageInfo";
import PersonalInfo from "./viewBioDataComponents/PersonalInfo";
import PrimaryInfo from "./viewBioDataComponents/PrimaryInfo";
import ReligiousInfo from "./viewBioDataComponents/ReligiousInfo";
import SpousePreferenceInfo from "./viewBioDataComponents/SpousePreferenceInfo";

export default function BiodataPage() {
  const tabs = [
    "প্রাথমিক তথ্য",
    "সাধারণ তথ্য",
    "ঠিকানা",
    "শিক্ষা ও পেশা",
    "পারিবারিক তথ্য",
    "ধর্মীয় লাইফস্টাইল",
    "ব্যক্তিগত তথ্য",
    "বিয়ে সংক্রান্ত তথ্য",
    "যেমন জীবনসঙ্গী আশা করেন",
  ];

  return (
    <>
      <HeaderSection />
      <div className="py-12 flex flex-col items-center justify-center space-y-6">
        <div className="text-4xl text-center text-black">সম্পূর্ণ বায়োডাটা</div>
        <Tabs defaultValue="ঠিকানা" className="max-w-7xl">
          <TabsList className="flex flex-wrap h-auto space-x-2 bg-[#f6f6f6] rounded-2xl p-2">
            {tabs.map((tab) => (
              <TabsTrigger
                key={tab}
                value={tab}
                className="data-[state=active]:bg-[#e25a6f] data-[state=active]:text-white text-[#004972] rounded-full px-4 py-2"
              >
                {tab}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>

        <div className="w-full max-w-6xl space-y-6">
          <PrimaryInfo />
          <GeneralInfo />
          <AddressInfo />
          <EducationAndOccupationInfo />
          <FamilyInfo />
          <ReligiousInfo />
          <PersonalInfo />
          <MarriageInfo />
          <SpousePreferenceInfo />
        </div>
      </div>
      <FooterSection />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/AddressInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function AddressInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ঠিকানা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোথায় বেড়ে উঠেছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\EducationAndOccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/EducationAndOccupationInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function EducationAndOccupationInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          শিক্ষাগত যোগ্যতা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষার ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">জেনারেল</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এস.এস.সি/দাখিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এস.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এইচ.এস.সি/আলিম/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এইচ.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(ডিপ্লোমা):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">ডিপ্লোমা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(অনার্স/ফাজিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অনার্স</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(মাস্টার্স/কামিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>

        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা নিয়ে বিস্তারিত লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাসিক আয়:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FamilyInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function FamilyInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          পারিবারিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পিতা-মাতা উভয়েই জীবিত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনারা ভাই-বোন কতজন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ভাই-বোন কে কি করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">চাচা মামাদের পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">যৌথ পরিবার</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পারিবারিক বিষয়ে আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FooterSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FooterSection.tsx

import { Card, CardContent } from "@/components/ui/card";
import Link from "next/link";
export default function FooterSection() {
  return (
    <div className="py-12 flex flex-col items-center justify-center">
      <div className="text-4xl text-center text-[#004972] mb-4">
        বায়োডাটা পছন্দ হয়েছে?
      </div>
      <div className="text-md text-center text-black mb-8">
        আপনি আগ্রহী হলে আপনার জন্য ৩টি অপশন রয়েছে।
      </div>
      <div className="max-w-6xl flex space-x-6 text-black">
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                প্রাথমিক প্রস্তাব পাঠিয়ে আপনার প্রতি আগ্রহী কিনা জানতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                প্রাথমিক প্রস্তাব পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                ছবি দেখার জন্য অনুরোধ পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                যোগাযোগ তথ্য দেখুন
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        {/* <div>পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন</div>
        <div>সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন</div> */}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/GeneralInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function GeneralInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          সাধারণ তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জন্ম তারিখ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অবিবাহিত</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'১"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ওজন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">রক্তের গ্রুপ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">AB−</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জাতীয়তা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বাংলাদেশী, ফরেইন সিটিজেন
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSection.tsx

import male from "@/assets/images/male-5.svg";
import { Card, CardContent } from "@/components/ui/card";
import {
  CircleChevronDown,
  Copy,
  Heart,
  IdCard,
  Mail,
  Send,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import HeaderShortBio from "./HeaderShortBio";
import HeaderSpousePreferenceRequierment from "./HeaderSpousePreferenceRequierment";

export default function HeaderSection() {
  return (
    <div className="py-12 flex justify-center bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <div className="min-w-7xl flex space-x-8">
        <div className="w-1/4 flex flex-col space-y-8">
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col items-center space-y-4">
                <div className="w-full flex items-start justify-between">
                  <div className="w-1 text-[#00b754] text-md font-semibold">
                    Verified
                  </div>
                  <Image
                    src={male}
                    alt="Male"
                    width={100}
                    height={40}
                    priority
                  />
                  <div className="w-1"></div>
                </div>

                <div className="text-lg">
                  বায়োডাটা কোড: <span className="font-semibold">SNM-392</span>
                </div>

                <div className="flex space-x-4 border border-gray-400 rounded-xl p-4">
                  <Heart className="h-6 w-6" />
                  <IdCard className="h-6 w-6" />
                  <Copy className="h-6 w-6 rotate-90" />
                  <Mail className="h-6 w-6" />
                  <CircleChevronDown className="h-6 w-6 text-[#b52d1f]" />
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col space-y-4">
                <div className="text-xl font-medium text-center mb-4 text-[#b52d1f]">
                  আপনি আগ্রহী?
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col">
                    <div>প্রাথমিক প্রস্তাব পাঠান</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col space-x-2">
                    <div>অভিভাবকের যোগাযোগ তথ্য দেখুন</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <Link
                  href="/tutorial"
                  className="text-xs text-center hover:underline text-blue-300"
                >
                  (বিস্তারিত জানুন)
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="w-3/4 flex space-x-8">
          <HeaderShortBio />
          <HeaderSpousePreferenceRequierment />
        </div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderShortBio.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderShortBio.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderShortBio() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          পাত্রের সংক্ষিপ্ত বিবরণ
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSpousePreferenceRequierment.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSpousePreferenceRequierment.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderSpousePreferenceRequierment() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          যেমন জীবনসঙ্গী আশা করেন
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/MarriageInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function MarriageInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          বিয়ে সংক্রান্ত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?</div> */}
          <div className="w-1/2">
            বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">
            বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?
          </div> */}
          <div className="w-1/2">
            আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?</div> */}
          <div className="w-1/2">
            যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* Male only */}
          <div className="w-1/2">
            বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে
            পারবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক বা উপহার
            বা অর্থ আশা করবেন কিনা?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পাত্রপক্ষ/পাত্রীপক্ষ অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিয়ে সংক্রান্ত আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PersonalInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PersonalInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ব্যক্তিগত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি দাড়ি পছন্দ?/দাড়ি রেখেছেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পরতে পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মানসিক বা শারীরিক কোনো রোগ আছে কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের কিছু গুণাবলী চিহ্নিত করুন</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শান্ত-শিষ্ট, ধৈর্যশীল, ইমোশনাল
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            আমি একজন সমাজ সেবক, আমি বন্ধ্যা-ইনফার্টিলিটি
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের মতো করে নিজের সম্পর্কে কিছু লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            রাজনীতি নিয়ে আপনার দৃষ্টিভঙ্গি কি? এর সাথে যুক্ত থাকলে বিস্তারিত
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অবসর সময়ে কি করতে পছন্দ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">সামাজিক বা ধর্মীয় কোনো কাজে যুক্ত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কিছু বইয়ের নাম (যদি পড়ে থাকেন)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">দৈনন্দিন খাবারে কি কি পছন্দ এবং অপছন্দ?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কয়েকজন ব্যক্তিত্বের নাম যাদেরকে নিয়মিত ফলো করেন
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার জীবনের লক্ষ্য কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন কোন সোসাল মিডিয়া ব্যবহার করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার আগ্রহ ও শখ কি কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div> */}
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PrimaryInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PrimaryInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          প্রাথমিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটার ধরন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটা কার জন্য তৈরী করছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/ReligiousInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function ReligiousInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ধর্মীয় লাইফস্টাইল
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি কি আপনার জীবনকে পরিপূর্ণ ভাবে ইসলামিক বিধি-বিধান অনুযায়ী
            পরিচালনা করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            জেনারেল/নন-প্রাক্টিসিং
          </div>
        </div>

        {/* Non Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় কোন মতাদর্শ মেনে চলেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সুন্নি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন মাজহাব / মানহাজ অনুসরণ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সালাফি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">প্রতিদিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Try Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি নামাজ কাযা হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Common */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু করেছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Male */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">টাখনুর উপরে কাপড় পরেন কিনা?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Female */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কি নিকাব সহ পর্দা করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/SpousePreferenceInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function SpousePreferenceInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          যেমন জীবনসঙ্গী আশা করেন
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত বয়স:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'২"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিশেষ শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মুহাদ্দিসা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            অবিবাহিত, ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেন, শর্ট ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় লাইফস্টাইল:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আল্লাহ যাদেরকে গাঢ় ত্বক বা কালো বর্ণ দিয়েছেন, এরকম পাত্রীর প্রতি
            আপনি আগ্রহী?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div> */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শহরে বসবাসকারী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardLeftNav.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardLeftNav.tsx
import profilePic from "@/assets/images/profile-pic.png";
import { Separator } from "@/components/ui/separator";
import Image from "next/image";

export default function DashboardLeftNav() {
  return (
    <div className="py-12 w-72 flex flex-col items-center space-y-1 bg-[#5b8eaa]">
      <Image
        src={profilePic}
        alt="Male"
        width={80}
        height={40}
        priority
        className="bg-[#77a1b8] p-4 rounded-full"
      />
      <div className="p-2">আব্দুল্লাহ বিন আব্দুর রাজ্জাক</div>
      <div className="mb-4 p-3 bg-[#c6d8e1] text-black rounded-xl">
        বায়োডাটা নং: <span className="font-semibold">43527</span>
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        বায়োডাটা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        নোটিফিকেশন
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        পছন্দের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        শর্টলিস্টের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        শর্টলিস্টের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        যোগাযোগ তথ্যের তালিকা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        টোকেন
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        বিবাহ সম্পন্ন
      </div>
      <Separator className="bg-white my-4" />
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        জিজ্ঞাসা
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        অভিযোগ
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        পরামর্শ
      </div>
      <div className="p-2 w-full text-center hover:bg-[#eff9ff] hover:text-black">
        মন্তব্য
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainBioStatus.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainBioStatus.tsx
import { Slider } from "@/components/ui/slider";

export default function DashboardMainBioStatus() {
  return (
    <div className="bg-[#f2f4fc] p-8 flex flex-col space-y-2 rounded-xl">
      <div className="text-[#005381] text-center text-2xl">বায়োডাটা</div>
      <div className="text-xs text-[#8c8e92] text-center">
        বায়োডাটা পাবলিশ হয়েছে ৫ নভেম্বর, ২০২৪
      </div>
      <div className="flex space-x-6 text-black mt-4">
        <div className="flex flex-col items-center bg-[#e7ecf6] p-6 space-y-6 rounded-xl">
          <div className="text-lg">বায়োডাটা স্ট্যাটাস</div>
          <div className="flex">
            <div className="py-4 rounded-3xl mr-[-2rem] px-6 bg-[#c65c5c] text-white z-10">
              প্রাইভেট
            </div>
            <div className="py-4 rounded-3xl pr-6 pl-12 bg-[#d9d9d9] text-[#777] ">
              পাবলিক
            </div>
            {/* <div className="py-4 rounded-3xl mr-[-2rem] pl-6 pr-12 bg-[#d9d9d9] text-[#777]">
                প্রাইভেট
              </div>
              <div className="py-4 rounded-3xl px-6 bg-[#c65c5c] text-white z-10">
                পাবলিক
              </div> */}
          </div>
        </div>
        <div className="w-72 flex flex-col items-center bg-[#e7ecf6] p-6 space-y-6 rounded-xl">
          <div className="text-lg">বায়োডাটা সম্পূর্ণতা</div>
          <Slider value={[70]} min={0} max={100} step={1} className="w-full" />
          <div>৭০%</div>
        </div>
        <div className="flex flex-col items-center space-y-6">
          <div className="w-48 p-4 bg-[#5b8eaa] rounded-xl text-white text-center">
            বায়োডাটা দেখুন
          </div>
          <div className="w-48 p-4 bg-[#5b8eaa] rounded-xl text-white text-center">
            বায়োডাটা এডিট করুন
          </div>
        </div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainContactUs.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainContactUs.tsx
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";

export default function DashboardMainContactUs() {
  const tabs = ["জিজ্ঞাসা", "অভিযোগ", "পরামর্শ", "মন্তব্য"];

  return (
    <Tabs defaultValue="জিজ্ঞাসা" className="bg-[#f2f4fc] p-4 rounded-xl gap-0">
      <TabsList className="bg-[#5b8eaa] text-white p-0">
        {tabs.map((x) => (
          <TabsTrigger
            key={x}
            className="p-0 data-[state=active]:bg-[#f2f4fc] data-[state=active]:text-black"
            value={x}
          >
            <div className="px-4 py-2">{x}</div>
          </TabsTrigger>
        ))}
      </TabsList>
      {tabs.map((x) => (
        <TabsContent key={x} value={x}>
          <ContactUsCard />
        </TabsContent>
      ))}
    </Tabs>
  );
}

export function ContactUsCard() {
  return (
    <Card className="bg-transparent border-none shadow-none p-4">
      <CardContent className="flex p-0 items-center space-x-8">
        <Textarea
          className="bg-white text-black selection:bg-[#E25A6F] selection:text-white"
          id="comment"
        />
        <Button className="bg-[#5b8eaa] text-white">Send</Button>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainContent.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainContent.tsx
import DashboardMainBioStatus from "./DashboardMainBioStatus";
import DashboardMainContactUs from "./DashboardMainContactUs";
import DashboardMainMyActivityStatus from "./DashboardMainMyActivityStatus";
import DashboardMainMyBioStatus from "./DashboardMainMyBioStatus";
import DashboardMainNotifications from "./DashboardMainNotifications";

export default function DashboardMainContent() {
  return (
    <div className="py-12 flex flex-col space-y-8 max-w-7xl">
      <DashboardMainBioStatus />
      <div className="flex justify-center space-x-16 text-black">
        <DashboardMainMyActivityStatus />
        <DashboardMainMyBioStatus />
      </div>
      <DashboardMainNotifications />
      <DashboardMainContactUs />
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainMyActivityStatus.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainMyActivityStatus.tsx
export default function DashboardMainMyActivityStatus() {
  return (
    <div className="w-96 bg-[#f2f4fc] p-8 flex flex-col space-y-4 rounded-xl">
      <div className="text-2xl text-[#005381] text-center mb-8">
        আপনার বায়োডাটা সর্বমোট
      </div>
      <div className="flex justify-between">
        <div>ভিউ হয়েছে</div>
        <div className="w-6 text-center">১২</div>
      </div>
      <div className="flex justify-between">
        <div>পছন্দের তালিকায় রেখেছে</div>
        <div className="w-6 text-center">৮</div>
      </div>
      <div className="flex justify-between">
        <div>শর্টলিস্টে রেখেছে</div>
        <div className="w-6 text-center">৫</div>
      </div>
      <div className="flex justify-between">
        <div>প্রাথমিক প্রস্তাব এসেছে</div>
        <div className="w-6 text-center">১২</div>
      </div>
      <div className="flex justify-between">
        <div>যোগাযোগ তথ্য নিয়েছে</div>
        <div className="w-6 text-center">৩</div>
      </div>
      <div className="flex justify-between">
        <div>রিপোর্ট এসেছে</div>
        <div className="w-6 text-center">৩</div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainMyBioStatus.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainMyBioStatus.tsx
export default function DashboardMainMyBioStatus() {
  return (
    <div className="w-96 bg-[#f2f4fc] p-8 flex flex-col space-y-4 rounded-xl">
      <div className="text-2xl text-[#005381] text-center mb-8">
        আপনি সর্বমোট বায়োডাটা
      </div>
      <div className="flex justify-between">
        <div>পছন্দের তালিকায় রেখেছেন</div>
        <div className="w-6 text-center">৮</div>
      </div>
      <div className="flex justify-between">
        <div>শর্টলিস্টে রেখেছেন</div>
        <div className="w-6 text-center">৮</div>
      </div>
      <div className="flex justify-between">
        <div>প্রাথমিক প্রস্তাব পাঠিয়েছেন</div>
        <div className="w-6 text-center">৫</div>
      </div>
      <div className="flex justify-between">
        <div>যোগাযোগ তথ্য নিয়েছেন </div>
        <div className="w-6 text-center">৩</div>
      </div>
      <div className="flex justify-between">
        <div>রিপোর্ট করেছেন</div>
        <div className="w-6 text-center">৩</div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardMainNotifications.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardMainNotifications.tsx

export default function DashboardMainNotifications() {
  const notiication = [
    {
      id: 1,
      description: "নোটিফিকেশন 1",
    },
    {
      id: 2,
      description: "নোটিফিকেশন 2",
    },
  ];

  return (
    <div className="bg-[#f2f4fc] p-8 flex flex-col space-y-4 rounded-xl text-black">
      <div className="text-[#005381] text-center text-2xl mb-4">নোটিফিকেশন</div>
      {notiication &&
        notiication.map((x) => (
          <div key={x.id} className="bg-[#e8e8ed] mx-8 p-2 rounded-md text-sm">
            {x.description}
          </div>
        ))}
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\DashboardRightSection.tsx
// --------------------
// File: src/app/(main)/dashboard/DashboardRightSection.tsx
export default function DashboardRightSection() {
  return (
    <div className="py-12 mr-8 flex flex-col items-center space-y-6">
      <div className="p-10 bg-[#f9f3f9] rounded-3xl flex flex-col items-center justify-center space-y-4">
        <div className="text-black text-center">আপনার সর্বমোট টোকেন সংখ্যা</div>
        <div className="text-8xl text-[#ad0000] font-semibold">১</div>
        <div className="px-6 py-4 bg-[#3c4652] rounded-md">টোকেন কিনুন</div>
      </div>
      <div className="p-10 bg-[#f9f3f9] rounded-3xl flex flex-col items-center justify-center space-y-4">
        <div className="text-black text-center">
          আপনার কি বিবাহ সম্পন্ন হয়েছে?
        </div>
        <div className="px-16 py-4 bg-[#5b8eaa] rounded-md">হ্যা</div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\dashboard\page.tsx
// --------------------
// File: src/app/(main)/dashboard/page.tsx
"use client";
import { useAppSelector } from "@/redux/hooks";
import { redirect } from "next/navigation";
import DashboardLeftNav from "./DashboardLeftNav";
import DashboardMainContent from "./DashboardMainContent";
import DashboardRightSection from "./DashboardRightSection";

export default function DashboardPage() {
  const user = useAppSelector((state) => state.auth.user);
  const token = useAppSelector((state) => state.auth.acesstoken);
  console.log(user);
  if (!user || !token) {
    redirect("/login");
  }
  return (
    <main className="flex justify-between flex-grow bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <DashboardLeftNav />

      <DashboardMainContent />
      <DashboardRightSection />
    </main>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\layout.tsx
// --------------------
// File: src/app/(main)/layout.tsx
import { Footer } from "@/components/footer";
import { Navbar } from "@/components/navbar";
import { ReactNode } from "react";

export default function MainLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return (
    <div className="flex flex-col min-h-screen bg-white">
      <Navbar />
      {children}
      <Footer />
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\tutorial\page.tsx
// --------------------
// File: src/app/(main)/tutorial/page.tsx
const Page = () => {
  return (
    <div>
      <h1>This is Page component</h1>
    </div>
  );
};

export default Page;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\BiodataEditor.tsx
// --------------------
// File: src/app/(main)/biodata-editor/BiodataEditor.tsx

"use client";

import { useCreateBiodataMutation } from "@/redux/features/admin/biodataApi";
import {
  clearBiodataFormData,
  updateBiodataFormData,
} from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch, useAppSelector } from "@/redux/hooks";
import { useRouter, useSearchParams } from "next/navigation";
import { useCallback, useEffect, useMemo } from "react";
import { toast } from "sonner";
import Breadcrumbs from "./biodataFormComponents/Breadcrumbs";
import { steps } from "./steps";

// Map step keys to Redux state keys
const stepKeyToStateKey: Record<string, string> = {
  "first-words": "firstWordsFormData",
  "primary-info": "primaryInfoFormData",
  "general-info": "generalInfoFormData",
  "address-info": "addressInfoFormData",
  "education-info": "educationInfoFormData",
  "occupation-info": "occupationInfoFormData",
  "family-info": "familyInfoFormData",
  "religious-info": "religiousInfoFormData",
  "personal-info": "personalInfoFormData",
  "marriage-info": "marriageInfoFormData",
  "spouse-preference-info": "spousePreferenceInfoFormData",
  "profile-pic": "profilePicFormData",
  "final-words": "finalWordsFormData",
};

interface BiodataEditorProps {
  biodataToEdit: any | null;
}

export default function BiodataEditor({ biodataToEdit }: BiodataEditorProps) {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const biodataFormData = useAppSelector(
    (state) => state.biodata.biodataFormData
  );
  const { user, acesstoken } = useAppSelector((state) => state.auth);
  const [createBiodata, { isLoading }] = useCreateBiodataMutation();

  const searchParams = useSearchParams();
  const currentStepKey = searchParams.get("step") || steps[0].key;
  const currentStep = useMemo(
    () => steps.find((x) => x.key === currentStepKey),
    [currentStepKey]
  );

  useEffect(() => {
    if (!user || !acesstoken) {
      const redirectUrl = `/biodata-editor?step=${currentStepKey}`;
      router.push(`/login?redirect=${encodeURIComponent(redirectUrl)}`);
    }
  }, [user, acesstoken, router, currentStepKey]);

  const setStep = useCallback(
    (key: string) => {
      const newSearchParams = new URLSearchParams(searchParams);
      newSearchParams.set("step", key);
      window.history.pushState(null, "", `?${newSearchParams.toString()}`);
    },
    [searchParams]
  );

  const FormComponent = useMemo(() => currentStep?.component, [currentStep]);

  const handleFormDataUpdate = useCallback(
    (data: any) => {
      const cleanData = JSON.parse(JSON.stringify(data));
      const stateKey = stepKeyToStateKey[currentStepKey] || currentStepKey;
      dispatch(
        updateBiodataFormData({
          key: stateKey,
          data: cleanData,
        })
      );
    },
    [dispatch, currentStepKey]
  );

  const handleSave = useCallback(async () => {
    if (!currentStep || !user) return;

    if (currentStep.key === "final-words") {
      try {
        const completeBiodata = {
          userId: user.userId,
          ...JSON.parse(JSON.stringify(biodataFormData)),
        };
        const result = await createBiodata(completeBiodata).unwrap();
        if (result.success) {
          toast.success("Biodata created successfully!");
          dispatch(clearBiodataFormData());
          setStep(steps[0].key);
          router.push("/dashboard");
        } else {
          toast.error(result.message || "Failed to create biodata.");
        }
      } catch (error: any) {
        console.error("Failed to save biodata:", error);
        toast.error(error?.message || "Failed to create biodata.");
      }
    } else {
      setStep(currentStep.next);
    }
  }, [
    currentStep,
    biodataFormData,
    setStep,
    dispatch,
    createBiodata,
    user,
    router,
  ]);

  if (!FormComponent || !user) return null;

  return (
    <div className="container mx-auto p-4">
      <Breadcrumbs currentStep={currentStepKey} setCurrentStep={setStep} />
      <FormComponent
        biodataFormData={biodataFormData}
        setBiodataFormData={handleFormDataUpdate}
        handleSave={handleSave}
        currentStep={currentStep}
        setCurrentStep={setStep}
      />
      {process.env.NODE_ENV === "development" && (
        <pre>{JSON.stringify(biodataFormData, null, 2)}</pre>
      )}
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/AddressInfo.tsx

"use client";

// import { Button } from "@/components/ui/button";
// import {
//   Form,
//   FormControl,
//   FormField,
//   FormItem,
//   FormLabel,
//   FormMessage,
// } from "@/components/ui/form";
// import { Input } from "@/components/ui/input";
// import { Label } from "@/components/ui/label";
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
// import {
//   Select,
//   SelectContent,
//   SelectItem,
//   SelectTrigger,
//   SelectValue,
// } from "@/components/ui/select";
// import { citizenshipOptions, locations, types } from "@/lib/consts";
// import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
// import { addressInfoFormData } from "@/lib/validations";
// import { zodResolver } from "@hookform/resolvers/zod";
// import { Minus, Plus } from "lucide-react";
// import { useEffect, useState } from "react";
// import { useFieldArray, useForm } from "react-hook-form";

// export default function AddressInfo({
//   biodataFormData,
//   setBiodataFormData,
//   handleSave,
//   currentStep,
//   setCurrentStep,
// }: BiodataFormDataProps) {
//   const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

//   const form = useForm<AddressInfoFormData>({
//     resolver: zodResolver(addressInfoFormData),
//     defaultValues: {
//       addresses: biodataFormData?.addressInfoFormData?.addresses || [
//         {
//           type: "",
//           location: "",
//           state: "",
//           city: "",
//           detail: "",
//           country: "",
//           cityzenshipStatus: "",
//         },
//       ],
//     },
//   });

//   const { fields, append, remove } = useFieldArray({
//     control: form.control,
//     name: "addresses",
//   });

//   useEffect(() => {
//     const { unsubscribe } = form.watch(async (values) => {
//       if (submittedOnce) {
//         await form.trigger();
//       }
//       setBiodataFormData({
//         ...biodataFormData,
//         addressInfoFormData: { ...values },
//       });
//     });
//     return unsubscribe;
//   }, [
//     submittedOnce,
//     setSubmittedOnce,
//     form,
//     biodataFormData,
//     setBiodataFormData,
//   ]);

//   const handleNextClick = async () => {
//     setSubmittedOnce(true);
//     const isValid = await form.trigger();
//     if (isValid) {
//       handleSave();
//     }
//   };

//   return (
//     <div className="flex flex-col items-center justify-center space-y-8">
//       <div className="text-3xl text-center text-black">ঠিকানা</div>
//       <Form {...form}>
//         <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
//           {fields.map((field, index) => (
//             <div
//               className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
//               key={field.id}
//             >
//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.type`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার ধরন:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="ঠিকানার ধরন" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {types.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                         <Button
//                           type="button"
//                           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
//                           onClick={() => remove(index)}
//                         >
//                           <Minus size={20} />
//                         </Button>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.location`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       অবস্থান ধরণ:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="অবস্থান ধরণ:" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {locations.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.state`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "স্টেট"
//                       : "স্থায়ী জেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         {label}:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.city`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "শহর"
//                       : "স্থায়ী উপজেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         <div>{label}:</div>
//                         <div className="text-xs">(যদি থাকে)</div>
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.detail`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার বিস্তারিত:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Input
//                             {...field}
//                             className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                             type="text"
//                             placeholder="ঠিকানার বিস্তারিত"
//                           />
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.country`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         দেশের নাম:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               id="emailMobileNumber"
//                               type="text"
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.cityzenshipStatus`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         সিটিজেনশিপ আছে?
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <RadioGroup
//                               className="w-full flex flex-wrap gap-0 min-h-12"
//                               onValueChange={field.onChange}
//                               value={field.value}
//                             >
//                               {citizenshipOptions.map((x) => (
//                                 <div
//                                   key={x.id}
//                                   className="w-1/3 flex items-center space-x-2"
//                                 >
//                                   <RadioGroupItem value={x.id} id={x.id} />
//                                   <Label htmlFor={x.id}>{x.title}</Label>
//                                 </div>
//                               ))}
//                             </RadioGroup>
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//             </div>
//           ))}

//           {/* Add New Address */}
//           <Button
//             type="button"
//             className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
//             onClick={() =>
//               append({
//                 type: "",
//                 location: "",
//                 state: "",
//                 city: "",
//                 detail: "",
//                 country: "",
//                 cityzenshipStatus: "",
//               })
//             }
//           >
//             <Plus size={20} /> <span>নতুন ঠিকানা যোগ করুন</span>
//           </Button>
//         </form>
//       </Form>

//       <div className="max-w-4xl w-full space-x-2 flex justify-center">
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={() => setCurrentStep(currentStep.prev)}
//         >
//           Previous
//         </Button>
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={handleNextClick}
//         >
//           Next
//         </Button>
//       </div>
//     </div>
//   );
// }

"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { citizenshipOptions, locations, types } from "@/lib/consts";
import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
import { addressInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function AddressInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState(false);

  const form = useForm<AddressInfoFormData>({
    resolver: zodResolver(addressInfoFormData),
    defaultValues: {
      addresses:
        biodataFormData?.addressInfoFormData?.addresses?.length > 0
          ? biodataFormData.addressInfoFormData.addresses
          : [
              {
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "addresses",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({ addressInfoFormData: values }); // Update Redux with form data
    });
    return unsubscribe;
  }, [submittedOnce, form, setBiodataFormData]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">ঠিকানা</h2>
      <Form {...form}>
        <form className="space-y-4">
          {fields.map((field, index) => (
            <div key={field.id} className="space-y-4 border p-4 rounded-md">
              <FormField
                control={form.control}
                name={`addresses.${index}.type`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার ধরন:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {types.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                    {fields.length > 1 && (
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        onClick={() => remove(index)}
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    )}
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.location`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>অবস্থান ধরণ:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {locations.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.state`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "স্টেট"
                      : "স্থায়ী জেলা";
                  return (
                    <FormItem>
                      <FormLabel>{label}:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.city`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "শহর"
                      : "স্থায়ী উপজেলা";
                  return (
                    <FormItem>
                      <FormLabel>
                        {label}:{" "}
                        <span className="text-muted-foreground">
                          (যদি থাকে)
                        </span>
                      </FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.detail`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার বিস্তারিত:</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="উল্লেখ করুন" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.country`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>দেশের নাম:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.cityzenshipStatus`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>সিটিজেনশিপ আছে?</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="নির্বাচন করুন" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {citizenshipOptions.map((x) => (
                            <SelectItem key={x.id} value={x.id}>
                              {x.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>
          ))}
          <Button
            type="button"
            variant="outline"
            onClick={() =>
              append({
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              })
            }
          >
            <Plus className="h-4 w-4 mr-2" /> নতুন ঠিকানা যোগ করুন
          </Button>
        </form>
      </Form>
      <div className="flex justify-between mt-4">
        <Button
          variant="outline"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\Breadcrumbs.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/Breadcrumbs.tsx

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
} from "@/components/ui/breadcrumb";
import { steps } from "../steps";

interface BreadcrumbsProps {
  currentStep: string;
  setCurrentStep: (step: string) => void;
}

export default function Breadcrumbs({
  currentStep,

  setCurrentStep,
}: BreadcrumbsProps) {
  return (
    <Breadcrumb className="max-w-6xl bg-[#f6f6f6] rounded-2xl p-2">
      <BreadcrumbList className="flex justify-center">
        {steps.map((step) => (
          <BreadcrumbItem
            key={step.key}
            className="text-[#004972] rounded-full"
          >
            {step.key === currentStep ? (
              <BreadcrumbPage className="bg-[#e25a6f] text-white px-3 py-2 rounded-full">
                {step.title}
              </BreadcrumbPage>
            ) : (
              <BreadcrumbLink
                asChild
                className="hover:text-[#e25a6f] px-3 py-2 cursor-pointer"
              >
                <button onClick={() => setCurrentStep(step.key)}>
                  {step.title}
                </button>
              </BreadcrumbLink>
            )}
          </BreadcrumbItem>
        ))}
      </BreadcrumbList>
    </Breadcrumb>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\EducationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/EducationInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { educationTypes, religiousEducation } from "@/lib/consts";
import { BiodataFormDataProps, EducationInfoFormData } from "@/lib/types";
import { educationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function EducationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<EducationInfoFormData>({
    resolver: zodResolver(educationInfoFormData),
    defaultValues: {
      type: biodataFormData?.educationInfoFormData?.type || "",
      highestDegree:
        biodataFormData?.educationInfoFormData?.highestDegree || "",
      degrees:
        biodataFormData?.educationInfoFormData?.degrees?.length > 0
          ? biodataFormData?.educationInfoFormData?.degrees.map((x) => {
              return {
                name: x.name,
                passYear: x.passYear,
                group: x.group,
                institute: x.institute,
              };
            })
          : [{ name: "", passYear: "", group: "", institute: "" }],
      religiousEducation:
        biodataFormData?.educationInfoFormData?.religiousEducation || [],
      detail: biodataFormData?.educationInfoFormData?.detail || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        educationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "degrees",
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">শিক্ষাগত যোগ্যতা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষার ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="শিক্ষার ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {educationTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="highestDegree"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার সর্বোচ্চ শিক্ষাগত ডিগ্রীর নাম:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="text-[#E25A6F]">
            মাধ্যমিক পর্যায় থেকে শুরু করে এখন পর্যন্ত যেসকল ডিগ্রী অর্জন করেছেন
            বা চলমান রয়েছে সেগুলো নিচে প্লাস বাটন চাপ দিয়ে ধাপে ধাপে যুক্ত করুন।
            কোনো ডিগ্রী না থাকলে খালি রাখুন।
          </div>
          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`degrees.${index}.name`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ডিগ্রীর নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center space-x-2">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="ডিগ্রীর নাম"
                          />
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.passYear`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পাশের সন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পাশের সন"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.group`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বিভাগ/বিষয়:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বিভাগ/বিষয়"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.institute`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      শিক্ষা প্রতিষ্ঠানের নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="শিক্ষা প্রতিষ্ঠানের নাম"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                name: "",
                passYear: "",
                group: "",
                institute: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ডিগ্রী যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="religiousEducation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value?.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষা সম্পর্কিত আরো কিছু জানাতে চাইলে নিচে লিখুন। অন্যথায়
                    খালি রাখুন।
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FamilyInfo.tsx

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { familyBackgrounds, familyTypes, siblingTypes } from "@/lib/consts";
import { BiodataFormDataProps, FamilyInfoFormData } from "@/lib/types";
import { familyInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function FamilyInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FamilyInfoFormData>({
    resolver: zodResolver(familyInfoFormData),
    defaultValues: {
      parentsAlive: biodataFormData?.familyInfoFormData?.parentsAlive || "",
      fatherOccupation:
        biodataFormData?.familyInfoFormData?.fatherOccupation || "",
      motherOccupation:
        biodataFormData?.familyInfoFormData?.motherOccupation || "",
      siblings: biodataFormData?.familyInfoFormData?.siblings || [],
      fatherSideDetail:
        biodataFormData?.familyInfoFormData?.fatherSideDetail || "",
      motherSideDetail:
        biodataFormData?.familyInfoFormData?.motherSideDetail || "",
      familyType: biodataFormData?.familyInfoFormData?.familyType || "",
      familyBackground:
        biodataFormData?.familyInfoFormData?.familyBackground || "",
      livingCondition:
        biodataFormData?.familyInfoFormData?.livingCondition || "",
      wealthDescription:
        biodataFormData?.familyInfoFormData?.wealthDescription || "",
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "siblings",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        familyInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পারিবারিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="parentsAlive"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পিতা-মাতা উভয়েই জীবিত আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনার পিতা-মাতা উভয়েই জীবিত আছেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`siblings.${index}.type`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ভাই/বোন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Select
                            value={field.value}
                            onValueChange={field.onChange}
                          >
                            <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                              <SelectValue placeholder="ভাই/বোন" />
                            </SelectTrigger>
                            <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                              {siblingTypes.map((x) => (
                                <SelectItem
                                  key={x.id}
                                  className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                                  value={x.id}
                                >
                                  {x.title}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.occupation`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পেশা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পেশা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.maritalStatus`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বৈবাহিক অবস্থা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বৈবাহিক অবস্থা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.children`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      সন্তান সংখ্যা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="সন্তান সংখ্যা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                type: "",
                occupation: "",
                maritalStatus: "",
                children: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ভাই/বোন যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="fatherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    চাচা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="চাচা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মামা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মামা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের অর্থনৈতিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyBackgrounds.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="livingCondition"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া
                    বাড়িতে?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="wealthDescription"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FinalWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FinalWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Label } from "@/components/ui/label";
import { BiodataFormDataProps, FinalWordsFormData } from "@/lib/types";
import { finalWordsFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function FinalWords({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FinalWordsFormData>({
    resolver: zodResolver(finalWordsFormData),
    defaultValues: {
      postApprovalOathTruthfulInfo:
        biodataFormData?.finalWordsFormData?.postApprovalOathTruthfulInfo ||
        false,
      postApprovalOathNoMisuse:
        biodataFormData?.finalWordsFormData?.postApprovalOathNoMisuse || false,
      postApprovalOathLegalResponsibility:
        biodataFormData?.finalWordsFormData
          ?.postApprovalOathLegalResponsibility || false,
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        finalWordsFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">শেষ কথা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-10 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl text-center">
            প্রতিশ্রুতি নামা
          </div>
          <div className="text-[#cd0000] space-y-3">
            <div className="flex items-center space-x-2">
              <Label htmlFor="preApprove1" className="text-[#6C0011] leading-5">
                আমি আল্লাহর নামে শপথ করছি যে,
              </Label>
            </div>
            <FormField
              control={form.control}
              name="postApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি বায়োডাটায় সকল তথ্য সত্য প্রদান করেছি।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathNoMisuse"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      সহজনিকাহ ম্যাট্রিমনি ওয়েবসাইটের কোনো তথ্য অসৎ কাজে ব্যবহার
                      করবো না।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      কোনো মিথ্যা তথ্য প্রদান করলে বা কোনো তথ্য অসৎ কাজে ব্যবহার
                      করে থাকলে, দুনিয়াবী যেকোনো আইনী জটিলতা এবং পরকালীন সকল
                      দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-ful">
        <Button className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]">
          Submit and Send For Approval
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\FirstWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FirstWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { FirstWordsFormData } from "@/lib/types";
import { firstWordsFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import { useForm } from "react-hook-form";

interface BiodataFormDataProps {
  biodataFormData: any;
  handleSave: () => void;
  currentStep: any;
  setCurrentStep: (step: string) => void;
}

export default function FirstWords({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FirstWordsFormData>({
    resolver: zodResolver(firstWordsFormData),
    defaultValues: {
      preApprovalAcceptTerms:
        biodataFormData?.firstWordsFormData?.preApprovalAcceptTerms || false,
      preApprovalOathTruthfulInfo:
        biodataFormData?.firstWordsFormData?.preApprovalOathTruthfulInfo ||
        false,
      preApprovalOathLegalResponsibility:
        biodataFormData?.firstWordsFormData
          ?.preApprovalOathLegalResponsibility || false,
    },
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      // Only update if we have valid values
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "firstWordsFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">
        বায়োডাটা তৈরির পূর্বে কিছু গুরুত্বপূর্ণ কথা
      </div>
      <div className="max-w-4xl w-full space-y-4 text-sm text-black">
        <div>
          আপনি যখন সহজনিকাহ ম্যাট্রিমনিতে জীবনসঙ্গী খুঁজতে এসেছেন, এর মানে হলো,
          আপনি বিবাহের একটি অত্যন্ত গুরুত্বপূর্ণ অধ্যায় অতিবাহিত করছেন। চাকরির
          জন্য যেমন সুন্দর করে গুছিয়ে একটি সিভি তৈরি করা হয়, ঠিক তেমনি
          জীবনসঙ্গী নির্বাচনের ক্ষেত্রে আরও বেশি সুন্দর করে এবং গুরুত্ব দিয়ে
          বায়োডাটা তৈরি করা উচিত। কেননা যিনি আপনার কাছে জীবনসঙ্গী হয়ে আসবেন,
          তিনি যেন এই বায়োডাটার মাধ্যমে আপনাকে সঠিকভাবে জানাতে এবং বুঝতে পারেন।
        </div>
        <div>
          তাই সময় নিয়ে, মনোযোগ দিয়ে আপনার বায়োডাটা গুছিয়ে তৈরি করুন। প্রতিটি
          প্রশ্নের উত্তর সত্য এবং সঠিকভাবে দিন এবং নিশ্চিত করুন যে, তথ্যগুলো
          আপনাকে অপরপক্ষের কাছে সঠিকভাবে উপস্থাপন করছে। সম্পূর্ণ বায়োডাটা
          তৈরিতে বেশ কিছুটা সময় লাগবে, কারণ এখানে অনেকগুলো প্রশ্ন আছে। কাজেই
          ধৈর্য্য সহকারে, বেশ কিছুটা সময় নিয়ে বায়োডাটা ফর্ম পূরণ করুন।
          (আনুমানিক ৩০ মিনিট)
        </div>
        <div>
          বি: দ্র:{" "}
          <span className="text-[#005A8B]">
            আপনার এই বায়োডাটা কেউ পছন্দ করলে এবং আপনার সাথে যোগাযোগ করতে চাইলে
            শুধুমাত্র আপনার অভিভাবকের যোগাযোগের মোবাইল নম্বর প্রদান করা হবে।
            একইভাবে আপনিও কোনো বায়োডাটার যোগাযোগ তথ্য নিতে চাইলে শুধুমাত্র
            অভিভাবকের যোগাযোগ নম্বর নিতে পারবেন।
          </span>
        </div>
      </div>
      <div className="max-w-4xl w-full bg-[#f6f6f6] py-6 px-12 space-y-4 text-black rounded-4xl">
        <div className="text-[#005A8B] text-xl">
          বায়োডাটা অ্যাপ্রুভ হওয়ার শর্তসমূহ:
        </div>
        <div className="text-sm">
          <ol className="list-decimal space-y-1">
            <li>
              অবশ্যই মুসলিম হতে হবে। সহজনিকাহ শুধুমাত্র প্রাক্টিসিং,
              নন-প্রাক্টিসিং সহ সকল ধরণের মুসলিমদের নিয়ে কাজ করে থাকে।
            </li>
            <li>
              ছেলেদের বয়স কমপক্ষে ২১ বছর এবং মেয়েদের ক্ষেত্রে ১৮ বছর হতে হবে।
            </li>
            <li>
              অভিভাবকের যোগাযোগ তথ্যের ঘরে পাত্র/পাত্রীর নিজের বা বন্ধুর মোবাইল
              নম্বর প্রদান করা যাবে না।
            </li>
            <li>
              বাংলা, ইংলিশ মিশ্রিত বাংলিশ ভাষায় লেখা যাবে না। পুরোটাই বাংলায়
              অথবা পুরোটাই ইংরেজিতে লিখতে হবে।
            </li>
            <li>
              নিজের শিক্ষা, পেশা এবং পারিবারিক তথ্যে বিস্তারিত উত্তর লিখতে হবে।
            </li>
            <li>
              তথ্য ভেরিফিকেশনের সময় বায়োডাটায় দেওয়া তথ্যের সাথে মিল থাকতে হবে।
            </li>
          </ol>
        </div>
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-6 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl">প্রতিশ্রুতি নামা:</div>
          <div className="text-[#cd0000] space-y-2">
            <FormField
              control={form.control}
              name="preApprovalAcceptTerms"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি শর্তসমূহ পড়েছি এবং তা মেনে চলার প্রতিশ্রুতি দিচ্ছি।
                    </FormLabel>

                    {/* <FormDescription>
                      Describe what this resume is for.
                    </FormDescription> */}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আল্লাহর নামে শপথ করছি যে, বায়োডাটায় সকল তথ্য সত্য
                      প্রদান করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আরও শপথ করছি যে, কোনো মিথ্যা তথ্য প্রদান করলে দুনিয়াবী
                      যেকোনো আইনী জটিলতা এবং পরকালীন সকল দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/GeneralInfo.tsx

"use client";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  bloodGroups,
  heights,
  maritalStatuses,
  nationalities,
  skinTones,
} from "@/lib/consts";
import { BiodataFormDataProps, GeneralInfoFormData } from "@/lib/types";
import { cn } from "@/lib/utils";
import { generalInfoFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { useState } from "react";
import { useForm } from "react-hook-form";

export default function GeneralInfo({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<GeneralInfoFormData>({
    resolver: zodResolver(generalInfoFormData),
    defaultValues: {
      dateOfBirth: biodataFormData?.generalInfoFormData?.dateOfBirth || "",
      maritalStatus: biodataFormData?.generalInfoFormData?.maritalStatus || "",
      skinTone: biodataFormData?.generalInfoFormData?.skinTone || "",
      height: biodataFormData?.generalInfoFormData?.height || "",
      weight: biodataFormData?.generalInfoFormData?.weight || "",
      bloodGroup: biodataFormData?.generalInfoFormData?.bloodGroup || "",
      nationality: biodataFormData?.generalInfoFormData?.nationality || "",
    },
  });

  // useEffect(() => {
  //   const { unsubscribe } = form.watch(async (values) => {
  //     if (submittedOnce) {
  //       await form.trigger();
  //     }
  //     if (Object.values(values).some((value) => value !== undefined)) {
  //       dispatch(
  //         setBiodataFormData({
  //           key: "generalInfoFormData",
  //           data: values,
  //         })
  //       );
  //     }
  //   });
  //   return unsubscribe;
  // }, [submittedOnce, form, dispatch]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "generalInfoFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  const maritalStatusOptions = maritalStatuses.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">সাধারণ তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="dateOfBirth"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জন্ম তারিখ:</div>
                    <div className="text-xs">(আসল, সার্টিফিকেট অনুযায়ী নয়)</div>
                  </FormLabel>
                  <FormControl>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          className={cn(
                            "p-6 w-full bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {field.value ? (
                            format(field.value, "PPP")
                          ) : (
                            <span>জন্ম তারিখ</span>
                          )}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          className="bg-[#005889]"
                          classNames={{
                            day_selected: "bg-[#E25A6F]",
                            day_today: "bg-white text-black",
                          }}
                          mode="single"
                          selected={
                            field.value ? new Date(field.value) : undefined
                          }
                          onSelect={(date) =>
                            field.onChange(date?.toISOString())
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="বৈবাহিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {maritalStatusOptions.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="গাত্রবর্ণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {skinTones.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="weight"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ওজন:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ওজন"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="bloodGroup"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    রক্তের গ্রুপ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="রক্তের গ্রুপ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {bloodGroups.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="nationality"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জাতীয়তা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="জাতীয়তা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {nationalities.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/MarriageInfo.tsx
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import { afterMarriageJobs, afterMarriageStudies } from "@/lib/consts";
import { BiodataFormDataProps, MarriageInfoFormData } from "@/lib/types";
import { marriageInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function MarriageInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<MarriageInfoFormData>({
    resolver: zodResolver(marriageInfoFormData),
    defaultValues: {
      guardianApproval:
        biodataFormData?.marriageInfoFormData?.guardianApproval || "",
      continueStudy: biodataFormData?.marriageInfoFormData?.continueStudy || "",
      careerPlan: biodataFormData?.marriageInfoFormData?.careerPlan || "",
      residence: biodataFormData?.marriageInfoFormData?.residence || "",
      arrangeHijab: biodataFormData?.marriageInfoFormData?.arrangeHijab || "",
      dowryExpectation:
        biodataFormData?.marriageInfoFormData?.dowryExpectation || "",
      allowShowingPhotoOnline:
        biodataFormData?.marriageInfoFormData?.allowShowingPhotoOnline || "",
      additionalMarriageInfo:
        biodataFormData?.marriageInfoFormData?.additionalMarriageInfo || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        marriageInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const afterMarriageStudyOptions = afterMarriageStudies.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  const afterMarriageJobOptions = afterMarriageJobs.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">বিয়ে সংক্রান্ত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="guardianApproval"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
                    <div className="text-xs">
                      (যদি অভিভাবক রাজি নাও থাকে তাহলে এর কারণ লিখুন এবং
                      সেক্ষেত্রে আপনি কেন বিবাহে আগাচ্ছেন সেটা বিস্তারিত লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="continueStudy"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?"
                      : "বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageStudyOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="careerPlan"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?"
                      : "আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageJobOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="residence"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?"
                      : "যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="arrangeHijab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে পারবেন?"
                      : "বাড়িতে বা বাহিরে পর্দা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="dowryExpectation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক / উপহার / অর্থ আশা করবেন কিনা?"
                      : "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রপক্ষকে যৌতুক / উপহার / অর্থ দিতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="allowShowingPhotoOnline"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "পাত্রীপক্ষ"
                      : "পাত্রপক্ষ"}{" "}
                    অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="additionalMarriageInfo"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>
                      বিয়ে সংক্রান্ত আরো কিছু জানাতে চাইলে এখানে লিখুন: অন্যথায়
                      খালি রাখুন।
                    </div>
                    <div className="text-xs">
                      (যেমন: পাত্র-পাত্রী সাক্ষাতের ব্যাপারে, অভিভাবকদের মতামত
                      নিয়ে, কেমন বিয়ে চান, বিয়ের পর কোন কোন বিষয় ছাড় দিতে রাজি
                      নন ইত্যাদি কিছু জানানোর থাকলে লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\OccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/OccupationInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { occupationsList } from "@/lib/consts";
import { BiodataFormDataProps, OccupationInfoFormData } from "@/lib/types";
import { occupationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function OccupationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<OccupationInfoFormData>({
    resolver: zodResolver(occupationInfoFormData),
    defaultValues: {
      occupations: biodataFormData?.occupationInfoFormData?.occupations || [],
      detail: biodataFormData?.occupationInfoFormData?.detail || "",
      monthlyIncome:
        biodataFormData?.occupationInfoFormData?.monthlyIncome || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        occupationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পেশা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="occupations"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পেশা নিয়ে বিস্তারিত লিখুন:</div>
                    <div className="text-xs">
                      (অর্থাৎ আপনার কর্মস্থল কোথায়, কি ধরণের কাজে দায়িত্বরত আছেন
                      বা পদবি কি, এগুলো নিয়ে বিস্তারিত লিখুন। পেশা না থাকলে খালি
                      রাখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="monthlyIncome"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাসিক আয়:</div>
                    <div className="text-xs">(পেশা না থাকলে খালি রাখুন।)</div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাসিক আয়"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PersonalInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { characteristics, specialCatagories } from "@/lib/consts";
import { BiodataFormDataProps, PersonalInfoFormData } from "@/lib/types";
import { personalInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function PersonalInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PersonalInfoFormData>({
    resolver: zodResolver(personalInfoFormData),
    defaultValues: {
      beardStatus: biodataFormData?.personalInfoFormData?.beardStatus || "",
      preferredOutfit:
        biodataFormData?.personalInfoFormData?.preferredOutfit || "",
      entertainmentPreferences:
        biodataFormData?.personalInfoFormData?.entertainmentPreferences || "",
      healthConditions:
        biodataFormData?.personalInfoFormData?.healthConditions || "",
      personalTraits:
        biodataFormData?.personalInfoFormData?.personalTraits || [],
      genderEqualityView:
        biodataFormData?.personalInfoFormData?.genderEqualityView || "",
      lgbtqOpinion: biodataFormData?.personalInfoFormData?.lgbtqOpinion || "",
      specialConditions:
        biodataFormData?.personalInfoFormData?.specialConditions || [],
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        personalInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const specialCatagoryOptions = specialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ব্যক্তিগত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="beardStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "আপনি দাড়ি রেখেছেন কি?"
                      : "আপনার কি দাড়ি পছন্দ?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="preferredOutfit"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পড়তে পছন্দ করেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="entertainmentPreferences"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="healthConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মানসিক বা শারীরিক কোনো রোগ আছে কি? থাকলে বিস্তারিত লিখুন।
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="personalTraits"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নিজের কিছু গুণাবলী চিহ্নিত করুন:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {characteristics.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="genderEqualityView"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lgbtqOpinion"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {specialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PrimaryInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { biodataTypes } from "@/lib/consts";
import { BiodataFormDataProps, PrimaryInfoFormData } from "@/lib/types";
import { primaryInfoFormData } from "@/lib/validations";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function PrimaryInfo({
  biodataFormData,
  setBiodataFormData, // Added missing prop
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PrimaryInfoFormData>({
    resolver: zodResolver(primaryInfoFormData),
    defaultValues: {
      biodataType: biodataFormData?.primaryInfoFormData?.biodataType || "",
      biodataFor: biodataFormData?.primaryInfoFormData?.biodataFor || "",
      fullName: biodataFormData?.primaryInfoFormData?.fullName || "",
      fatherName: biodataFormData?.primaryInfoFormData?.fatherName || "",
      motherName: biodataFormData?.primaryInfoFormData?.motherName || "",
      email: biodataFormData?.primaryInfoFormData?.email || "",
      phoneNumber: biodataFormData?.primaryInfoFormData?.phoneNumber || "",
      guardianContacts:
        Array.isArray(biodataFormData?.primaryInfoFormData?.guardianContacts) &&
        biodataFormData.primaryInfoFormData.guardianContacts.length >= 2
          ? // Create a deep copy to avoid immutability issues
            biodataFormData.primaryInfoFormData.guardianContacts.map(
              (contact) => ({
                relation: contact.relation || "",
                fullName: contact.fullName || "",
                phoneNumber: contact.phoneNumber || "",
              })
            )
          : [
              { relation: "", fullName: "", phoneNumber: "" },
              { relation: "", fullName: "", phoneNumber: "" },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "guardianContacts",
  });

  useEffect(() => {
    const subscription = form.watch((values) => {
      if (submittedOnce) {
        form.trigger(); // Trigger validation on change after submission attempt
      }
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: values as PrimaryInfoFormData,
      });
    });
    return () => subscription.unsubscribe();
  }, [form, submittedOnce, setBiodataFormData, biodataFormData]);

  const handleAppend = () => {
    append({ relation: "", fullName: "", phoneNumber: "" });
  };

  const handleRemove = (index: number) => {
    if (fields.length > 2) {
      remove(index);
    } else {
      form.setError(`guardianContacts`, {
        type: "manual",
        message: "কমপক্ষে ২ জন অভিভাবকের তথ্য প্রয়োজন।",
      });
    }
  };

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: formValues,
      });
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রাথমিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="biodataType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বায়োডাটার ধরন:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="বায়োডাটার ধরন" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {biodataTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="biodataFor"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>বায়োডাটা কার জন্য তৈরী করছেন?</div>
                    <div className="text-xs">
                      (যেমনঃ নিজের জন্য/বোনের জন্য/বন্ধুর জন্য/ভাগ্নির জন্য
                      ইত্যাদি)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fullName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
                    <div className="text-xs">
                      (NID কার্ডে যে নাম আছে। নাম বায়োডাটায় প্রকাশ করা হবে না।
                      শুধুমাত্র ভেরিফিকেশন ও অপরপক্ষকে যোগাযোগ তথ্য প্রদানের
                      ক্ষেত্রে প্রয়োজন হবে।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="সম্পূর্ণ নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>ইমেইল আইডি:</div>
                    <div className="text-xs">
                      (পাত্র/পাত্রীর সাথে আমাদের যোগাযোগের জন্য প্রয়োজন হবে।
                      অপরপক্ষ যোগাযোগ তথ্য নিতে চাইলে যুক্তিসঙ্গত কারণ বা
                      প্রয়োজন ছাড়া পাঠানো হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ইমেইল আইডি"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phoneNumber"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর মোবাইল নম্বর:</div>
                    <div className="text-xs">
                      (মোবাইল নম্বর শুধুমাত্র ভেরিফিকেশনের জন্য আমাদের কাছে
                      থাকবে। কাউকে প্রদান করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="tel"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মোবাইল নম্বর"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="flex flex-col space-y-2">
            <FormLabel className="flex items-center justify-between space-x-8">
              <div className="text-md space-y-1 leading-4.5">
                <div>পাত্র/পাত্রীর অভিভাবকের মোবাইল নম্বর:</div>
                <div className="text-xs">
                  <div>কমপক্ষে ২ টি সচল নম্বর প্রদান করতে হবে।</div>
                </div>
              </div>
              <Button
                type="button"
                className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
                onClick={handleAppend}
              >
                <Plus size={20} /> <span>নতুন নম্বর যোগ করুন</span>
              </Button>
            </FormLabel>

            <div className="space-y-2">
              {fields.map((field, index) => (
                <div className="flex space-x-2 items-center" key={field.id}>
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.relation`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="সম্পর্ক (যেমন: বাবা, মা)"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.fullName`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের নাম"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.phoneNumber`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            type="tel"
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের মোবাইল নম্বর"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {fields.length > 2 && (
                    <Button
                      type="button"
                      className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                      onClick={() => handleRemove(index)}
                    >
                      <Minus size={20} />
                    </Button>
                  )}
                </div>
              ))}
            </div>
            {form.formState.errors.guardianContacts && (
              <p className="text-red-500 text-sm">
                {form.formState.errors.guardianContacts.message}
              </p>
            )}
          </div>
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
          disabled={!currentStep.prev}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\ProfilePic.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ProfilePic.tsx

"use client";

import female1 from "@/assets/images/female-1.svg";
import female2 from "@/assets/images/female-2.svg";
import female3 from "@/assets/images/female-3.svg";
import female4 from "@/assets/images/female-4.svg";
import female5 from "@/assets/images/female-5.svg";
import female6 from "@/assets/images/female-6.svg";
import male1 from "@/assets/images/male-1.svg";
import male2 from "@/assets/images/male-2.svg";
import male3 from "@/assets/images/male-3.svg";
import male4 from "@/assets/images/male-4.svg";
import male5 from "@/assets/images/male-5.svg";
import male6 from "@/assets/images/male-6.svg";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { BiodataFormDataProps, ProfilePicFormData } from "@/lib/types";
import { profilePicFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { CheckCircle } from "lucide-react";
import Image from "next/image";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ProfilePic({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ProfilePicFormData>({
    resolver: zodResolver(profilePicFormData),
    defaultValues: {
      photoId: biodataFormData?.profilePicFormData?.photoId || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        profilePicFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const images =
    biodataFormData?.primaryInfoFormData?.biodataType === "1"
      ? [male1, male2, male3, male4, male5, male6]
      : [female1, female2, female3, female4, female5, female6];

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রোফাইল পিকচার</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="photoId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  আপনার সাথে মানানসই বা সামঞ্জস্যপূর্ণ একটি প্রোফাইল পিকচার
                  বাছাই করুন:
                </FormLabel>
                <FormControl>
                  <div className="flex flex-wrap">
                    {images.map((image, index) => (
                      <div
                        key={index}
                        className="w-1/3 mb-4 flex items-center justify-center relative"
                      >
                        <div
                          className={`border p-12 rounded-3xl cursor-pointer transition-all relative ${
                            form.getValues().photoId === image.src
                              ? "border-[#E25A6F] ring-2 ring-[#E25A6F]"
                              : "border-gray-300"
                          } `}
                          onClick={() => {
                            field.onChange(image.src);
                          }}
                        >
                          <Image
                            src={image}
                            alt={`Profile${index + 1}`}
                            width={120}
                            height={40}
                            priority
                          />
                          {form.getValues().photoId === image.src && (
                            <CheckCircle className="absolute top-4 right-4 text-[#E25A6F]" />
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ReligiousInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { madhhabs, religiousIdeologies } from "@/lib/consts";
import { BiodataFormDataProps, ReligiousInfoFormData } from "@/lib/types";
import { religiousInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ReligiousInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ReligiousInfoFormData>({
    resolver: zodResolver(religiousInfoFormData),
    defaultValues: {
      type: biodataFormData?.religiousInfoFormData?.type || "",
      ideology: biodataFormData?.religiousInfoFormData?.ideology || "",
      madhab: biodataFormData?.religiousInfoFormData?.madhab || "",
      praysFiveTimes:
        biodataFormData?.religiousInfoFormData?.praysFiveTimes || "",
      hasQazaPrayers:
        biodataFormData?.religiousInfoFormData?.hasQazaPrayers || "",
      canReciteQuranProperly:
        biodataFormData?.religiousInfoFormData?.canReciteQuranProperly || "",
      avoidsHaramIncome:
        biodataFormData?.religiousInfoFormData?.avoidsHaramIncome || "",
      modestDressing:
        biodataFormData?.religiousInfoFormData?.modestDressing || "",
      followsMahramRules:
        biodataFormData?.religiousInfoFormData?.followsMahramRules || "",
      beliefAboutPirMurshidAndMazar:
        biodataFormData?.religiousInfoFormData?.beliefAboutPirMurshidAndMazar ||
        "",
      practicingSince:
        biodataFormData?.religiousInfoFormData?.practicingSince || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        religiousInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ধর্মীয় লাইফস্টাইল</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormControl>
                    <RadioGroup
                      className="flex"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="1" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              সেরকমভাবে মেনে চলা হয় না
                            </div>
                            <div>(জেনারেল/নন-প্রাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>
                            ১. অনিয়মিতভাবে ৫ ওয়াক্ত বা এর কম সালাত আদায় করা হয়।
                          </div>
                          <div>
                            ২. সকল ক্ষেত্রে হালাল-হারাম বাছাই করা হয় না।
                          </div>
                          <div>৩. মাহরাম-নন মাহরাম মেইনটেইন করা হয় না।</div>
                          <div>
                            ৪. হারাম উপার্জন, ব্যাংকিং সুদ, ফ্রি-মিক্সিং,
                            গান-বাজনা থেকে বিরত থাকা হয় না।
                          </div>
                          <div>
                            ৫. পরিপূর্ন ভাবে ইসলামের বিধিবিধান পালনে তেমন চেষ্টা
                            বা আগ্রহ নেই।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="2" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black">
                              পরিপূর্ণভাবে মেনে চলা হয় না কিন্তু প্রবল ইচ্ছা আছে
                              এবং চেষ্টা করছি
                            </div>
                            <div>(প্রাক্টিসিংয়ের চেষ্টায় আছি)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>
                            ২. হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত থাকছেন।
                          </div>
                          <div>
                            ৩. কিন্তু গান-বাজনা থেকে এখনো দূরে থাকা হয় না।
                          </div>
                          <div>
                            ৪. সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট বা পর্দা এখনো
                            মেনে চলতে পারছেন না।
                          </div>
                          <div>
                            ৫. এর জন্য প্রবল অনুশোচনা কাজ করে এবং পরিপূর্ন ভাবে
                            ইসলামের বিধিবিধান পালনের চেষ্টা করা হয়।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="3" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              জি পরিপূর্ণভাবে মেনে চলি এবং সর্বদা চেষ্টায় থাকি
                            </div>
                            <div>(পূর্ণ ধার্মিক/ প্র্যাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. বিশুদ্ধ ঈমান-আকিদা পোষণ করছেন।</div>
                          <div>২. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>৩. পরিপূর্ণ হালাল উপার্জন করছেন ।</div>
                          <div>
                            ৪. ফরজ, ওয়াজিব ইবাদতের পাশাপাশি সুন্নাত, নফল আমল
                            করার চেষ্টা করেন।
                          </div>
                          <div>৫. গান-বাজনা, নাটক-সিনেমা থেকে দূরে থাকছেন।</div>
                          <div>
                            ৬. পুরুষেরা সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট,
                            ইসলামিক পোশাক মেনে চলেন, নারীরা নিকাব সহ পর্দা
                            করছেন।
                          </div>
                          <div>
                            ৭. বাহিরে পর্দা মেনে চলা অর্থাৎ বেগানা নারী-পুরুষের
                            ক্ষেত্রে চক্ষু অবনত রাখছেন।
                          </div>
                          <div>
                            ৮. মাহরাম-নন মাহরাম মেইনটেইন করেন এবং ফ্রী মিক্সিং
                            এড়িয়ে চলেন।
                          </div>
                          <div>
                            ৯. সকল প্রকার হারাম ও কবীরা গুনাহ থেকে বেঁচে থাকার
                            সর্বাত্মক প্রচেষ্টায় থাকেন।
                          </div>
                          <div>
                            ১০. ইসলাম বিরোধী সকল কাজকে অপছন্দ করেন এবং জীবনটাকে
                            পরিপূর্ণভাবে কোরআন-সুন্নাহ মোতাবেক সাজাতে থাকেন।
                          </div>
                        </Label>
                      </div>
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="ideology"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় কোন মতাদর্শ মেনে চলেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {religiousIdeologies.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="madhab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কোন মাজহাব / মানহাজ অনুসরণ করেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {madhhabs.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="praysFiveTimes"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="hasQazaPrayers"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      আপনার কি নামাজ কাযা হয়?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="canReciteQuranProperly"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="avoidsHaramIncome"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <FormField
              control={form.control}
              name="modestDressing"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                        ? "টাখনুর উপরে কাপড় পরেন কিনা?"
                        : "আপনি কি নিকাব সহ পর্দা করেন?"}
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <>
              <FormField
                control={form.control}
                name="followsMahramRules"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="beliefAboutPirMurshidAndMazar"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="practicingSince"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু
                        করেছেন?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\biodataFormComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/SpousePreferenceInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  familyBackgrounds,
  heights,
  maritalStatuses,
  occupationsList,
  religiousEducation,
  religiousLifestyle,
  secondMarriageOptions,
  skinTones,
  spouseLocationOptions,
  spouseSpecialCatagories,
} from "@/lib/consts";
import {
  BiodataFormDataProps,
  SpousePreferenceInfoFormData,
} from "@/lib/types";
import { spousePreferenceInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function SpousePreferenceInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<SpousePreferenceInfoFormData>({
    resolver: zodResolver(spousePreferenceInfoFormData),
    defaultValues: {
      age: biodataFormData?.spousePreferenceInfoFormData?.age || "",
      skinTone: biodataFormData?.spousePreferenceInfoFormData?.skinTone || [],
      height: biodataFormData?.spousePreferenceInfoFormData?.height || "",
      educationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.educationalQualification || "",
      religiousEducationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.religiousEducationalQualification || [],
      address: biodataFormData?.spousePreferenceInfoFormData?.address || "",
      maritalStatus:
        biodataFormData?.spousePreferenceInfoFormData?.maritalStatus || [],
      specialCategory:
        biodataFormData?.spousePreferenceInfoFormData?.specialCategory || [],
      religiousType:
        biodataFormData?.spousePreferenceInfoFormData?.religiousType || [],
      occupation:
        biodataFormData?.spousePreferenceInfoFormData?.occupation || [],
      familyBackground:
        biodataFormData?.spousePreferenceInfoFormData?.familyBackground || [],
      secondMarriage:
        biodataFormData?.spousePreferenceInfoFormData?.secondMarriage || "",
      location: biodataFormData?.spousePreferenceInfoFormData?.location || "",
      qualities: biodataFormData?.spousePreferenceInfoFormData?.qualities || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        spousePreferenceInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const spouseSpecialCatagoryOptions = spouseSpecialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">
        যেমন জীবনসঙ্গী আশা করেন
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="age"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত বয়স:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {skinTones.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="কাঙ্খিত উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="educationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousEducationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="address"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত ঠিকানা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {maritalStatuses.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialCategory"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {spouseSpecialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় লাইফস্টাইল:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousLifestyle.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="occupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {familyBackgrounds.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          {biodataFormData?.primaryInfoFormData?.biodataType === "GROOM" && (
            <FormField
              control={form.control}
              name="secondMarriage"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী
                      আছেন?
                    </FormLabel>
                    <FormControl>
                      <RadioGroup
                        className="w-full flex flex-wrap gap-0"
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        {secondMarriageOptions.map((x) => (
                          <div
                            key={x.id}
                            className="w-1/4 flex items-center space-x-2 mb-2"
                          >
                            <RadioGroupItem value={x.id} id={x.id} />
                            <Label htmlFor={x.id}>{x.title}</Label>
                          </div>
                        ))}
                      </RadioGroup>
                    </FormControl>
                  </div>

                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {spouseLocationOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="qualities"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:</div>
                    <div className="text-xs">
                      (অর্থাৎ কাঙ্খিত জীবনসঙ্গীর স্বভাব, দ্বীনদারিতা, চারিত্রীক
                      গুণাবলী কেমন আশা করেন। বিশেষ কোনো কার্যক্রম বা চাওয়া থাকলে
                      জানাতে পারেন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\page.tsx
// --------------------
// File: src/app/(main)/biodata-editor/page.tsx
import { Metadata } from "next";
import BiodataEditor from "./BiodataEditor";

interface BiodataEditorPageProps {
  searchParams: Promise<{ biodataId?: string }>;
}

export const metadata: Metadata = {
  title: "Design your biodata",
};

export default async function BiodataEditorPage({
  searchParams,
}: BiodataEditorPageProps) {
  const { biodataId } = await searchParams;

  //TO:DO get userId from token

  const biodataToEdit = biodataId
    ? null // get from db
    : null;

  return (
    <main className="flex-grow">
      <div className="text-[#1f4f69] flex flex-col items-center justify-center mt-4 mb-12">
        <BiodataEditor biodataToEdit={biodataToEdit} />
      </div>
    </main>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\steps.ts
// --------------------
// File: src/app/(main)/biodata-editor/steps.ts
// import { BiodataFormDataProps } from "@/lib/types";
// import AddressInfo from "./biodataFormComponents/AddressInfo";
// import EducationInfo from "./biodataFormComponents/EducationInfo";
// import FamilyInfo from "./biodataFormComponents/FamilyInfo";
// import FinalWords from "./biodataFormComponents/FinalWords";
// import FirstWords from "./biodataFormComponents/FirstWords";
// import GeneralInfo from "./biodataFormComponents/GeneralInfo";
// import MarriageInfo from "./biodataFormComponents/MarriageInfo";
// import OccupationInfo from "./biodataFormComponents/OccupationInfo";
// import PersonalInfo from "./biodataFormComponents/PersonalInfo";
// import PrimaryInfo from "./biodataFormComponents/PrimaryInfo";
// import ProfilePic from "./biodataFormComponents/ProfilePic";
// import ReligiousInfo from "./biodataFormComponents/ReligiousInfo";
// import SpousePreferenceInfo from "./biodataFormComponents/SpousePreferenceInfo";

// export interface BiodataFormStep {
//   title: string;
//   component: React.ComponentType<BiodataFormDataProps>;
//   key: string;
//   disabled: boolean;
//   prev?: string;
//   next?: string;
// }

// export const steps: BiodataFormStep[] = [
//   {
//     title: "কিছু কথা",
//     component: FirstWords,
//     key: "first-words",
//     disabled: true,
//     next: "primary-info",
//   },
//   {
//     title: "প্রাথমিক তথ্য",
//     component: PrimaryInfo,
//     key: "primary-info",
//     disabled: true,
//     prev: "first-words",
//     next: "general-info",
//   },
//   {
//     title: "সাধারণ তথ্য",
//     component: GeneralInfo,
//     key: "general-info",
//     disabled: true,
//     prev: "primary-info",
//     next: "address-info",
//   },
//   {
//     title: "ঠিকানা",
//     component: AddressInfo,
//     key: "address-info",
//     disabled: true,
//     prev: "general-info",
//     next: "education-info",
//   },
//   {
//     title: "শিক্ষাগত যোগ্যতা",
//     component: EducationInfo,
//     key: "education-info",
//     disabled: true,
//     prev: "address-info",
//     next: "occupation-info",
//   },
//   {
//     title: "পেশা",
//     component: OccupationInfo,
//     key: "occupation-info",
//     disabled: true,
//     prev: "education-info",
//     next: "family-info",
//   },
//   {
//     title: "পারিবারিক তথ্য",
//     component: FamilyInfo,
//     key: "family-info",
//     disabled: true,
//     prev: "occupation-info",
//     next: "religious-info",
//   },
//   {
//     title: "ধর্মীয় লাইফস্টাইল",
//     component: ReligiousInfo,
//     key: "religious-info",
//     disabled: true,
//     prev: "family-info",
//     next: "personal-info",
//   },
//   {
//     title: "ব্যক্তিগত তথ্য",
//     component: PersonalInfo,
//     key: "personal-info",
//     disabled: true,
//     prev: "religious-info",
//     next: "marital-info",
//   },
//   {
//     title: "বিয়ে সংক্রান্ত তথ্য",
//     component: MarriageInfo,
//     key: "marital-info",
//     disabled: true,
//     prev: "personal-info",
//     next: "spouse-preference-info",
//   },
//   {
//     title: "যেমন জীবনসঙ্গী আশা করেন",
//     component: SpousePreferenceInfo,
//     key: "spouse-preference-info",
//     disabled: true,
//     prev: "marital-info",
//     next: "profile-pic",
//   },
//   {
//     title: "প্রোফাইল পিকচার",
//     component: ProfilePic,
//     key: "profile-pic",
//     disabled: true,
//     prev: "spouse-preference-info",
//     next: "final-words",
//   },
//   {
//     title: "শেষ কথা",
//     component: FinalWords,
//     key: "final-words",
//     disabled: true,
//     prev: "profile-pic",
//   },
// ];
import AddressInfo from "./biodataFormComponents/AddressInfo";
import EducationInfo from "./biodataFormComponents/EducationInfo";
import FamilyInfo from "./biodataFormComponents/FamilyInfo";
import FinalWords from "./biodataFormComponents/FinalWords";
import FirstWords from "./biodataFormComponents/FirstWords";
import GeneralInfo from "./biodataFormComponents/GeneralInfo";
import MarriageInfo from "./biodataFormComponents/MarriageInfo";
import OccupationInfo from "./biodataFormComponents/OccupationInfo";
import PersonalInfo from "./biodataFormComponents/PersonalInfo";
import PrimaryInfo from "./biodataFormComponents/PrimaryInfo";
import ProfilePic from "./biodataFormComponents/ProfilePic";
import ReligiousInfo from "./biodataFormComponents/ReligiousInfo";
import SpousePreferenceInfo from "./biodataFormComponents/SpousePreferenceInfo";

export interface BiodataFormStep {
  key: string;
  title: string;
  component: React.ComponentType<any>;
  prev: string;
  next: string;
}

export const steps: BiodataFormStep[] = [
  {
    key: "first-words",
    title: "প্রাথমিক শপথ",
    component: FirstWords,
    prev: "",
    next: "primary-info",
  },
  {
    key: "primary-info",
    title: "প্রাথমিক তথ্য",
    component: PrimaryInfo,
    prev: "first-words",
    next: "general-info",
  },
  {
    key: "general-info",
    title: "সাধারণ তথ্য",
    component: GeneralInfo,
    prev: "primary-info",
    next: "address-info",
  },
  {
    key: "address-info",
    title: "ঠিকানা",
    component: AddressInfo,
    prev: "general-info",
    next: "education-info",
  },
  {
    key: "education-info",
    title: "শিক্ষাগত তথ্য",
    component: EducationInfo,
    prev: "address-info",
    next: "occupation-info",
  },
  {
    key: "occupation-info",
    title: "পেশাগত তথ্য",
    component: OccupationInfo,
    prev: "education-info",
    next: "family-info",
  },
  {
    key: "family-info",
    title: "পারিবারিক তথ্য",
    component: FamilyInfo,
    prev: "occupation-info",
    next: "religious-info",
  },
  {
    key: "religious-info",
    title: "ধর্মীয় তথ্য",
    component: ReligiousInfo,
    prev: "family-info",
    next: "personal-info",
  },
  {
    key: "personal-info",
    title: "ব্যক্তিগত তথ্য",
    component: PersonalInfo,
    prev: "religious-info",
    next: "marriage-info",
  },
  {
    key: "marriage-info",
    title: "বিবাহ সংক্রান্ত তথ্য",
    component: MarriageInfo,
    prev: "personal-info",
    next: "spouse-preference-info",
  },
  {
    key: "spouse-preference-info",
    title: "জীবনসঙ্গীর পছন্দ",
    component: SpousePreferenceInfo,
    prev: "marriage-info",
    next: "profile-pic",
  },
  {
    key: "profile-pic",
    title: "প্রোফাইল ছবি",
    component: ProfilePic,
    prev: "spouse-preference-info",
    next: "final-words",
  },
  {
    key: "final-words",
    title: "শেষ শপথ",
    component: FinalWords,
    prev: "profile-pic",
    next: "",
  },
];


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/AddressInfo.tsx

"use client";

// import { Button } from "@/components/ui/button";
// import {
//   Form,
//   FormControl,
//   FormField,
//   FormItem,
//   FormLabel,
//   FormMessage,
// } from "@/components/ui/form";
// import { Input } from "@/components/ui/input";
// import { Label } from "@/components/ui/label";
// import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
// import {
//   Select,
//   SelectContent,
//   SelectItem,
//   SelectTrigger,
//   SelectValue,
// } from "@/components/ui/select";
// import { citizenshipOptions, locations, types } from "@/lib/consts";
// import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
// import { addressInfoFormData } from "@/lib/validations";
// import { zodResolver } from "@hookform/resolvers/zod";
// import { Minus, Plus } from "lucide-react";
// import { useEffect, useState } from "react";
// import { useFieldArray, useForm } from "react-hook-form";

// export default function AddressInfo({
//   biodataFormData,
//   setBiodataFormData,
//   handleSave,
//   currentStep,
//   setCurrentStep,
// }: BiodataFormDataProps) {
//   const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

//   const form = useForm<AddressInfoFormData>({
//     resolver: zodResolver(addressInfoFormData),
//     defaultValues: {
//       addresses: biodataFormData?.addressInfoFormData?.addresses || [
//         {
//           type: "",
//           location: "",
//           state: "",
//           city: "",
//           detail: "",
//           country: "",
//           cityzenshipStatus: "",
//         },
//       ],
//     },
//   });

//   const { fields, append, remove } = useFieldArray({
//     control: form.control,
//     name: "addresses",
//   });

//   useEffect(() => {
//     const { unsubscribe } = form.watch(async (values) => {
//       if (submittedOnce) {
//         await form.trigger();
//       }
//       setBiodataFormData({
//         ...biodataFormData,
//         addressInfoFormData: { ...values },
//       });
//     });
//     return unsubscribe;
//   }, [
//     submittedOnce,
//     setSubmittedOnce,
//     form,
//     biodataFormData,
//     setBiodataFormData,
//   ]);

//   const handleNextClick = async () => {
//     setSubmittedOnce(true);
//     const isValid = await form.trigger();
//     if (isValid) {
//       handleSave();
//     }
//   };

//   return (
//     <div className="flex flex-col items-center justify-center space-y-8">
//       <div className="text-3xl text-center text-black">ঠিকানা</div>
//       <Form {...form}>
//         <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
//           {fields.map((field, index) => (
//             <div
//               className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
//               key={field.id}
//             >
//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.type`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার ধরন:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="ঠিকানার ধরন" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {types.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                         <Button
//                           type="button"
//                           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
//                           onClick={() => remove(index)}
//                         >
//                           <Minus size={20} />
//                         </Button>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.location`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       অবস্থান ধরণ:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center">
//                         <FormControl>
//                           <Select
//                             value={field.value}
//                             onValueChange={field.onChange}
//                           >
//                             <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
//                               <SelectValue placeholder="অবস্থান ধরণ:" />
//                             </SelectTrigger>
//                             <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
//                               {locations.map((x) => (
//                                 <SelectItem
//                                   key={x.id}
//                                   className="focus:bg-transparent focus:text-[#E25A6F] p-2"
//                                   value={x.id}
//                                 >
//                                   {x.title}
//                                 </SelectItem>
//                               ))}
//                             </SelectContent>
//                           </Select>
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.state`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "স্টেট"
//                       : "স্থায়ী জেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         {label}:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.city`}
//                 render={({ field }) => {
//                   const label =
//                     form.getValues(`addresses.${index}.location`) === "2"
//                       ? "শহর"
//                       : "স্থায়ী উপজেলা";
//                   return (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         <div>{label}:</div>
//                         <div className="text-xs">(যদি থাকে)</div>
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               {...field}
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               type="text"
//                               placeholder={label}
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   );
//                 }}
//               />

//               <FormField
//                 control={form.control}
//                 name={`addresses.${index}.detail`}
//                 render={({ field }) => (
//                   <FormItem className="w-full">
//                     <FormLabel className="text-md space-y-2 leading-4.5">
//                       ঠিকানার বিস্তারিত:
//                     </FormLabel>
//                     <div className="flex flex-col space-y-2">
//                       <div className="flex items-center space-x-2">
//                         <FormControl>
//                           <Input
//                             {...field}
//                             className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                             type="text"
//                             placeholder="ঠিকানার বিস্তারিত"
//                           />
//                         </FormControl>
//                       </div>
//                       <FormMessage />
//                     </div>
//                   </FormItem>
//                 )}
//               />
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.country`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         দেশের নাম:
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <Input
//                               className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
//                               id="emailMobileNumber"
//                               type="text"
//                             />
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//               {form.getValues(`addresses.${index}.location`) === "2" && (
//                 <FormField
//                   control={form.control}
//                   name={`addresses.${index}.cityzenshipStatus`}
//                   render={({ field }) => (
//                     <FormItem className="w-full">
//                       <FormLabel className="text-md space-y-2 leading-4.5">
//                         সিটিজেনশিপ আছে?
//                       </FormLabel>
//                       <div className="flex flex-col space-y-2">
//                         <div className="flex items-center space-x-2">
//                           <FormControl>
//                             <RadioGroup
//                               className="w-full flex flex-wrap gap-0 min-h-12"
//                               onValueChange={field.onChange}
//                               value={field.value}
//                             >
//                               {citizenshipOptions.map((x) => (
//                                 <div
//                                   key={x.id}
//                                   className="w-1/3 flex items-center space-x-2"
//                                 >
//                                   <RadioGroupItem value={x.id} id={x.id} />
//                                   <Label htmlFor={x.id}>{x.title}</Label>
//                                 </div>
//                               ))}
//                             </RadioGroup>
//                           </FormControl>
//                         </div>
//                         <FormMessage />
//                       </div>
//                     </FormItem>
//                   )}
//                 />
//               )}
//             </div>
//           ))}

//           {/* Add New Address */}
//           <Button
//             type="button"
//             className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
//             onClick={() =>
//               append({
//                 type: "",
//                 location: "",
//                 state: "",
//                 city: "",
//                 detail: "",
//                 country: "",
//                 cityzenshipStatus: "",
//               })
//             }
//           >
//             <Plus size={20} /> <span>নতুন ঠিকানা যোগ করুন</span>
//           </Button>
//         </form>
//       </Form>

//       <div className="max-w-4xl w-full space-x-2 flex justify-center">
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={() => setCurrentStep(currentStep.prev)}
//         >
//           Previous
//         </Button>
//         <Button
//           className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
//           onClick={handleNextClick}
//         >
//           Next
//         </Button>
//       </div>
//     </div>
//   );
// }

"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { citizenshipOptions, locations, types } from "@/lib/consts";
import { AddressInfoFormData, BiodataFormDataProps } from "@/lib/types";
import { addressInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function AddressInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState(false);

  const form = useForm<AddressInfoFormData>({
    resolver: zodResolver(addressInfoFormData),
    defaultValues: {
      addresses:
        biodataFormData?.addressInfoFormData?.addresses?.length > 0
          ? biodataFormData.addressInfoFormData.addresses
          : [
              {
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "addresses",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({ addressInfoFormData: values }); // Update Redux with form data
    });
    return unsubscribe;
  }, [submittedOnce, form, setBiodataFormData]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="space-y-4">
      <h2 className="text-2xl font-bold">ঠিকানা</h2>
      <Form {...form}>
        <form className="space-y-4">
          {fields.map((field, index) => (
            <div key={field.id} className="space-y-4 border p-4 rounded-md">
              <FormField
                control={form.control}
                name={`addresses.${index}.type`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার ধরন:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {types.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                    {fields.length > 1 && (
                      <Button
                        type="button"
                        variant="destructive"
                        size="sm"
                        onClick={() => remove(index)}
                      >
                        <Minus className="h-4 w-4" />
                      </Button>
                    )}
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.location`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>অবস্থান ধরণ:</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="নির্বাচন করুন" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {locations.map((x) => (
                          <SelectItem key={x.id} value={x.id}>
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.state`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "স্টেট"
                      : "স্থায়ী জেলা";
                  return (
                    <FormItem>
                      <FormLabel>{label}:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.city`}
                render={({ field }) => {
                  const label =
                    form.getValues(`addresses.${index}.location`) === "2"
                      ? "শহর"
                      : "স্থায়ী উপজেলা";
                  return (
                    <FormItem>
                      <FormLabel>
                        {label}:{" "}
                        <span className="text-muted-foreground">
                          (যদি থাকে)
                        </span>
                      </FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              <FormField
                control={form.control}
                name={`addresses.${index}.detail`}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>ঠিকানার বিস্তারিত:</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="উল্লেখ করুন" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.country`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>দেশের নাম:</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="উল্লেখ করুন" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
              {form.getValues(`addresses.${index}.location`) === "2" && (
                <FormField
                  control={form.control}
                  name={`addresses.${index}.cityzenshipStatus`}
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>সিটিজেনশিপ আছে?</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="নির্বাচন করুন" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {citizenshipOptions.map((x) => (
                            <SelectItem key={x.id} value={x.id}>
                              {x.title}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>
          ))}
          <Button
            type="button"
            variant="outline"
            onClick={() =>
              append({
                type: "",
                location: "",
                state: "",
                city: "",
                detail: "",
                country: "",
                cityzenshipStatus: "",
              })
            }
          >
            <Plus className="h-4 w-4 mr-2" /> নতুন ঠিকানা যোগ করুন
          </Button>
        </form>
      </Form>
      <div className="flex justify-between mt-4">
        <Button
          variant="outline"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\Breadcrumbs.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/Breadcrumbs.tsx

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
} from "@/components/ui/breadcrumb";
import { steps } from "../steps";

interface BreadcrumbsProps {
  currentStep: string;
  setCurrentStep: (step: string) => void;
}

export default function Breadcrumbs({
  currentStep,

  setCurrentStep,
}: BreadcrumbsProps) {
  return (
    <Breadcrumb className="max-w-6xl bg-[#f6f6f6] rounded-2xl p-2">
      <BreadcrumbList className="flex justify-center">
        {steps.map((step) => (
          <BreadcrumbItem
            key={step.key}
            className="text-[#004972] rounded-full"
          >
            {step.key === currentStep ? (
              <BreadcrumbPage className="bg-[#e25a6f] text-white px-3 py-2 rounded-full">
                {step.title}
              </BreadcrumbPage>
            ) : (
              <BreadcrumbLink
                asChild
                className="hover:text-[#e25a6f] px-3 py-2 cursor-pointer"
              >
                <button onClick={() => setCurrentStep(step.key)}>
                  {step.title}
                </button>
              </BreadcrumbLink>
            )}
          </BreadcrumbItem>
        ))}
      </BreadcrumbList>
    </Breadcrumb>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\EducationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/EducationInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { educationTypes, religiousEducation } from "@/lib/consts";
import { BiodataFormDataProps, EducationInfoFormData } from "@/lib/types";
import { educationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function EducationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<EducationInfoFormData>({
    resolver: zodResolver(educationInfoFormData),
    defaultValues: {
      type: biodataFormData?.educationInfoFormData?.type || "",
      highestDegree:
        biodataFormData?.educationInfoFormData?.highestDegree || "",
      degrees:
        biodataFormData?.educationInfoFormData?.degrees?.length > 0
          ? biodataFormData?.educationInfoFormData?.degrees.map((x) => {
              return {
                name: x.name,
                passYear: x.passYear,
                group: x.group,
                institute: x.institute,
              };
            })
          : [{ name: "", passYear: "", group: "", institute: "" }],
      religiousEducation:
        biodataFormData?.educationInfoFormData?.religiousEducation || [],
      detail: biodataFormData?.educationInfoFormData?.detail || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        educationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "degrees",
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">শিক্ষাগত যোগ্যতা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষার ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="শিক্ষার ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {educationTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="highestDegree"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার সর্বোচ্চ শিক্ষাগত ডিগ্রীর নাম:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="text-[#E25A6F]">
            মাধ্যমিক পর্যায় থেকে শুরু করে এখন পর্যন্ত যেসকল ডিগ্রী অর্জন করেছেন
            বা চলমান রয়েছে সেগুলো নিচে প্লাস বাটন চাপ দিয়ে ধাপে ধাপে যুক্ত করুন।
            কোনো ডিগ্রী না থাকলে খালি রাখুন।
          </div>
          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`degrees.${index}.name`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ডিগ্রীর নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center space-x-2">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="ডিগ্রীর নাম"
                          />
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.passYear`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পাশের সন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পাশের সন"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.group`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বিভাগ/বিষয়:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বিভাগ/বিষয়"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`degrees.${index}.institute`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      শিক্ষা প্রতিষ্ঠানের নাম:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="শিক্ষা প্রতিষ্ঠানের নাম"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                name: "",
                passYear: "",
                group: "",
                institute: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ডিগ্রী যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="religiousEducation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value?.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষা সম্পর্কিত আরো কিছু জানাতে চাইলে নিচে লিখুন। অন্যথায়
                    খালি রাখুন।
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FamilyInfo.tsx

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { familyBackgrounds, familyTypes, siblingTypes } from "@/lib/consts";
import { BiodataFormDataProps, FamilyInfoFormData } from "@/lib/types";
import { familyInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function FamilyInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FamilyInfoFormData>({
    resolver: zodResolver(familyInfoFormData),
    defaultValues: {
      parentsAlive: biodataFormData?.familyInfoFormData?.parentsAlive || "",
      fatherOccupation:
        biodataFormData?.familyInfoFormData?.fatherOccupation || "",
      motherOccupation:
        biodataFormData?.familyInfoFormData?.motherOccupation || "",
      siblings: biodataFormData?.familyInfoFormData?.siblings || [],
      fatherSideDetail:
        biodataFormData?.familyInfoFormData?.fatherSideDetail || "",
      motherSideDetail:
        biodataFormData?.familyInfoFormData?.motherSideDetail || "",
      familyType: biodataFormData?.familyInfoFormData?.familyType || "",
      familyBackground:
        biodataFormData?.familyInfoFormData?.familyBackground || "",
      livingCondition:
        biodataFormData?.familyInfoFormData?.livingCondition || "",
      wealthDescription:
        biodataFormData?.familyInfoFormData?.wealthDescription || "",
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "siblings",
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        familyInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পারিবারিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="parentsAlive"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পিতা-মাতা উভয়েই জীবিত আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনার পিতা-মাতা উভয়েই জীবিত আছেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherOccupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার পেশা:</div>
                    <div className="text-xs">
                      <div>
                        -চাকরিজীবী হলে পদবি সহ কি ধরণের চাকরি তা লিখবেন।
                      </div>
                      <div>-ব্যাবসায়ী হলে কি ধরণের ব্যবসা তা লিখবেন।</div>
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার পেশা"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {fields.map((field, index) => (
            <div
              className="flex flex-col space-y-4 items-center rounded-2xl p-4 border border-[#E25A6F]"
              key={field.id}
            >
              <FormField
                control={form.control}
                name={`siblings.${index}.type`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      ভাই/বোন:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Select
                            value={field.value}
                            onValueChange={field.onChange}
                          >
                            <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                              <SelectValue placeholder="ভাই/বোন" />
                            </SelectTrigger>
                            <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                              {siblingTypes.map((x) => (
                                <SelectItem
                                  key={x.id}
                                  className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                                  value={x.id}
                                >
                                  {x.title}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </FormControl>
                        <Button
                          type="button"
                          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                          onClick={() => remove(index)}
                        >
                          <Minus size={20} />
                        </Button>
                      </div>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.occupation`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      পেশা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="পেশা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.maritalStatus`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      বৈবাহিক অবস্থা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="বৈবাহিক অবস্থা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name={`siblings.${index}.children`}
                render={({ field }) => (
                  <FormItem className="w-full">
                    <FormLabel className="text-md space-y-2 leading-4.5">
                      সন্তান সংখ্যা:
                    </FormLabel>
                    <div className="flex flex-col space-y-2">
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                          placeholder="সন্তান সংখ্যা"
                        />
                      </FormControl>
                      <FormMessage />
                    </div>
                  </FormItem>
                )}
              />
            </div>
          ))}
          {/* Add New Address */}
          <Button
            type="button"
            className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
            onClick={() =>
              append({
                type: "",
                occupation: "",
                maritalStatus: "",
                children: "",
              })
            }
          >
            <Plus size={20} /> <span>নতুন ভাই/বোন যোগ করুন</span>
          </Button>
          <FormField
            control={form.control}
            name="fatherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    চাচা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="চাচা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherSideDetail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মামা কতজন এবং কি করেন?
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মামা কতজন এবং কি করেন?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের ধরণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের ধরণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="পরিবারের অর্থনৈতিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {familyBackgrounds.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="livingCondition"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া
                    বাড়িতে?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="wealthDescription"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\FinalWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FinalWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Label } from "@/components/ui/label";
import { BiodataFormDataProps, FinalWordsFormData } from "@/lib/types";
import { finalWordsFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function FinalWords({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FinalWordsFormData>({
    resolver: zodResolver(finalWordsFormData),
    defaultValues: {
      postApprovalOathTruthfulInfo:
        biodataFormData?.finalWordsFormData?.postApprovalOathTruthfulInfo ||
        false,
      postApprovalOathNoMisuse:
        biodataFormData?.finalWordsFormData?.postApprovalOathNoMisuse || false,
      postApprovalOathLegalResponsibility:
        biodataFormData?.finalWordsFormData
          ?.postApprovalOathLegalResponsibility || false,
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        finalWordsFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">শেষ কথা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-10 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl text-center">
            প্রতিশ্রুতি নামা
          </div>
          <div className="text-[#cd0000] space-y-3">
            <div className="flex items-center space-x-2">
              <Label htmlFor="preApprove1" className="text-[#6C0011] leading-5">
                আমি আল্লাহর নামে শপথ করছি যে,
              </Label>
            </div>
            <FormField
              control={form.control}
              name="postApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি বায়োডাটায় সকল তথ্য সত্য প্রদান করেছি।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathNoMisuse"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      সহজনিকাহ ম্যাট্রিমনি ওয়েবসাইটের কোনো তথ্য অসৎ কাজে ব্যবহার
                      করবো না।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="postApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      কোনো মিথ্যা তথ্য প্রদান করলে বা কোনো তথ্য অসৎ কাজে ব্যবহার
                      করে থাকলে, দুনিয়াবী যেকোনো আইনী জটিলতা এবং পরকালীন সকল
                      দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-ful">
        <Button className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]">
          Submit and Send For Approval
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\FirstWords.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/FirstWords.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { FirstWordsFormData } from "@/lib/types";
import { firstWordsFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { useState } from "react";
import { useForm } from "react-hook-form";

interface BiodataFormDataProps {
  biodataFormData: any;
  handleSave: () => void;
  currentStep: any;
  setCurrentStep: (step: string) => void;
}

export default function FirstWords({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<FirstWordsFormData>({
    resolver: zodResolver(firstWordsFormData),
    defaultValues: {
      preApprovalAcceptTerms:
        biodataFormData?.firstWordsFormData?.preApprovalAcceptTerms || false,
      preApprovalOathTruthfulInfo:
        biodataFormData?.firstWordsFormData?.preApprovalOathTruthfulInfo ||
        false,
      preApprovalOathLegalResponsibility:
        biodataFormData?.firstWordsFormData
          ?.preApprovalOathLegalResponsibility || false,
    },
  });

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      // Only update if we have valid values
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "firstWordsFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-[#004972]">
        বায়োডাটা তৈরির পূর্বে কিছু গুরুত্বপূর্ণ কথা
      </div>
      <div className="max-w-4xl w-full space-y-4 text-sm text-black">
        <div>
          আপনি যখন সহজনিকাহ ম্যাট্রিমনিতে জীবনসঙ্গী খুঁজতে এসেছেন, এর মানে হলো,
          আপনি বিবাহের একটি অত্যন্ত গুরুত্বপূর্ণ অধ্যায় অতিবাহিত করছেন। চাকরির
          জন্য যেমন সুন্দর করে গুছিয়ে একটি সিভি তৈরি করা হয়, ঠিক তেমনি
          জীবনসঙ্গী নির্বাচনের ক্ষেত্রে আরও বেশি সুন্দর করে এবং গুরুত্ব দিয়ে
          বায়োডাটা তৈরি করা উচিত। কেননা যিনি আপনার কাছে জীবনসঙ্গী হয়ে আসবেন,
          তিনি যেন এই বায়োডাটার মাধ্যমে আপনাকে সঠিকভাবে জানাতে এবং বুঝতে পারেন।
        </div>
        <div>
          তাই সময় নিয়ে, মনোযোগ দিয়ে আপনার বায়োডাটা গুছিয়ে তৈরি করুন। প্রতিটি
          প্রশ্নের উত্তর সত্য এবং সঠিকভাবে দিন এবং নিশ্চিত করুন যে, তথ্যগুলো
          আপনাকে অপরপক্ষের কাছে সঠিকভাবে উপস্থাপন করছে। সম্পূর্ণ বায়োডাটা
          তৈরিতে বেশ কিছুটা সময় লাগবে, কারণ এখানে অনেকগুলো প্রশ্ন আছে। কাজেই
          ধৈর্য্য সহকারে, বেশ কিছুটা সময় নিয়ে বায়োডাটা ফর্ম পূরণ করুন।
          (আনুমানিক ৩০ মিনিট)
        </div>
        <div>
          বি: দ্র:{" "}
          <span className="text-[#005A8B]">
            আপনার এই বায়োডাটা কেউ পছন্দ করলে এবং আপনার সাথে যোগাযোগ করতে চাইলে
            শুধুমাত্র আপনার অভিভাবকের যোগাযোগের মোবাইল নম্বর প্রদান করা হবে।
            একইভাবে আপনিও কোনো বায়োডাটার যোগাযোগ তথ্য নিতে চাইলে শুধুমাত্র
            অভিভাবকের যোগাযোগ নম্বর নিতে পারবেন।
          </span>
        </div>
      </div>
      <div className="max-w-4xl w-full bg-[#f6f6f6] py-6 px-12 space-y-4 text-black rounded-4xl">
        <div className="text-[#005A8B] text-xl">
          বায়োডাটা অ্যাপ্রুভ হওয়ার শর্তসমূহ:
        </div>
        <div className="text-sm">
          <ol className="list-decimal space-y-1">
            <li>
              অবশ্যই মুসলিম হতে হবে। সহজনিকাহ শুধুমাত্র প্রাক্টিসিং,
              নন-প্রাক্টিসিং সহ সকল ধরণের মুসলিমদের নিয়ে কাজ করে থাকে।
            </li>
            <li>
              ছেলেদের বয়স কমপক্ষে ২১ বছর এবং মেয়েদের ক্ষেত্রে ১৮ বছর হতে হবে।
            </li>
            <li>
              অভিভাবকের যোগাযোগ তথ্যের ঘরে পাত্র/পাত্রীর নিজের বা বন্ধুর মোবাইল
              নম্বর প্রদান করা যাবে না।
            </li>
            <li>
              বাংলা, ইংলিশ মিশ্রিত বাংলিশ ভাষায় লেখা যাবে না। পুরোটাই বাংলায়
              অথবা পুরোটাই ইংরেজিতে লিখতে হবে।
            </li>
            <li>
              নিজের শিক্ষা, পেশা এবং পারিবারিক তথ্যে বিস্তারিত উত্তর লিখতে হবে।
            </li>
            <li>
              তথ্য ভেরিফিকেশনের সময় বায়োডাটায় দেওয়া তথ্যের সাথে মিল থাকতে হবে।
            </li>
          </ol>
        </div>
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full bg-[#f6f6f6] p-6 space-y-4 text-black rounded-4xl">
          <div className="text-[#005A8B] text-xl">প্রতিশ্রুতি নামা:</div>
          <div className="text-[#cd0000] space-y-2">
            <FormField
              control={form.control}
              name="preApprovalAcceptTerms"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি শর্তসমূহ পড়েছি এবং তা মেনে চলার প্রতিশ্রুতি দিচ্ছি।
                    </FormLabel>

                    {/* <FormDescription>
                      Describe what this resume is for.
                    </FormDescription> */}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathTruthfulInfo"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আল্লাহর নামে শপথ করছি যে, বায়োডাটায় সকল তথ্য সত্য
                      প্রদান করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="preApprovalOathLegalResponsibility"
              render={({ field }) => (
                <FormItem>
                  <div className="flex items-center space-x-2">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <FormLabel className="leading-4.5">
                      আমি আরও শপথ করছি যে, কোনো মিথ্যা তথ্য প্রদান করলে দুনিয়াবী
                      যেকোনো আইনী জটিলতা এবং পরকালীন সকল দায়ভার আমি বহন করবো।
                    </FormLabel>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/GeneralInfo.tsx

"use client";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  bloodGroups,
  heights,
  maritalStatuses,
  nationalities,
  skinTones,
} from "@/lib/consts";
import { BiodataFormDataProps, GeneralInfoFormData } from "@/lib/types";
import { cn } from "@/lib/utils";
import { generalInfoFormData } from "@/lib/validations";
import { updateBiodataFormData } from "@/redux/features/biodata/biodataSlice";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { CalendarIcon } from "lucide-react";
import { useState } from "react";
import { useForm } from "react-hook-form";

export default function GeneralInfo({
  biodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<GeneralInfoFormData>({
    resolver: zodResolver(generalInfoFormData),
    defaultValues: {
      dateOfBirth: biodataFormData?.generalInfoFormData?.dateOfBirth || "",
      maritalStatus: biodataFormData?.generalInfoFormData?.maritalStatus || "",
      skinTone: biodataFormData?.generalInfoFormData?.skinTone || "",
      height: biodataFormData?.generalInfoFormData?.height || "",
      weight: biodataFormData?.generalInfoFormData?.weight || "",
      bloodGroup: biodataFormData?.generalInfoFormData?.bloodGroup || "",
      nationality: biodataFormData?.generalInfoFormData?.nationality || "",
    },
  });

  // useEffect(() => {
  //   const { unsubscribe } = form.watch(async (values) => {
  //     if (submittedOnce) {
  //       await form.trigger();
  //     }
  //     if (Object.values(values).some((value) => value !== undefined)) {
  //       dispatch(
  //         setBiodataFormData({
  //           key: "generalInfoFormData",
  //           data: values,
  //         })
  //       );
  //     }
  //   });
  //   return unsubscribe;
  // }, [submittedOnce, form, dispatch]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      if (Object.values(formValues).some((value) => value !== undefined)) {
        dispatch(
          updateBiodataFormData({
            key: "generalInfoFormData",
            data: formValues,
          })
        );
        handleSave();
      }
    }
  };

  const maritalStatusOptions = maritalStatuses.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">সাধারণ তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="dateOfBirth"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জন্ম তারিখ:</div>
                    <div className="text-xs">(আসল, সার্টিফিকেট অনুযায়ী নয়)</div>
                  </FormLabel>
                  <FormControl>
                    <Popover>
                      <PopoverTrigger asChild>
                        <Button
                          className={cn(
                            "p-6 w-full bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          <CalendarIcon className="mr-2 h-4 w-4" />
                          {field.value ? (
                            format(field.value, "PPP")
                          ) : (
                            <span>জন্ম তারিখ</span>
                          )}
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0">
                        <Calendar
                          className="bg-[#005889]"
                          classNames={{
                            day_selected: "bg-[#E25A6F]",
                            day_today: "bg-white text-black",
                          }}
                          mode="single"
                          selected={
                            field.value ? new Date(field.value) : undefined
                          }
                          onSelect={(date) =>
                            field.onChange(date?.toISOString())
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="বৈবাহিক অবস্থা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {maritalStatusOptions.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="গাত্রবর্ণ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {skinTones.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="weight"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ওজন:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ওজন"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="bloodGroup"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    রক্তের গ্রুপ:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="রক্তের গ্রুপ" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {bloodGroups.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="nationality"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জাতীয়তা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] m-0">
                        <SelectValue placeholder="জাতীয়তা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {nationalities.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/MarriageInfo.tsx
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Textarea } from "@/components/ui/textarea";
import { afterMarriageJobs, afterMarriageStudies } from "@/lib/consts";
import { BiodataFormDataProps, MarriageInfoFormData } from "@/lib/types";
import { marriageInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function MarriageInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<MarriageInfoFormData>({
    resolver: zodResolver(marriageInfoFormData),
    defaultValues: {
      guardianApproval:
        biodataFormData?.marriageInfoFormData?.guardianApproval || "",
      continueStudy: biodataFormData?.marriageInfoFormData?.continueStudy || "",
      careerPlan: biodataFormData?.marriageInfoFormData?.careerPlan || "",
      residence: biodataFormData?.marriageInfoFormData?.residence || "",
      arrangeHijab: biodataFormData?.marriageInfoFormData?.arrangeHijab || "",
      dowryExpectation:
        biodataFormData?.marriageInfoFormData?.dowryExpectation || "",
      allowShowingPhotoOnline:
        biodataFormData?.marriageInfoFormData?.allowShowingPhotoOnline || "",
      additionalMarriageInfo:
        biodataFormData?.marriageInfoFormData?.additionalMarriageInfo || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        marriageInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const afterMarriageStudyOptions = afterMarriageStudies.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  const afterMarriageJobOptions = afterMarriageJobs.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">বিয়ে সংক্রান্ত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="guardianApproval"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
                    <div className="text-xs">
                      (যদি অভিভাবক রাজি নাও থাকে তাহলে এর কারণ লিখুন এবং
                      সেক্ষেত্রে আপনি কেন বিবাহে আগাচ্ছেন সেটা বিস্তারিত লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="continueStudy"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?"
                      : "বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageStudyOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="careerPlan"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?"
                      : "আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {afterMarriageJobOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="residence"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?"
                      : "যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="arrangeHijab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে পারবেন?"
                      : "বাড়িতে বা বাহিরে পর্দা করতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="dowryExpectation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক / উপহার / অর্থ আশা করবেন কিনা?"
                      : "বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রপক্ষকে যৌতুক / উপহার / অর্থ দিতে ইচ্ছুক?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="allowShowingPhotoOnline"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "পাত্রীপক্ষ"
                      : "পাত্রপক্ষ"}{" "}
                    অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="additionalMarriageInfo"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>
                      বিয়ে সংক্রান্ত আরো কিছু জানাতে চাইলে এখানে লিখুন: অন্যথায়
                      খালি রাখুন।
                    </div>
                    <div className="text-xs">
                      (যেমন: পাত্র-পাত্রী সাক্ষাতের ব্যাপারে, অভিভাবকদের মতামত
                      নিয়ে, কেমন বিয়ে চান, বিয়ের পর কোন কোন বিষয় ছাড় দিতে রাজি
                      নন ইত্যাদি কিছু জানানোর থাকলে লিখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\OccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/OccupationInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { occupationsList } from "@/lib/consts";
import { BiodataFormDataProps, OccupationInfoFormData } from "@/lib/types";
import { occupationInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function OccupationInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<OccupationInfoFormData>({
    resolver: zodResolver(occupationInfoFormData),
    defaultValues: {
      occupations: biodataFormData?.occupationInfoFormData?.occupations || [],
      detail: biodataFormData?.occupationInfoFormData?.detail || "",
      monthlyIncome:
        biodataFormData?.occupationInfoFormData?.monthlyIncome || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        occupationInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">পেশা</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="occupations"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="detail"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পেশা নিয়ে বিস্তারিত লিখুন:</div>
                    <div className="text-xs">
                      (অর্থাৎ আপনার কর্মস্থল কোথায়, কি ধরণের কাজে দায়িত্বরত আছেন
                      বা পদবি কি, এগুলো নিয়ে বিস্তারিত লিখুন। পেশা না থাকলে খালি
                      রাখুন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="monthlyIncome"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাসিক আয়:</div>
                    <div className="text-xs">(পেশা না থাকলে খালি রাখুন।)</div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাসিক আয়"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PersonalInfo.tsx

import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { characteristics, specialCatagories } from "@/lib/consts";
import { BiodataFormDataProps, PersonalInfoFormData } from "@/lib/types";
import { personalInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function PersonalInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PersonalInfoFormData>({
    resolver: zodResolver(personalInfoFormData),
    defaultValues: {
      beardStatus: biodataFormData?.personalInfoFormData?.beardStatus || "",
      preferredOutfit:
        biodataFormData?.personalInfoFormData?.preferredOutfit || "",
      entertainmentPreferences:
        biodataFormData?.personalInfoFormData?.entertainmentPreferences || "",
      healthConditions:
        biodataFormData?.personalInfoFormData?.healthConditions || "",
      personalTraits:
        biodataFormData?.personalInfoFormData?.personalTraits || [],
      genderEqualityView:
        biodataFormData?.personalInfoFormData?.genderEqualityView || "",
      lgbtqOpinion: biodataFormData?.personalInfoFormData?.lgbtqOpinion || "",
      specialConditions:
        biodataFormData?.personalInfoFormData?.specialConditions || [],
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        personalInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const specialCatagoryOptions = specialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ব্যক্তিগত তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="beardStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                      ? "আপনি দাড়ি রেখেছেন কি?"
                      : "আপনার কি দাড়ি পছন্দ?"}
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="preferredOutfit"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পড়তে পছন্দ করেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="entertainmentPreferences"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="healthConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    মানসিক বা শারীরিক কোনো রোগ আছে কি? থাকলে বিস্তারিত লিখুন।
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="personalTraits"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নিজের কিছু গুণাবলী চিহ্নিত করুন:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {characteristics.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="genderEqualityView"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="lgbtqOpinion"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialConditions"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {specialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/PrimaryInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { biodataTypes } from "@/lib/consts";
import { BiodataFormDataProps, PrimaryInfoFormData } from "@/lib/types";
import { primaryInfoFormData } from "@/lib/validations";
import { useAppDispatch } from "@/redux/hooks";
import { zodResolver } from "@hookform/resolvers/zod";
import { Minus, Plus } from "lucide-react";
import { useEffect, useState } from "react";
import { useFieldArray, useForm } from "react-hook-form";

export default function PrimaryInfo({
  biodataFormData,
  setBiodataFormData, // Added missing prop
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const dispatch = useAppDispatch();
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<PrimaryInfoFormData>({
    resolver: zodResolver(primaryInfoFormData),
    defaultValues: {
      biodataType: biodataFormData?.primaryInfoFormData?.biodataType || "",
      biodataFor: biodataFormData?.primaryInfoFormData?.biodataFor || "",
      fullName: biodataFormData?.primaryInfoFormData?.fullName || "",
      fatherName: biodataFormData?.primaryInfoFormData?.fatherName || "",
      motherName: biodataFormData?.primaryInfoFormData?.motherName || "",
      email: biodataFormData?.primaryInfoFormData?.email || "",
      phoneNumber: biodataFormData?.primaryInfoFormData?.phoneNumber || "",
      guardianContacts:
        Array.isArray(biodataFormData?.primaryInfoFormData?.guardianContacts) &&
        biodataFormData.primaryInfoFormData.guardianContacts.length >= 2
          ? // Create a deep copy to avoid immutability issues
            biodataFormData.primaryInfoFormData.guardianContacts.map(
              (contact) => ({
                relation: contact.relation || "",
                fullName: contact.fullName || "",
                phoneNumber: contact.phoneNumber || "",
              })
            )
          : [
              { relation: "", fullName: "", phoneNumber: "" },
              { relation: "", fullName: "", phoneNumber: "" },
            ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "guardianContacts",
  });

  useEffect(() => {
    const subscription = form.watch((values) => {
      if (submittedOnce) {
        form.trigger(); // Trigger validation on change after submission attempt
      }
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: values as PrimaryInfoFormData,
      });
    });
    return () => subscription.unsubscribe();
  }, [form, submittedOnce, setBiodataFormData, biodataFormData]);

  const handleAppend = () => {
    append({ relation: "", fullName: "", phoneNumber: "" });
  };

  const handleRemove = (index: number) => {
    if (fields.length > 2) {
      remove(index);
    } else {
      form.setError(`guardianContacts`, {
        type: "manual",
        message: "কমপক্ষে ২ জন অভিভাবকের তথ্য প্রয়োজন।",
      });
    }
  };

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      const formValues = form.getValues();
      setBiodataFormData({
        ...biodataFormData,
        primaryInfoFormData: formValues,
      });
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রাথমিক তথ্য</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-4">
          <FormField
            control={form.control}
            name="biodataType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বায়োডাটার ধরন:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="বায়োডাটার ধরন" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {biodataTypes.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="biodataFor"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>বায়োডাটা কার জন্য তৈরী করছেন?</div>
                    <div className="text-xs">
                      (যেমনঃ নিজের জন্য/বোনের জন্য/বন্ধুর জন্য/ভাগ্নির জন্য
                      ইত্যাদি)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="নিজের জন্য"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fullName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
                    <div className="text-xs">
                      (NID কার্ডে যে নাম আছে। নাম বায়োডাটায় প্রকাশ করা হবে না।
                      শুধুমাত্র ভেরিফিকেশন ও অপরপক্ষকে যোগাযোগ তথ্য প্রদানের
                      ক্ষেত্রে প্রয়োজন হবে।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="সম্পূর্ণ নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="fatherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পিতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="পিতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="motherName"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>মাতার নাম:</div>
                    <div className="text-xs">
                      (পূর্ণ নাম লিখবেন। বায়োডাটায় প্রকাশ করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মাতার নাম"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>ইমেইল আইডি:</div>
                    <div className="text-xs">
                      (পাত্র/পাত্রীর সাথে আমাদের যোগাযোগের জন্য প্রয়োজন হবে।
                      অপরপক্ষ যোগাযোগ তথ্য নিতে চাইলে যুক্তিসঙ্গত কারণ বা
                      প্রয়োজন ছাড়া পাঠানো হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="email"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="ইমেইল আইডি"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="phoneNumber"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>পাত্র/পাত্রীর মোবাইল নম্বর:</div>
                    <div className="text-xs">
                      (মোবাইল নম্বর শুধুমাত্র ভেরিফিকেশনের জন্য আমাদের কাছে
                      থাকবে। কাউকে প্রদান করা হবে না।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="tel"
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      placeholder="মোবাইল নম্বর"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <div className="flex flex-col space-y-2">
            <FormLabel className="flex items-center justify-between space-x-8">
              <div className="text-md space-y-1 leading-4.5">
                <div>পাত্র/পাত্রীর অভিভাবকের মোবাইল নম্বর:</div>
                <div className="text-xs">
                  <div>কমপক্ষে ২ টি সচল নম্বর প্রদান করতে হবে।</div>
                </div>
              </div>
              <Button
                type="button"
                className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] flex items-center space-x-2"
                onClick={handleAppend}
              >
                <Plus size={20} /> <span>নতুন নম্বর যোগ করুন</span>
              </Button>
            </FormLabel>

            <div className="space-y-2">
              {fields.map((field, index) => (
                <div className="flex space-x-2 items-center" key={field.id}>
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.relation`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="সম্পর্ক (যেমন: বাবা, মা)"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.fullName`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের নাম"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={`guardianContacts.${index}.phoneNumber`}
                    render={({ field }) => (
                      <FormItem className="w-full">
                        <FormControl>
                          <Input
                            {...field}
                            type="tel"
                            className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                            placeholder="অভিভাবকের মোবাইল নম্বর"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  {fields.length > 2 && (
                    <Button
                      type="button"
                      className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F] p-2"
                      onClick={() => handleRemove(index)}
                    >
                      <Minus size={20} />
                    </Button>
                  )}
                </div>
              ))}
            </div>
            {form.formState.errors.guardianContacts && (
              <p className="text-red-500 text-sm">
                {form.formState.errors.guardianContacts.message}
              </p>
            )}
          </div>
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
          disabled={!currentStep.prev}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
          disabled={submittedOnce && !form.formState.isValid}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\ProfilePic.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ProfilePic.tsx

"use client";

import female1 from "@/assets/images/female-1.svg";
import female2 from "@/assets/images/female-2.svg";
import female3 from "@/assets/images/female-3.svg";
import female4 from "@/assets/images/female-4.svg";
import female5 from "@/assets/images/female-5.svg";
import female6 from "@/assets/images/female-6.svg";
import male1 from "@/assets/images/male-1.svg";
import male2 from "@/assets/images/male-2.svg";
import male3 from "@/assets/images/male-3.svg";
import male4 from "@/assets/images/male-4.svg";
import male5 from "@/assets/images/male-5.svg";
import male6 from "@/assets/images/male-6.svg";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { BiodataFormDataProps, ProfilePicFormData } from "@/lib/types";
import { profilePicFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { CheckCircle } from "lucide-react";
import Image from "next/image";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ProfilePic({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ProfilePicFormData>({
    resolver: zodResolver(profilePicFormData),
    defaultValues: {
      photoId: biodataFormData?.profilePicFormData?.photoId || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        profilePicFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const images =
    biodataFormData?.primaryInfoFormData?.biodataType === "1"
      ? [male1, male2, male3, male4, male5, male6]
      : [female1, female2, female3, female4, female5, female6];

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">প্রোফাইল পিকচার</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="photoId"
            render={({ field }) => (
              <FormItem>
                <FormLabel>
                  আপনার সাথে মানানসই বা সামঞ্জস্যপূর্ণ একটি প্রোফাইল পিকচার
                  বাছাই করুন:
                </FormLabel>
                <FormControl>
                  <div className="flex flex-wrap">
                    {images.map((image, index) => (
                      <div
                        key={index}
                        className="w-1/3 mb-4 flex items-center justify-center relative"
                      >
                        <div
                          className={`border p-12 rounded-3xl cursor-pointer transition-all relative ${
                            form.getValues().photoId === image.src
                              ? "border-[#E25A6F] ring-2 ring-[#E25A6F]"
                              : "border-gray-300"
                          } `}
                          onClick={() => {
                            field.onChange(image.src);
                          }}
                        >
                          <Image
                            src={image}
                            alt={`Profile${index + 1}`}
                            width={120}
                            height={40}
                            priority
                          />
                          {form.getValues().photoId === image.src && (
                            <CheckCircle className="absolute top-4 right-4 text-[#E25A6F]" />
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/ReligiousInfo.tsx
"use client";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { madhhabs, religiousIdeologies } from "@/lib/consts";
import { BiodataFormDataProps, ReligiousInfoFormData } from "@/lib/types";
import { religiousInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function ReligiousInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<ReligiousInfoFormData>({
    resolver: zodResolver(religiousInfoFormData),
    defaultValues: {
      type: biodataFormData?.religiousInfoFormData?.type || "",
      ideology: biodataFormData?.religiousInfoFormData?.ideology || "",
      madhab: biodataFormData?.religiousInfoFormData?.madhab || "",
      praysFiveTimes:
        biodataFormData?.religiousInfoFormData?.praysFiveTimes || "",
      hasQazaPrayers:
        biodataFormData?.religiousInfoFormData?.hasQazaPrayers || "",
      canReciteQuranProperly:
        biodataFormData?.religiousInfoFormData?.canReciteQuranProperly || "",
      avoidsHaramIncome:
        biodataFormData?.religiousInfoFormData?.avoidsHaramIncome || "",
      modestDressing:
        biodataFormData?.religiousInfoFormData?.modestDressing || "",
      followsMahramRules:
        biodataFormData?.religiousInfoFormData?.followsMahramRules || "",
      beliefAboutPirMurshidAndMazar:
        biodataFormData?.religiousInfoFormData?.beliefAboutPirMurshidAndMazar ||
        "",
      practicingSince:
        biodataFormData?.religiousInfoFormData?.practicingSince || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        religiousInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">ধর্মীয় লাইফস্টাইল</div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="type"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormControl>
                    <RadioGroup
                      className="flex"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="1" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              সেরকমভাবে মেনে চলা হয় না
                            </div>
                            <div>(জেনারেল/নন-প্রাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>
                            ১. অনিয়মিতভাবে ৫ ওয়াক্ত বা এর কম সালাত আদায় করা হয়।
                          </div>
                          <div>
                            ২. সকল ক্ষেত্রে হালাল-হারাম বাছাই করা হয় না।
                          </div>
                          <div>৩. মাহরাম-নন মাহরাম মেইনটেইন করা হয় না।</div>
                          <div>
                            ৪. হারাম উপার্জন, ব্যাংকিং সুদ, ফ্রি-মিক্সিং,
                            গান-বাজনা থেকে বিরত থাকা হয় না।
                          </div>
                          <div>
                            ৫. পরিপূর্ন ভাবে ইসলামের বিধিবিধান পালনে তেমন চেষ্টা
                            বা আগ্রহ নেই।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="2" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black">
                              পরিপূর্ণভাবে মেনে চলা হয় না কিন্তু প্রবল ইচ্ছা আছে
                              এবং চেষ্টা করছি
                            </div>
                            <div>(প্রাক্টিসিংয়ের চেষ্টায় আছি)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>
                            ২. হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত থাকছেন।
                          </div>
                          <div>
                            ৩. কিন্তু গান-বাজনা থেকে এখনো দূরে থাকা হয় না।
                          </div>
                          <div>
                            ৪. সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট বা পর্দা এখনো
                            মেনে চলতে পারছেন না।
                          </div>
                          <div>
                            ৫. এর জন্য প্রবল অনুশোচনা কাজ করে এবং পরিপূর্ন ভাবে
                            ইসলামের বিধিবিধান পালনের চেষ্টা করা হয়।
                          </div>
                        </Label>
                      </div>
                      <div className="border border-gray-300 p-4 rounded-3xl space-y-6">
                        <div className="min-h-32 border border-gray-300 bg-[#f6f6f6] p-4 rounded-xl space-x-2 flex items-center justify-center">
                          <RadioGroupItem value="3" />
                          <Label className="leading-5 space-y-2">
                            <div className="text-black leading-5">
                              জি পরিপূর্ণভাবে মেনে চলি এবং সর্বদা চেষ্টায় থাকি
                            </div>
                            <div>(পূর্ণ ধার্মিক/ প্র্যাক্টিসিং)</div>
                          </Label>
                        </div>
                        <Label className="text-xs leading-4 space-y-2 text-[#A30000]">
                          <div>অর্থাৎ,</div>
                          <div>১. বিশুদ্ধ ঈমান-আকিদা পোষণ করছেন।</div>
                          <div>২. নিয়মিত ৫ ওয়াক্ত সালাত আদায় করছেন।</div>
                          <div>৩. পরিপূর্ণ হালাল উপার্জন করছেন ।</div>
                          <div>
                            ৪. ফরজ, ওয়াজিব ইবাদতের পাশাপাশি সুন্নাত, নফল আমল
                            করার চেষ্টা করেন।
                          </div>
                          <div>৫. গান-বাজনা, নাটক-সিনেমা থেকে দূরে থাকছেন।</div>
                          <div>
                            ৬. পুরুষেরা সুন্নতি দাড়ি, টাখনুর উপর প্যান্ট,
                            ইসলামিক পোশাক মেনে চলেন, নারীরা নিকাব সহ পর্দা
                            করছেন।
                          </div>
                          <div>
                            ৭. বাহিরে পর্দা মেনে চলা অর্থাৎ বেগানা নারী-পুরুষের
                            ক্ষেত্রে চক্ষু অবনত রাখছেন।
                          </div>
                          <div>
                            ৮. মাহরাম-নন মাহরাম মেইনটেইন করেন এবং ফ্রী মিক্সিং
                            এড়িয়ে চলেন।
                          </div>
                          <div>
                            ৯. সকল প্রকার হারাম ও কবীরা গুনাহ থেকে বেঁচে থাকার
                            সর্বাত্মক প্রচেষ্টায় থাকেন।
                          </div>
                          <div>
                            ১০. ইসলাম বিরোধী সকল কাজকে অপছন্দ করেন এবং জীবনটাকে
                            পরিপূর্ণভাবে কোরআন-সুন্নাহ মোতাবেক সাজাতে থাকেন।
                          </div>
                        </Label>
                      </div>
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="ideology"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় কোন মতাদর্শ মেনে চলেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {religiousIdeologies.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="madhab"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কোন মাজহাব / মানহাজ অনুসরণ করেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {madhhabs.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="praysFiveTimes"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="hasQazaPrayers"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      আপনার কি নামাজ কাযা হয়?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="canReciteQuranProperly"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />

          {["2", "3"].includes(form.getValues().type) && (
            <FormField
              control={form.control}
              name="avoidsHaramIncome"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <FormField
              control={form.control}
              name="modestDressing"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      {biodataFormData?.primaryInfoFormData?.biodataType === "1"
                        ? "টাখনুর উপরে কাপড় পরেন কিনা?"
                        : "আপনি কি নিকাব সহ পর্দা করেন?"}
                    </FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                      />
                    </FormControl>
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          {form.getValues().type === "3" && (
            <>
              <FormField
                control={form.control}
                name="followsMahramRules"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="beliefAboutPirMurshidAndMazar"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="practicingSince"
                render={({ field }) => (
                  <FormItem>
                    <div className="flex flex-col space-y-2">
                      <FormLabel className="text-md space-y-1 leading-4.5">
                        কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু
                        করেছেন?
                      </FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                        />
                      </FormControl>
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </>
          )}
        </form>
      </Form>
      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodata-editor\bioDataFormComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodata-editor/biodataFormComponents/SpousePreferenceInfo.tsx
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import {
  familyBackgrounds,
  heights,
  maritalStatuses,
  occupationsList,
  religiousEducation,
  religiousLifestyle,
  secondMarriageOptions,
  skinTones,
  spouseLocationOptions,
  spouseSpecialCatagories,
} from "@/lib/consts";
import {
  BiodataFormDataProps,
  SpousePreferenceInfoFormData,
} from "@/lib/types";
import { spousePreferenceInfoFormData } from "@/lib/validations";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";

export default function SpousePreferenceInfo({
  biodataFormData,
  setBiodataFormData,
  handleSave,
  currentStep,
  setCurrentStep,
}: BiodataFormDataProps) {
  const [submittedOnce, setSubmittedOnce] = useState<boolean>(false);

  const form = useForm<SpousePreferenceInfoFormData>({
    resolver: zodResolver(spousePreferenceInfoFormData),
    defaultValues: {
      age: biodataFormData?.spousePreferenceInfoFormData?.age || "",
      skinTone: biodataFormData?.spousePreferenceInfoFormData?.skinTone || [],
      height: biodataFormData?.spousePreferenceInfoFormData?.height || "",
      educationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.educationalQualification || "",
      religiousEducationalQualification:
        biodataFormData?.spousePreferenceInfoFormData
          ?.religiousEducationalQualification || [],
      address: biodataFormData?.spousePreferenceInfoFormData?.address || "",
      maritalStatus:
        biodataFormData?.spousePreferenceInfoFormData?.maritalStatus || [],
      specialCategory:
        biodataFormData?.spousePreferenceInfoFormData?.specialCategory || [],
      religiousType:
        biodataFormData?.spousePreferenceInfoFormData?.religiousType || [],
      occupation:
        biodataFormData?.spousePreferenceInfoFormData?.occupation || [],
      familyBackground:
        biodataFormData?.spousePreferenceInfoFormData?.familyBackground || [],
      secondMarriage:
        biodataFormData?.spousePreferenceInfoFormData?.secondMarriage || "",
      location: biodataFormData?.spousePreferenceInfoFormData?.location || "",
      qualities: biodataFormData?.spousePreferenceInfoFormData?.qualities || "",
    },
  });

  useEffect(() => {
    const { unsubscribe } = form.watch(async (values) => {
      if (submittedOnce) {
        await form.trigger();
      }
      setBiodataFormData({
        ...biodataFormData,
        spousePreferenceInfoFormData: { ...values },
      });
    });
    return unsubscribe;
  }, [
    submittedOnce,
    setSubmittedOnce,
    form,
    biodataFormData,
    setBiodataFormData,
  ]);

  const handleNextClick = async () => {
    setSubmittedOnce(true);
    const isValid = await form.trigger();
    if (isValid) {
      handleSave();
    }
  };

  const spouseSpecialCatagoryOptions = spouseSpecialCatagories.filter((x) =>
    x.for.includes(biodataFormData?.primaryInfoFormData?.biodataType)
  );

  return (
    <div className="flex flex-col items-center justify-center space-y-8">
      <div className="text-3xl text-center text-black">
        যেমন জীবনসঙ্গী আশা করেন
      </div>
      <Form {...form}>
        <form className="max-w-4xl w-full text-[#005889] flex flex-col space-y-6">
          <FormField
            control={form.control}
            name="age"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত বয়স:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="skinTone"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত গাত্রবর্ণ:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {skinTones.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত উচ্চতা:
                  </FormLabel>
                  <FormControl>
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889]">
                        <SelectValue placeholder="কাঙ্খিত উচ্চতা" />
                      </SelectTrigger>
                      <SelectContent className="bg-[#f6f6f6] text-[#005889] border-none">
                        {heights.map((x) => (
                          <SelectItem
                            key={x.id}
                            className="focus:bg-transparent focus:text-[#E25A6F] p-2"
                            value={x.id}
                          >
                            {x.title}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="educationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousEducationalQualification"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    দ্বীনি শিক্ষাগত যোগ্যতা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousEducation.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="address"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    কাঙ্খিত ঠিকানা:
                  </FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="maritalStatus"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    বৈবাহিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {maritalStatuses.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="specialCategory"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {spouseSpecialCatagoryOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="religiousType"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    ধর্মীয় লাইফস্টাইল:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {religiousLifestyle.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="occupation"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পেশা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {occupationsList.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="familyBackground"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    পরিবারের অর্থনৈতিক অবস্থা:
                  </FormLabel>
                  <FormControl>
                    <div className="w-full flex flex-wrap">
                      {familyBackgrounds.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/3 flex items-center space-x-2 mb-4"
                        >
                          <Checkbox
                            id={x.id}
                            checked={field.value.includes(x.id)}
                            onCheckedChange={(checked) => {
                              const updatedOccupations = checked
                                ? [...field.value, x.id]
                                : field.value.filter((id) => id !== x.id);

                              field.onChange(updatedOccupations);
                            }}
                          />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </div>
                  </FormControl>
                </div>
                <FormMessage />
              </FormItem>
            )}
          />
          {biodataFormData?.primaryInfoFormData?.biodataType === "GROOM" && (
            <FormField
              control={form.control}
              name="secondMarriage"
              render={({ field }) => (
                <FormItem>
                  <div className="flex flex-col space-y-2">
                    <FormLabel className="text-md space-y-1 leading-4.5">
                      মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী
                      আছেন?
                    </FormLabel>
                    <FormControl>
                      <RadioGroup
                        className="w-full flex flex-wrap gap-0"
                        onValueChange={field.onChange}
                        value={field.value}
                      >
                        {secondMarriageOptions.map((x) => (
                          <div
                            key={x.id}
                            className="w-1/4 flex items-center space-x-2 mb-2"
                          >
                            <RadioGroupItem value={x.id} id={x.id} />
                            <Label htmlFor={x.id}>{x.title}</Label>
                          </div>
                        ))}
                      </RadioGroup>
                    </FormControl>
                  </div>

                  <FormMessage />
                </FormItem>
              )}
            />
          )}
          <FormField
            control={form.control}
            name="location"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
                  </FormLabel>
                  <FormControl>
                    <RadioGroup
                      className="w-full flex flex-wrap gap-0"
                      onValueChange={field.onChange}
                      value={field.value}
                    >
                      {spouseLocationOptions.map((x) => (
                        <div
                          key={x.id}
                          className="w-1/4 flex items-center space-x-2 mb-2"
                        >
                          <RadioGroupItem value={x.id} id={x.id} />
                          <Label htmlFor={x.id}>{x.title}</Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="qualities"
            render={({ field }) => (
              <FormItem>
                <div className="flex flex-col space-y-2">
                  <FormLabel className="text-md space-y-1 leading-4.5">
                    <div>জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:</div>
                    <div className="text-xs">
                      (অর্থাৎ কাঙ্খিত জীবনসঙ্গীর স্বভাব, দ্বীনদারিতা, চারিত্রীক
                      গুণাবলী কেমন আশা করেন। বিশেষ কোনো কার্যক্রম বা চাওয়া থাকলে
                      জানাতে পারেন।)
                    </div>
                  </FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      className="p-6 bg-[#f6f6f6] border-none shadow-none rounded-xl text-[#005889] selection:bg-[#E25A6F] selection:text-white"
                    />
                  </FormControl>
                </div>

                <FormMessage />
              </FormItem>
            )}
          />
        </form>
      </Form>

      <div className="max-w-4xl w-full space-x-2 flex justify-center">
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={() => setCurrentStep(currentStep.prev)}
        >
          Previous
        </Button>
        <Button
          className="bg-[#E25A6F] text-white rounded-lg hover:bg-[#D14A5F]"
          onClick={handleNextClick}
        >
          Next
        </Button>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\layout.tsx
// --------------------
// File: src/app/(main)/biodatas/layout.tsx
import { ReactNode } from "react";

export default function MainLayout({
  children,
}: Readonly<{
  children: ReactNode;
}>) {
  return <main className="flex-grow">{children}</main>;
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\biodataFilterOptions.ts
// --------------------
export const searchingFilters = {
  biodataType: [
    { id: "GROOM", title: "পাত্রের বায়োডাটা" },
    { id: "BRIDE", title: "পাত্রীর বায়োডাটা" },
  ],
  maritalStatus: [
    { id: "unmarried", title: "অবিবাহিত", for: "both" },
    { id: "married", title: "বিবাহিত", for: "both" },
    { id: "divorced", title: "ডিভোর্সড", for: "both" },
    { id: "widowed_male", title: "বিপত্নীক", for: "BRIDE" },
    { id: "widowed_female", title: "বিধবা", for: "GROOM" },
  ],
  skinTones: [
    { id: "dark", title: "গাঢ় ত্বক", for: "both" },
    { id: "medium", title: "শ্যামলা", for: "both" },
    { id: "light_medium", title: "উজ্জ্বল শ্যামলা", for: "both" },
    { id: "fair", title: "ফর্সা", for: "both" },
    { id: "very_fair", title: "উজ্জ্বল ফর্সা", for: "both" },
  ],
  permanentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  currentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  religiousLifestyle: [
    { id: "devout", title: "পূর্ণ ধার্মিক/প্র্যাক্টিসিং", for: "both" },
    { id: "practicing", title: "প্রাক্টিসিংয়ের চেষ্টারত", for: "both" },
    { id: "general", title: "জেনারেল/নন-প্রাক্টিসিং", for: "both" },
  ],
  occupation: [
    { id: "business", title: "ব্যবসা", for: "both" },
    { id: "govt_job", title: "সরকারি চাকরিজীবী", for: "both" },
    { id: "private_job", title: "বেসরকারি চাকরিজীবী", for: "both" },
    { id: "home_tutor", title: "হোম টিউটর", for: "both" },
    { id: "teacher", title: "শিক্ষক/শিক্ষিকা", for: "both" },
    { id: "lawyer", title: "আইনজীবী", for: "both" },
    { id: "engineer", title: "ইঞ্জিনিয়ার", for: "both" },
    { id: "doctor", title: "ডাক্তার", for: "both" },
    { id: "vet_doctor", title: "ভেটেরিনারি ডাক্তার", for: "both" },
    { id: "nurse", title: "নার্স", for: "both" },
    { id: "pharmacist", title: "ফার্মাসিস্ট", for: "both" },
    { id: "paramedic", title: "প্যারামেডিক", for: "both" },
    { id: "therapist", title: "থেরাপিস্ট", for: "both" },
    { id: "medical_technologist", title: "মেডিকেল টেকনোলজিস্ট", for: "both" },
    {
      id: "medical_assistant",
      title: "মেডিক্যাল অ্যাসিস্ট্যান্ট",
      for: "both",
    },
    { id: "military_job", title: "সামরিক জব", for: "both" },
    { id: "paramilitary_job", title: "আধা সামরিক জব", for: "both" },
    { id: "imam", title: "ইমাম", for: "both" },
    { id: "muezzin", title: "মুয়াজ্জিন", for: "both" },
    { id: "pilot", title: "পাইলট", for: "both" },
    { id: "freelancer", title: "ফ্রিল্যান্সার", for: "both" },
    { id: "student", title: "শিক্ষার্থী", for: "both" },
    { id: "mbbs_bds_student", title: "MBBS/BDS শিক্ষার্থী", for: "both" },
    { id: "expatriate_job", title: "প্রবাসী-প্রবাস জব", for: "both" },
    { id: "manual_labor", title: "মিস্ত্রী/কায়িক শ্রম", for: "both" },
    { id: "agriculture", title: "কৃষিকাজ", for: "both" },
    { id: "jobless", title: "চাকরির সন্ধানরত/বেকার", for: "both" },
    { id: "family_property", title: "পারিবারিক সম্পত্তি", for: "both" },
    { id: "no_occupation", title: "পেশা নেই/কর্মহীন", for: "both" },
    { id: "other_occupation", title: "অন্যান্য", for: "both" },
  ],
  education: [
    { id: "qawmi", title: "কওমি", for: "both" },
    { id: "alia", title: "আলিয়া", for: "both" },
    { id: "diploma", title: "ডিপ্লোমা", for: "both" },
    { id: "bachelor", title: "স্নাতক", for: "both" },
    { id: "masters", title: "স্নাতকোত্তর", for: "both" },
    { id: "doctoral", title: "ডক্টরাল", for: "both" },
    { id: "bcs", title: "বি.সি.এস (BCS)", for: "both" },
    { id: "medical", title: "মেডিকেল", for: "both" },
    { id: "defense", title: "ডিফেন্স", for: "both" },
    { id: "police_law", title: "পুলিশ/আইন-শৃঙ্খলা বাহিনী", for: "both" },
    { id: "aviation", title: "এভিয়েশন", for: "both" },
  ],
  religiousEducation: [
    { id: "hafiz_male", title: "হাফেজ", for: "BRIDE" },
    { id: "hafiza_female", title: "হাফেজা", for: "GROOM" },
    { id: "maulana_male", title: "মাওলানা", for: "BRIDE" },
    { id: "alema_female", title: "আলেমা", for: "GROOM" },
    { id: "mufti_male", title: "মুফতি", for: "BRIDE" },
    { id: "muftia_female", title: "মুফতিয়া", for: "GROOM" },
    { id: "muhaddis_male", title: "মুহাদ্দিস", for: "BRIDE" },
    { id: "muhaddisa_female", title: "মুহাদ্দিসা", for: "GROOM" },
    { id: "mufassir", title: "মুফাসসির", for: "both" },
    { id: "faqih", title: "ফকিহ", for: "both" },
    { id: "daee_male", title: "দা'য়ী", for: "BRIDE" },
    { id: "daiya_female", title: "দাঈয়া", for: "GROOM" },
    { id: "adib", title: "আদিব", for: "both" },
    { id: "qari_male", title: "ক্বারী", for: "BRIDE" },
    { id: "qaria_female", title: "ক্বারিয়া", for: "GROOM" },
    { id: "talib_quran", title: "তালিবে কুরআন", for: "both" },
    { id: "tajwid_student", title: "তাজবীদ শিক্ষার্থী", for: "both" },
    { id: "muallim_talim", title: "মুয়াল্লিমুন ফি তালিম", for: "both" },
    { id: "islamic_scholar", title: "ইসলামিক স্কলার", for: "both" },
  ],
  familyBackgrounds: [
    { id: "upper_class", title: "উচ্চবিত্ত", for: "both" },
    { id: "upper_middle", title: "উচ্চ মধ্যবিত্ত", for: "both" },
    { id: "middle", title: "মধ্যবিত্ত", for: "both" },
    { id: "lower_middle", title: "নিম্ন মধ্যবিত্ত", for: "both" },
    { id: "lower_class", title: "নিম্নবিত্ত", for: "both" },
  ],
  madhhab: [
    { id: "hanafi", title: "হানাফি", for: "both" },
    { id: "salafi", title: "সালাফি/আহলে হাদিস", for: "both" },
    { id: "shafi", title: "শাফেঈ", for: "both" },
    { id: "maliki", title: "মালিকী", for: "both" },
    { id: "hambali", title: "হাম্বলি", for: "both" },
    { id: "other_madhhab", title: "অন্যান্য", for: "both" },
    { id: "unknown_madhhab", title: "জানা নেই", for: "both" },
  ],
  bloodGroup: [
    { id: "A+", title: "A+", for: "both" },
    { id: "B+", title: "B+", for: "both" },
    { id: "A-", title: "A-", for: "both" },
    { id: "B-", title: "B-", for: "both" },
    { id: "AB+", title: "AB+", for: "both" },
    { id: "AB-", title: "AB-", for: "both" },
    { id: "O+", title: "O+", for: "both" },
    { id: "O-", title: "O-", for: "both" },
  ],
  specialCategory: [
    { id: "expatriate", title: "প্রবাসী", for: "both" },
    {
      id: "foreign_citizen",
      title: "ফরেইন সিটিজেন",
      for: "both",
    },
    {
      id: "social_worker",
      title: "সমাজ সেবক",
      for: "both",
    },
    { id: "tabligh", title: "তাবলীগ", for: "both" },
    {
      id: "deen_service",
      title: "দ্বীনের খেদমতকারী",
      for: "both",
    },
    { id: "new_muslim", title: "নওমুসলিম", for: "both" },
    {
      id: "disabled",
      title: "প্রতিবন্ধী",
      for: "both",
    },
    { id: "orphan", title: "এতিম", for: "both" },
    {
      id: "infertile",
      title: "বন্ধ্যা/ইনফার্টিলিটি",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "শর্ট ডিভোর্সি",
      for: "both",
    },
    {
      id: "single_father",
      title: "সিঙ্গেল ফাদার",
      for: "male",
    },
    {
      id: "single_mother",
      title: "সিঙ্গেল মাদার",
      for: "female",
    },
    {
      id: "short_height",
      title: "স্বল্প উচ্চতার",
      for: "both",
    },
    { id: "older_age", title: "বয়সে বেশি", for: "both" },
    {
      id: "urban_resident",
      title: "শহরে বসবাসকারী",
      for: "both",
    },
    {
      id: "rural_resident",
      title: "গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "allow_wife_job",
      title: "স্ত্রীকে চাকরি/ব্যবসা করতে দিবে",
      for: "male",
    },
    {
      id: "allow_wife_study",
      title: "স্ত্রীকে পড়াশোনা করতে দিবে",
      for: "male",
    },
    {
      id: "employed_female",
      title: "চাকরিজীবী",
      for: "female",
    },
    {
      id: "job_interest_post_marriage",
      title: "বিয়ের পর চাকরি/ব্যাবসায় আগ্রহী",
      for: "female",
    },
    {
      id: "masna_interest",
      title: "মাসনায় আগ্রহী",
      for: "female",
    },
  ],
};

export const beingSearchedFilters = {
  selfBiodataType: [
    { id: "BRIDE", title: "আমি পাত্র" },
    {
      id: "GROOM",
      title: "আমি পাত্রী",
    },
  ],
  specialCategory: [
    {
      id: "expatriate",
      title: "আমি একজন প্রবাসী",
      for: "both",
    },
    {
      id: "foreign_citizen",
      title: "আমার ফরেইন সিটিজেনশিপ আছে",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "আমি শর্ট ডিভোর্সি বা ডিভোর্সড",
      for: "both",
    },
    {
      id: "widowed_male",
      title: "আমি বিপত্নীক",
      for: "BRIDE",
    },
    {
      id: "widowed_female",
      title: "আমি বিধবা",
      for: "GROOM",
    },
    {
      id: "single_father",
      title: "আমি সিঙ্গেল ফাদার (সন্তান আছে কিন্তু মা নেই বা দায়িত্বে নেই)",
      for: "BRIDE",
    },
    {
      id: "single_mother",
      title: "আমি সিঙ্গেল মাদার (সন্তান আছে কিন্তু বাবা নেই বা দায়িত্বে নেই)",
      for: "GROOM",
    },
    {
      id: "second_marriage_male",
      title: "আমি মাসনা বা দ্বিতীয় বিবাহে আগ্রহী",
      for: "BRIDE",
    },
    {
      id: "second_marriage_female",
      title: "আমি দ্বিতীয় স্ত্রী বা মাসনা হতে আগ্রহী",
      for: "GROOM",
    },
    {
      id: "short_height",
      title: "আমি স্বল্প উচ্চতার",
      for: "both",
    },
    {
      id: "older_age",
      title: "আমি বয়সে বেশি",
      for: "both",
    },
    {
      id: "village_resident",
      title: "আমি গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "dark_complexion",
      title: "আমার গায়ের বর্ণ গাঢ়",
      for: "GROOM",
    },
    {
      id: "infertility",
      title: "আমি বন্ধ্যাত্ব সমস্যায় ভুগছি",
      for: "both",
    },
    {
      id: "new_muslim",
      title: "আমি একজন নওমুসলিম",
      for: "both",
    },
    { id: "orphan", title: "আমি এতিম", for: "both" },
    {
      id: "disabled",
      title: "আমি প্রতিবন্ধী",
      for: "both",
    },
    {
      id: "religious_service",
      title: "আমি দ্বীনের খেদমতে আছি",
      for: "both",
    },
    {
      id: "tabligh",
      title: "আমি তাবলীগ এর সাথে যুক্ত",
      for: "both",
    },
    {
      id: "social_worker",
      title: "আমি একজন সমাজ সেবক",
      for: "both",
    },
    {
      id: "employed",
      title: "আমি একজন চাকরিজীবী",
      for: "both",
    },
    {
      id: "post_marriage_job",
      title: "আমি বিয়ের পর চাকরি / ব্যাবসায় আগ্রহী",
      for: "both",
    },
    {
      id: "post_marriage_study",
      title: "আমি বিয়ের পর পড়াশোনা করতে আগ্রহী",
      for: "both",
    },
  ],
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodataPage.tsx
// --------------------
// src/app/(main)/biodatas/listPageComponentes/BiodataPage.tsx

"use client";
import { useGetAllBiodatasQuery } from "@/redux/features/admin/biodataApi";
import { useDebounced } from "@/redux/hooks";
import { useMemo, useState } from "react";
import BiodatasPageCard from "./BiodatasPageCard";
import BiodatasPageFilters from "./BiodatasPageFilters";
import BiodatasPageSearchByBiodataNo from "./SearchByBiodataNo";

const BiodataPage = () => {
  const [fileList, setFileList] = useState<any[]>([]);
  const [modalActive, setModalActive] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [filterActive, setFilterActive] = useState(false);
  const [filters, setFilters] = useState({});
  const [selectedData, setSelectedData] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [pagination, setPagination] = useState({
    page: 1,
    pageSize: 25,
    sortOrder: "desc",
    sortBy: "createdAt",
  });
  const debouncedTerm = useDebounced({ searchQuery: searchTerm, delay: 600 });

  // Query
  const query = useMemo(
    () => ({
      page: pagination.page,
      limit: pagination.pageSize,
      sortBy: pagination.sortBy,
      sortOrder: pagination.sortOrder,
      ...(debouncedTerm && { searchTerm: debouncedTerm }),
      ...filters,
    }),
    [pagination, debouncedTerm, filters]
  );

  const { data: biodatas, isLoading } = useGetAllBiodatasQuery(query, {
    refetchOnMountOrArgChange: true,
  });

  console.log("biodatas", biodatas);
  // Handle filter change
  const handleFilter = (newFilters: Record<string, any>) => {
    setFilters(newFilters);
    setFilterActive(Object.keys(newFilters).length > 0);
  };

  // Handle reset
  const handleReset = () => {
    setFilters({});
    setSearchTerm("");
    setFilterActive(false);
    setFileList([]);
    setModalActive(false);
    setSelectedData(null);
    setIsEdit(false);
    setPagination({
      page: 1,
      pageSize: 25,
      sortOrder: "desc",
      sortBy: "createdAt",
    });
  };

  return (
    <div className="flex justify-between container mx-auto gap-5">
      <BiodatasPageFilters
        onFilterChange={handleFilter}
        onReset={handleReset}
      />
      <div className="flex-grow max-w-7xl">
        <div className="flex justify-end items-center mb-6">
          <BiodatasPageSearchByBiodataNo />
        </div>
        {isLoading ? (
          <div className="text-center py-4">Loading...</div>
        ) : biodatas && biodatas.data.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {biodatas?.data?.map((biodata) => (
              <BiodatasPageCard key={biodata.id} {...biodata} />
            ))}
          </div>
        ) : (
          <div className="text-center py-4">No biodatas found</div>
        )}
      </div>
      {/* <BiodatasPageAppliedFilters /> */}
    </div>
  );
};

export default BiodataPage;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageAppliedFilters.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageAppliedFilters.tsx

import { X } from "lucide-react";

export default function BiodatasPageAppliedFilters() {
  const appliedFilters = [
    {
      id: 1,
      name: "বায়োডাটার ধরন",
      selected: [
        {
          id: 1,
          name: "পুরুষ",
        },
      ],
    },
    {
      id: 2,
      name: "বৈবাহিক অবস্থা",
      selected: [
        {
          id: 1,
          name: "অবিবাহিত",
        },
        {
          id: 2,
          name: "বিবাহিত",
        },
      ],
    },
  ];

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">আপনি বাছাই করেছেন</div>
      </div>
      <div className="flex flex-col space-y-4">
        {appliedFilters.length > 0 &&
          appliedFilters.map((x) => (
            <div
              key={x.id}
              className="flex flex-col space-y-3 text-black text-xs border border-gray-300 rounded-xl px-6 py-2"
            >
              {x.selected.length > 0 &&
                x.selected.map((y) => (
                  <div key={y.id} className="flex justify-between items-center">
                    <div>{y.name}</div>
                    <X className="text-[#e25a6f] w-4 h-4" />
                  </div>
                ))}
            </div>
          ))}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageCard.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageCard.tsx

"use client";
import male from "@/assets/images/male-5.svg";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Heart } from "lucide-react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export interface BiodatasPageCardProps {
  id: number;
  name: string;
  code: number;
  age: number;
  height: number;
  permanentAddress: string;
  occupation: string;
  maritalStatus: string;
}

export default function BioCard({
  id,
  name,
  code,
  age,
  height,
  permanentAddress,
  occupation,
  maritalStatus,
}: BiodatasPageCardProps) {
  const router = useRouter();
  const handleOnClick = () => {
    router.push(`/biodatas/${id}`);
  };
  return (
    <Card
      key={id}
      className="border-none overflow-hidden bg-gradient-to-t from-[#e6f2ff] to-[#fff0f6]"
    >
      <CardContent className="p-4">
        <div className="flex justify-between items-start mb-4">
          <div className="w-1/3">
            <Heart className="w-8 h-8 text-[#E25A6F]" fill="#E25A6F" />
          </div>
          <div className="w-1/3 flex items-center justify-center">
            <Image src={male} alt="Male" width={80} height={40} priority />
          </div>
          <div className="w-1/3 flex flex-col items-end space-y-2">
            <Badge className="text-[#00b754]">Verified</Badge>
            <Badge className="text-[#016ca7]">Seen</Badge>
          </div>
        </div>

        <div className="text-center mb-4 flex items-center justify-center">
          <div className="text-black bg-[#fcfafd] p-3 rounded-md">
            বায়োডাটা নং: {code}
          </div>
        </div>

        <div className="space-y-3 text-black">
          <div className="flex justify-between">
            <span>বৈবাহিক অবস্থা:</span>
            <span>{maritalStatus}</span>
          </div>
          <div className="flex justify-between">
            <span>জন্মসন:</span>
            <span>{age}</span>
          </div>
          <div className="flex justify-between">
            <span>উচ্চতা:</span>
            <span>{height}</span>
          </div>
          <div className="flex justify-between">
            <span>স্থায়ী ঠিকানা:</span>
            <span>{permanentAddress}</span>
          </div>
          <div className="flex justify-between">
            <span>পেশা:</span>
            <span>{occupation[0]}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          className="w-full text-white bg-[#E25A6F]  hover:bg-[#D14A5F]"
          onClick={handleOnClick}
        >
          বায়োডাটা দেখুন
        </Button>
      </CardFooter>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageFilters.tsx
// --------------------
"use client";

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { beingSearchedFilters, searchingFilters } from "./biodataFilterOptions";
import { FilterAccordion } from "./FilterAccordian";

interface BiodatasPageFiltersProps {
  onFilterChange: (filters: Record<string, any>) => void;
  onReset: () => void;
}

export default function BiodatasPageFilters({
  onFilterChange,
  onReset,
}: BiodatasPageFiltersProps) {
  const searchParams = useSearchParams();
  const [activeTab, setActiveTab] = useState<"searching" | "beingSearched">(
    "searching"
  );
  const [ageRange, setAgeRange] = useState<[number, number]>([18, 80]);
  const [heightRange, setHeightRange] = useState<[number, number]>([36, 84]);
  const [selectedFilters, setSelectedFilters] = useState<
    Record<string, string | string[] | [number, number]>
  >({});

  // Initialize filters from URL query parameters
  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString());
    const initialFilters: Record<string, any> = {};

    // Single value filters
    const singleValueKeys = [
      "biodataType",
      "maritalStatus",
      "location",
      "religiousLifestyle",
      // Remove ageMin and ageMax from here since they’re handled separately
    ];
    singleValueKeys.forEach((key) => {
      const value = params.get(key);
      if (value) initialFilters[key] = value;
    });

    // Range filters (e.g., age)
    const ageMin = params.get("ageMin");
    const ageMax = params.get("ageMax");
    if (ageMin && ageMax) {
      const min = parseInt(ageMin, 10);
      const max = parseInt(ageMax, 10);
      if (!isNaN(min) && !isNaN(max)) {
        initialFilters["age"] = [min, max];
        // Only update ageRange if it’s different from the current value
        if (ageRange[0] !== min || ageRange[1] !== max) {
          setAgeRange([min, max]);
        }
      }
    }

    // Only update selectedFilters if it’s different from the current value
    if (JSON.stringify(selectedFilters) !== JSON.stringify(initialFilters)) {
      setSelectedFilters(initialFilters);
      onFilterChange(initialFilters);
    }
  }, [searchParams, ageRange, selectedFilters]);

  // Radio change handler
  const handleRadioChange = (key: string, value: string) => {
    setSelectedFilters((prev) => {
      const newFilters = { ...prev, [key]: value };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Checkbox change handler
  const handleCheckboxChange = (
    key: string,
    value: string,
    checked: boolean
  ) => {
    setSelectedFilters((prev) => {
      const currentValues = Array.isArray(prev[key])
        ? [...(prev[key] as string[])]
        : [];
      if (checked) {
        currentValues.push(value);
      } else {
        const index = currentValues.indexOf(value);
        if (index > -1) currentValues.splice(index, 1);
      }
      const newFilters = { ...prev, [key]: currentValues };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Slider change handler
  const handleSliderChange = (key: string, value: [number, number]) => {
    if (key === "age" || key === "partner_age") setAgeRange(value);
    if (key === "height" || key === "partner_height") setHeightRange(value);
    const newFilters = { ...selectedFilters, [key]: value };
    setSelectedFilters(newFilters);
    onFilterChange(newFilters);
  };

  // Tab change handler
  const handleTabChange = (tab: "searching" | "beingSearched") => {
    setActiveTab(tab);
    setSelectedFilters({});
    setAgeRange([18, 80]);
    setHeightRange([36, 84]);
    onFilterChange({});
  };

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">ফিল্টার করুন</div>
      </div>
      {/* Filter buttons */}
      <div className="flex justify-center mb-4">
        <button
          className={`mr-[-1rem] rounded-xl py-3 px-4 z-10 ${
            activeTab === "searching"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("searching")}
        >
          আমি খুঁজছি
        </button>
        <button
          className={`py-3 rounded-xl px-4 ${
            activeTab === "beingSearched"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("beingSearched")}
        >
          আমাকে খুঁজছে
        </button>
      </div>
      {/* Filter accordion */}
      <form className="flex flex-col space-y-2">
        <Accordion type="multiple" className="flex flex-col space-y-2 mb-2">
          {activeTab === "searching" ? (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="biodataType"
                options={searchingFilters.biodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বৈবাহিক অবস্থা"
                title="বৈবাহিক অবস্থা"
                contentType="radio"
                filterKey="maritalStatus"
                options={searchingFilters.maritalStatus}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বয়স"
                title="বয়স"
                contentType="slider"
                filterKey="age"
                range={ageRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("age", val)
                }
                min={18}
                max={80}
              />
              <FilterAccordion
                value="উচ্চতা"
                title="উচ্চতা"
                contentType="slider"
                filterKey="height"
                range={heightRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("height", val)
                }
                min={36}
                max={84}
              />
              <FilterAccordion
                value="গাত্রবর্ণ"
                title="গাত্রবর্ণ"
                contentType="radio"
                filterKey="complexion"
                options={searchingFilters.skinTones}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="স্থায়ী ঠিকানা"
                title="স্থায়ী ঠিকানা"
                contentType="radio"
                filterKey="permanentAddress"
                options={searchingFilters.permanentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বর্তমান ঠিকানা"
                title="বর্তমান ঠিকানা"
                contentType="radio"
                filterKey="currentAddress"
                options={searchingFilters.currentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="ধর্মীয় লাইফস্টাইল"
                title="ধর্মীয় লাইফস্টাইল"
                contentType="radio"
                filterKey="religiousLifestyle"
                options={searchingFilters.religiousLifestyle}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পেশা"
                title="পেশা"
                contentType="radio"
                filterKey="occupation"
                options={searchingFilters.occupation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="শিক্ষা"
                title="শিক্ষা"
                contentType="radio"
                filterKey="education"
                options={searchingFilters.education}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="দ্বীনি যোগ্যতা"
                title="দ্বীনি যোগ্যতা"
                contentType="radio"
                filterKey="religiousEducation"
                options={searchingFilters.religiousEducation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পরিবারের আর্থসামাজিক অবস্থা"
                title="পরিবারের আর্থসামাজিক অবস্থা"
                contentType="radio"
                filterKey="familyStatus"
                options={searchingFilters.familyBackgrounds}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="মাজহাব/মানহাজ"
                title="মাজহাব/মানহাজ"
                contentType="radio"
                filterKey="madhhab"
                options={searchingFilters.madhhab}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="রক্তের গ্রুপ"
                title="রক্তের গ্রুপ"
                contentType="radio"
                filterKey="bloodGroup"
                options={searchingFilters.bloodGroup}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={searchingFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
            </>
          ) : (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="selfBiodataType"
                options={beingSearchedFilters.selfBiodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={beingSearchedFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
              <AccordionItem
                className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
                value="যেমন জীবনসঙ্গী আশা করেন"
              >
                <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
                  যেমন জীবনসঙ্গী আশা করেন
                </AccordionTrigger>
                <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
                  <Accordion
                    type="multiple"
                    className="flex flex-col space-y-2"
                  >
                    <FilterAccordion
                      value="partner_biodataType"
                      title="জীবনসঙ্গীর বায়োডাটার ধরন"
                      contentType="radio"
                      filterKey="partner_biodataType"
                      options={searchingFilters.biodataType}
                      selectedFilters={
                        selectedFilters as Record<string, string>
                      }
                      handleRadioChange={handleRadioChange}
                    />
                    <FilterAccordion
                      value="partner_maritalStatus"
                      title="জীবনসঙ্গীর বৈবাহিক অবস্থা"
                      contentType="checkbox"
                      filterKey="partner_maritalStatus"
                      options={searchingFilters.maritalStatus}
                      selectedFilters={
                        selectedFilters as Record<string, string[]>
                      }
                      handleCheckboxChange={handleCheckboxChange}
                    />
                    <FilterAccordion
                      value="partner_age"
                      title="জীবনসঙ্গীর বয়স"
                      contentType="slider"
                      filterKey="partner_age"
                      range={ageRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_age", val)
                      }
                      min={18}
                      max={80}
                    />
                    <FilterAccordion
                      value="partner_height"
                      title="জীবনসঙ্গীর উচ্চতা"
                      contentType="slider"
                      filterKey="partner_height"
                      range={heightRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_height", val)
                      }
                      min={36}
                      max={84}
                    />
                  </Accordion>
                </AccordionContent>
              </AccordionItem>
            </>
          )}
        </Accordion>
        <button
          type="button"
          className="py-2 px-4 bg-[#e25a6f] text-white rounded-xl"
          onClick={() => {
            setSelectedFilters({});
            setAgeRange([18, 80]);
            setHeightRange([36, 84]);
            onReset();
          }}
        >
          ফিল্টার রিসেট
        </button>
      </form>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\FilterAccordian.tsx
// --------------------
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Slider } from "@/components/ui/slider";

interface FilterAccordionProps {
  value: string;
  title: string;
  contentType: string;
  filterKey?: string;
  options?: { id: string; title: string }[];
  selectedFilters?: Record<string, string | string[]>;
  handleRadioChange?: (key: string, value: string) => void;
  handleCheckboxChange?: (key: string, value: string, checked: boolean) => void;
  range?: number[];
  onRangeChange?: (value: number[]) => void;
  min?: number;
  max?: number;
}

export const FilterAccordion = (props: FilterAccordionProps) => {
  const { value, title, contentType } = props;

  // Validation for radio
  if (
    contentType === "radio" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleRadioChange)
  ) {
    return null;
  }

  // Validation for checkbox
  if (
    contentType === "checkbox" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleCheckboxChange)
  ) {
    return null;
  }

  // Validation for slider
  if (
    contentType === "slider" &&
    (!props.filterKey ||
      !props.range ||
      !props.onRangeChange ||
      props.min === undefined ||
      props.max === undefined)
  ) {
    return null;
  }

  const renderRadioGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleRadioChange: (key: string, value: string) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <RadioGroup
        value={(selectedFilters[key] as string) || ""}
        onValueChange={(value) => handleRadioChange(key, value)}
      >
        {options.map((option) => (
          <div key={option.id} className="flex items-center space-x-2">
            <RadioGroupItem value={option.id} id={`${key}-${option.id}`} />
            <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
          </div>
        ))}
      </RadioGroup>
    </AccordionContent>
  );

  const renderCheckboxGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleCheckboxChange: (key: string, value: string, checked: boolean) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      {options.map((option) => (
        <div key={option.id} className="flex items-center space-x-2">
          <Checkbox
            id={`${key}-${option.id}`}
            checked={
              (selectedFilters[key] as string[])?.includes(option.id) || false
            }
            onCheckedChange={(checked) =>
              handleCheckboxChange(key, option.id, checked as boolean)
            }
          />
          <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
        </div>
      ))}
    </AccordionContent>
  );

  const renderSlider = (
    key: string,
    label: string,
    value: number[],
    onChange: (value: number[]) => void,
    min: number,
    max: number
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <div className="flex items-center space-x-2">
        <div className="text-[#1f4f69]">{value[0]}</div>
        <Slider
          value={value}
          onValueChange={(val) => onChange(val)}
          min={min}
          max={max}
          step={1}
          className="w-full"
        />
        <div className="text-[#1f4f69]">{value[1]}</div>
      </div>
    </AccordionContent>
  );

  return (
    <AccordionItem
      className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
      value={value}
    >
      <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
        {title}
      </AccordionTrigger>
      {contentType === "radio" &&
        renderRadioGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleRadioChange
        )}
      {contentType === "checkbox" &&
        renderCheckboxGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleCheckboxChange
        )}
      {contentType === "slider" &&
        renderSlider(
          props.filterKey,
          title,
          props.range,
          props.onRangeChange,
          props.min,
          props.max
        )}
    </AccordionItem>
  );
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\SearchByBiodataNo.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/SearchByBiodataNo.tsx

import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Search } from "lucide-react";

export default function BiodatasPageSearchByBiodataNo() {
  return (
    <form className="flex items-center space-x-4">
      <div className="w-32">
        <Select>
          <SelectTrigger className="text-[#1f4f69]">
            <SelectValue placeholder="SNM" />
          </SelectTrigger>
          <SelectContent className="bg-white text-[#1f4f69]">
            {/* <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="all"
            >
              SNM
            </SelectItem> */}
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="male"
            >
              পুরুষ
            </SelectItem>
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="female"
            >
              নারী
            </SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="relative w-64">
        <div className="space-y-2">
          <Input
            className="w-full px-4 py-2 border rounded-md text-[#1f4f69] selection:bg-[#E25A6F] selection:text-white"
            id="biodataNo"
            type="text"
            placeholder="বায়োডাটা নং"
          />
        </div>
        <button className="absolute right-3 top-1/2 transform -translate-y-1/2">
          <Search className="w-4 h-4 text-gray-400" />
        </button>
      </div>
    </form>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\page.tsx
// --------------------
import BiodataPage from "./listPageComponentes/BiodataPage";

export default function BiodatasPage() {
  return (
    <>
      <div className="mt-12 text-3xl text-center text-black mb-4 ">
        বায়োডাটা সমূহ
      </div>
      <BiodataPage />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\page.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/page.tsx
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import AddressInfo from "./viewBioDataComponents/AddressInfo";
import EducationAndOccupationInfo from "./viewBioDataComponents/EducationAndOccupationInfo";
import FamilyInfo from "./viewBioDataComponents/FamilyInfo";
import FooterSection from "./viewBioDataComponents/FooterSection";
import GeneralInfo from "./viewBioDataComponents/GeneralInfo";
import HeaderSection from "./viewBioDataComponents/HeaderSection";
import MarriageInfo from "./viewBioDataComponents/MarriageInfo";
import PersonalInfo from "./viewBioDataComponents/PersonalInfo";
import PrimaryInfo from "./viewBioDataComponents/PrimaryInfo";
import ReligiousInfo from "./viewBioDataComponents/ReligiousInfo";
import SpousePreferenceInfo from "./viewBioDataComponents/SpousePreferenceInfo";

export default function BiodataPage() {
  const tabs = [
    "প্রাথমিক তথ্য",
    "সাধারণ তথ্য",
    "ঠিকানা",
    "শিক্ষা ও পেশা",
    "পারিবারিক তথ্য",
    "ধর্মীয় লাইফস্টাইল",
    "ব্যক্তিগত তথ্য",
    "বিয়ে সংক্রান্ত তথ্য",
    "যেমন জীবনসঙ্গী আশা করেন",
  ];

  return (
    <>
      <HeaderSection />
      <div className="py-12 flex flex-col items-center justify-center space-y-6">
        <div className="text-4xl text-center text-black">সম্পূর্ণ বায়োডাটা</div>
        <Tabs defaultValue="ঠিকানা" className="max-w-7xl">
          <TabsList className="flex flex-wrap h-auto space-x-2 bg-[#f6f6f6] rounded-2xl p-2">
            {tabs.map((tab) => (
              <TabsTrigger
                key={tab}
                value={tab}
                className="data-[state=active]:bg-[#e25a6f] data-[state=active]:text-white text-[#004972] rounded-full px-4 py-2"
              >
                {tab}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>

        <div className="w-full max-w-6xl space-y-6">
          <PrimaryInfo />
          <GeneralInfo />
          <AddressInfo />
          <EducationAndOccupationInfo />
          <FamilyInfo />
          <ReligiousInfo />
          <PersonalInfo />
          <MarriageInfo />
          <SpousePreferenceInfo />
        </div>
      </div>
      <FooterSection />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/AddressInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function AddressInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ঠিকানা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোথায় বেড়ে উঠেছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\EducationAndOccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/EducationAndOccupationInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function EducationAndOccupationInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          শিক্ষাগত যোগ্যতা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষার ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">জেনারেল</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এস.এস.সি/দাখিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এস.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এইচ.এস.সি/আলিম/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এইচ.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(ডিপ্লোমা):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">ডিপ্লোমা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(অনার্স/ফাজিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অনার্স</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(মাস্টার্স/কামিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>

        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা নিয়ে বিস্তারিত লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাসিক আয়:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FamilyInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function FamilyInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          পারিবারিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পিতা-মাতা উভয়েই জীবিত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনারা ভাই-বোন কতজন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ভাই-বোন কে কি করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">চাচা মামাদের পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">যৌথ পরিবার</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পারিবারিক বিষয়ে আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FooterSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FooterSection.tsx

import { Card, CardContent } from "@/components/ui/card";
import Link from "next/link";
export default function FooterSection() {
  return (
    <div className="py-12 flex flex-col items-center justify-center">
      <div className="text-4xl text-center text-[#004972] mb-4">
        বায়োডাটা পছন্দ হয়েছে?
      </div>
      <div className="text-md text-center text-black mb-8">
        আপনি আগ্রহী হলে আপনার জন্য ৩টি অপশন রয়েছে।
      </div>
      <div className="max-w-6xl flex space-x-6 text-black">
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                প্রাথমিক প্রস্তাব পাঠিয়ে আপনার প্রতি আগ্রহী কিনা জানতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                প্রাথমিক প্রস্তাব পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                ছবি দেখার জন্য অনুরোধ পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                যোগাযোগ তথ্য দেখুন
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        {/* <div>পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন</div>
        <div>সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন</div> */}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/GeneralInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function GeneralInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          সাধারণ তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জন্ম তারিখ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অবিবাহিত</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'১"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ওজন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">রক্তের গ্রুপ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">AB−</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জাতীয়তা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বাংলাদেশী, ফরেইন সিটিজেন
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSection.tsx

import male from "@/assets/images/male-5.svg";
import { Card, CardContent } from "@/components/ui/card";
import {
  CircleChevronDown,
  Copy,
  Heart,
  IdCard,
  Mail,
  Send,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import HeaderShortBio from "./HeaderShortBio";
import HeaderSpousePreferenceRequierment from "./HeaderSpousePreferenceRequierment";

export default function HeaderSection() {
  return (
    <div className="py-12 flex justify-center bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <div className="min-w-7xl flex space-x-8">
        <div className="w-1/4 flex flex-col space-y-8">
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col items-center space-y-4">
                <div className="w-full flex items-start justify-between">
                  <div className="w-1 text-[#00b754] text-md font-semibold">
                    Verified
                  </div>
                  <Image
                    src={male}
                    alt="Male"
                    width={100}
                    height={40}
                    priority
                  />
                  <div className="w-1"></div>
                </div>

                <div className="text-lg">
                  বায়োডাটা কোড: <span className="font-semibold">SNM-392</span>
                </div>

                <div className="flex space-x-4 border border-gray-400 rounded-xl p-4">
                  <Heart className="h-6 w-6" />
                  <IdCard className="h-6 w-6" />
                  <Copy className="h-6 w-6 rotate-90" />
                  <Mail className="h-6 w-6" />
                  <CircleChevronDown className="h-6 w-6 text-[#b52d1f]" />
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col space-y-4">
                <div className="text-xl font-medium text-center mb-4 text-[#b52d1f]">
                  আপনি আগ্রহী?
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col">
                    <div>প্রাথমিক প্রস্তাব পাঠান</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col space-x-2">
                    <div>অভিভাবকের যোগাযোগ তথ্য দেখুন</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <Link
                  href="/tutorial"
                  className="text-xs text-center hover:underline text-blue-300"
                >
                  (বিস্তারিত জানুন)
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="w-3/4 flex space-x-8">
          <HeaderShortBio />
          <HeaderSpousePreferenceRequierment />
        </div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderShortBio.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderShortBio.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderShortBio() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          পাত্রের সংক্ষিপ্ত বিবরণ
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSpousePreferenceRequierment.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSpousePreferenceRequierment.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderSpousePreferenceRequierment() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          যেমন জীবনসঙ্গী আশা করেন
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/MarriageInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function MarriageInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          বিয়ে সংক্রান্ত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?</div> */}
          <div className="w-1/2">
            বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">
            বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?
          </div> */}
          <div className="w-1/2">
            আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?</div> */}
          <div className="w-1/2">
            যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* Male only */}
          <div className="w-1/2">
            বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে
            পারবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক বা উপহার
            বা অর্থ আশা করবেন কিনা?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পাত্রপক্ষ/পাত্রীপক্ষ অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিয়ে সংক্রান্ত আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PersonalInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PersonalInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ব্যক্তিগত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি দাড়ি পছন্দ?/দাড়ি রেখেছেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পরতে পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মানসিক বা শারীরিক কোনো রোগ আছে কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের কিছু গুণাবলী চিহ্নিত করুন</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শান্ত-শিষ্ট, ধৈর্যশীল, ইমোশনাল
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            আমি একজন সমাজ সেবক, আমি বন্ধ্যা-ইনফার্টিলিটি
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের মতো করে নিজের সম্পর্কে কিছু লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            রাজনীতি নিয়ে আপনার দৃষ্টিভঙ্গি কি? এর সাথে যুক্ত থাকলে বিস্তারিত
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অবসর সময়ে কি করতে পছন্দ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">সামাজিক বা ধর্মীয় কোনো কাজে যুক্ত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কিছু বইয়ের নাম (যদি পড়ে থাকেন)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">দৈনন্দিন খাবারে কি কি পছন্দ এবং অপছন্দ?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কয়েকজন ব্যক্তিত্বের নাম যাদেরকে নিয়মিত ফলো করেন
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার জীবনের লক্ষ্য কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন কোন সোসাল মিডিয়া ব্যবহার করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার আগ্রহ ও শখ কি কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div> */}
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PrimaryInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PrimaryInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          প্রাথমিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটার ধরন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটা কার জন্য তৈরী করছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/ReligiousInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function ReligiousInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ধর্মীয় লাইফস্টাইল
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি কি আপনার জীবনকে পরিপূর্ণ ভাবে ইসলামিক বিধি-বিধান অনুযায়ী
            পরিচালনা করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            জেনারেল/নন-প্রাক্টিসিং
          </div>
        </div>

        {/* Non Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় কোন মতাদর্শ মেনে চলেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সুন্নি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন মাজহাব / মানহাজ অনুসরণ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সালাফি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">প্রতিদিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Try Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি নামাজ কাযা হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Common */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু করেছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Male */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">টাখনুর উপরে কাপড় পরেন কিনা?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Female */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কি নিকাব সহ পর্দা করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/SpousePreferenceInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function SpousePreferenceInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          যেমন জীবনসঙ্গী আশা করেন
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত বয়স:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'২"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিশেষ শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মুহাদ্দিসা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            অবিবাহিত, ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেন, শর্ট ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় লাইফস্টাইল:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আল্লাহ যাদেরকে গাঢ় ত্বক বা কালো বর্ণ দিয়েছেন, এরকম পাত্রীর প্রতি
            আপনি আগ্রহী?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div> */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শহরে বসবাসকারী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\biodataFilterOptions.ts
// --------------------
export const searchingFilters = {
  biodataType: [
    { id: "GROOM", title: "পাত্রের বায়োডাটা" },
    { id: "BRIDE", title: "পাত্রীর বায়োডাটা" },
  ],
  maritalStatus: [
    { id: "unmarried", title: "অবিবাহিত", for: "both" },
    { id: "married", title: "বিবাহিত", for: "both" },
    { id: "divorced", title: "ডিভোর্সড", for: "both" },
    { id: "widowed_male", title: "বিপত্নীক", for: "BRIDE" },
    { id: "widowed_female", title: "বিধবা", for: "GROOM" },
  ],
  skinTones: [
    { id: "dark", title: "গাঢ় ত্বক", for: "both" },
    { id: "medium", title: "শ্যামলা", for: "both" },
    { id: "light_medium", title: "উজ্জ্বল শ্যামলা", for: "both" },
    { id: "fair", title: "ফর্সা", for: "both" },
    { id: "very_fair", title: "উজ্জ্বল ফর্সা", for: "both" },
  ],
  permanentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  currentAddress: [
    { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
    { id: "foreign", title: "বিদেশ", for: "both" },
  ],
  religiousLifestyle: [
    { id: "devout", title: "পূর্ণ ধার্মিক/প্র্যাক্টিসিং", for: "both" },
    { id: "practicing", title: "প্রাক্টিসিংয়ের চেষ্টারত", for: "both" },
    { id: "general", title: "জেনারেল/নন-প্রাক্টিসিং", for: "both" },
  ],
  occupation: [
    { id: "business", title: "ব্যবসা", for: "both" },
    { id: "govt_job", title: "সরকারি চাকরিজীবী", for: "both" },
    { id: "private_job", title: "বেসরকারি চাকরিজীবী", for: "both" },
    { id: "home_tutor", title: "হোম টিউটর", for: "both" },
    { id: "teacher", title: "শিক্ষক/শিক্ষিকা", for: "both" },
    { id: "lawyer", title: "আইনজীবী", for: "both" },
    { id: "engineer", title: "ইঞ্জিনিয়ার", for: "both" },
    { id: "doctor", title: "ডাক্তার", for: "both" },
    { id: "vet_doctor", title: "ভেটেরিনারি ডাক্তার", for: "both" },
    { id: "nurse", title: "নার্স", for: "both" },
    { id: "pharmacist", title: "ফার্মাসিস্ট", for: "both" },
    { id: "paramedic", title: "প্যারামেডিক", for: "both" },
    { id: "therapist", title: "থেরাপিস্ট", for: "both" },
    { id: "medical_technologist", title: "মেডিকেল টেকনোলজিস্ট", for: "both" },
    {
      id: "medical_assistant",
      title: "মেডিক্যাল অ্যাসিস্ট্যান্ট",
      for: "both",
    },
    { id: "military_job", title: "সামরিক জব", for: "both" },
    { id: "paramilitary_job", title: "আধা সামরিক জব", for: "both" },
    { id: "imam", title: "ইমাম", for: "both" },
    { id: "muezzin", title: "মুয়াজ্জিন", for: "both" },
    { id: "pilot", title: "পাইলট", for: "both" },
    { id: "freelancer", title: "ফ্রিল্যান্সার", for: "both" },
    { id: "student", title: "শিক্ষার্থী", for: "both" },
    { id: "mbbs_bds_student", title: "MBBS/BDS শিক্ষার্থী", for: "both" },
    { id: "expatriate_job", title: "প্রবাসী-প্রবাস জব", for: "both" },
    { id: "manual_labor", title: "মিস্ত্রী/কায়িক শ্রম", for: "both" },
    { id: "agriculture", title: "কৃষিকাজ", for: "both" },
    { id: "jobless", title: "চাকরির সন্ধানরত/বেকার", for: "both" },
    { id: "family_property", title: "পারিবারিক সম্পত্তি", for: "both" },
    { id: "no_occupation", title: "পেশা নেই/কর্মহীন", for: "both" },
    { id: "other_occupation", title: "অন্যান্য", for: "both" },
  ],
  education: [
    { id: "qawmi", title: "কওমি", for: "both" },
    { id: "alia", title: "আলিয়া", for: "both" },
    { id: "diploma", title: "ডিপ্লোমা", for: "both" },
    { id: "bachelor", title: "স্নাতক", for: "both" },
    { id: "masters", title: "স্নাতকোত্তর", for: "both" },
    { id: "doctoral", title: "ডক্টরাল", for: "both" },
    { id: "bcs", title: "বি.সি.এস (BCS)", for: "both" },
    { id: "medical", title: "মেডিকেল", for: "both" },
    { id: "defense", title: "ডিফেন্স", for: "both" },
    { id: "police_law", title: "পুলিশ/আইন-শৃঙ্খলা বাহিনী", for: "both" },
    { id: "aviation", title: "এভিয়েশন", for: "both" },
  ],
  religiousEducation: [
    { id: "hafiz_male", title: "হাফেজ", for: "BRIDE" },
    { id: "hafiza_female", title: "হাফেজা", for: "GROOM" },
    { id: "maulana_male", title: "মাওলানা", for: "BRIDE" },
    { id: "alema_female", title: "আলেমা", for: "GROOM" },
    { id: "mufti_male", title: "মুফতি", for: "BRIDE" },
    { id: "muftia_female", title: "মুফতিয়া", for: "GROOM" },
    { id: "muhaddis_male", title: "মুহাদ্দিস", for: "BRIDE" },
    { id: "muhaddisa_female", title: "মুহাদ্দিসা", for: "GROOM" },
    { id: "mufassir", title: "মুফাসসির", for: "both" },
    { id: "faqih", title: "ফকিহ", for: "both" },
    { id: "daee_male", title: "দা'য়ী", for: "BRIDE" },
    { id: "daiya_female", title: "দাঈয়া", for: "GROOM" },
    { id: "adib", title: "আদিব", for: "both" },
    { id: "qari_male", title: "ক্বারী", for: "BRIDE" },
    { id: "qaria_female", title: "ক্বারিয়া", for: "GROOM" },
    { id: "talib_quran", title: "তালিবে কুরআন", for: "both" },
    { id: "tajwid_student", title: "তাজবীদ শিক্ষার্থী", for: "both" },
    { id: "muallim_talim", title: "মুয়াল্লিমুন ফি তালিম", for: "both" },
    { id: "islamic_scholar", title: "ইসলামিক স্কলার", for: "both" },
  ],
  familyBackgrounds: [
    { id: "upper_class", title: "উচ্চবিত্ত", for: "both" },
    { id: "upper_middle", title: "উচ্চ মধ্যবিত্ত", for: "both" },
    { id: "middle", title: "মধ্যবিত্ত", for: "both" },
    { id: "lower_middle", title: "নিম্ন মধ্যবিত্ত", for: "both" },
    { id: "lower_class", title: "নিম্নবিত্ত", for: "both" },
  ],
  madhhab: [
    { id: "hanafi", title: "হানাফি", for: "both" },
    { id: "salafi", title: "সালাফি/আহলে হাদিস", for: "both" },
    { id: "shafi", title: "শাফেঈ", for: "both" },
    { id: "maliki", title: "মালিকী", for: "both" },
    { id: "hambali", title: "হাম্বলি", for: "both" },
    { id: "other_madhhab", title: "অন্যান্য", for: "both" },
    { id: "unknown_madhhab", title: "জানা নেই", for: "both" },
  ],
  bloodGroup: [
    { id: "A+", title: "A+", for: "both" },
    { id: "B+", title: "B+", for: "both" },
    { id: "A-", title: "A-", for: "both" },
    { id: "B-", title: "B-", for: "both" },
    { id: "AB+", title: "AB+", for: "both" },
    { id: "AB-", title: "AB-", for: "both" },
    { id: "O+", title: "O+", for: "both" },
    { id: "O-", title: "O-", for: "both" },
  ],
  specialCategory: [
    { id: "expatriate", title: "প্রবাসী", for: "both" },
    {
      id: "foreign_citizen",
      title: "ফরেইন সিটিজেন",
      for: "both",
    },
    {
      id: "social_worker",
      title: "সমাজ সেবক",
      for: "both",
    },
    { id: "tabligh", title: "তাবলীগ", for: "both" },
    {
      id: "deen_service",
      title: "দ্বীনের খেদমতকারী",
      for: "both",
    },
    { id: "new_muslim", title: "নওমুসলিম", for: "both" },
    {
      id: "disabled",
      title: "প্রতিবন্ধী",
      for: "both",
    },
    { id: "orphan", title: "এতিম", for: "both" },
    {
      id: "infertile",
      title: "বন্ধ্যা/ইনফার্টিলিটি",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "শর্ট ডিভোর্সি",
      for: "both",
    },
    {
      id: "single_father",
      title: "সিঙ্গেল ফাদার",
      for: "male",
    },
    {
      id: "single_mother",
      title: "সিঙ্গেল মাদার",
      for: "female",
    },
    {
      id: "short_height",
      title: "স্বল্প উচ্চতার",
      for: "both",
    },
    { id: "older_age", title: "বয়সে বেশি", for: "both" },
    {
      id: "urban_resident",
      title: "শহরে বসবাসকারী",
      for: "both",
    },
    {
      id: "rural_resident",
      title: "গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "allow_wife_job",
      title: "স্ত্রীকে চাকরি/ব্যবসা করতে দিবে",
      for: "male",
    },
    {
      id: "allow_wife_study",
      title: "স্ত্রীকে পড়াশোনা করতে দিবে",
      for: "male",
    },
    {
      id: "employed_female",
      title: "চাকরিজীবী",
      for: "female",
    },
    {
      id: "job_interest_post_marriage",
      title: "বিয়ের পর চাকরি/ব্যাবসায় আগ্রহী",
      for: "female",
    },
    {
      id: "masna_interest",
      title: "মাসনায় আগ্রহী",
      for: "female",
    },
  ],
};

export const beingSearchedFilters = {
  selfBiodataType: [
    { id: "BRIDE", title: "আমি পাত্র" },
    {
      id: "GROOM",
      title: "আমি পাত্রী",
    },
  ],
  specialCategory: [
    {
      id: "expatriate",
      title: "আমি একজন প্রবাসী",
      for: "both",
    },
    {
      id: "foreign_citizen",
      title: "আমার ফরেইন সিটিজেনশিপ আছে",
      for: "both",
    },
    {
      id: "short_divorced",
      title: "আমি শর্ট ডিভোর্সি বা ডিভোর্সড",
      for: "both",
    },
    {
      id: "widowed_male",
      title: "আমি বিপত্নীক",
      for: "BRIDE",
    },
    {
      id: "widowed_female",
      title: "আমি বিধবা",
      for: "GROOM",
    },
    {
      id: "single_father",
      title: "আমি সিঙ্গেল ফাদার (সন্তান আছে কিন্তু মা নেই বা দায়িত্বে নেই)",
      for: "BRIDE",
    },
    {
      id: "single_mother",
      title: "আমি সিঙ্গেল মাদার (সন্তান আছে কিন্তু বাবা নেই বা দায়িত্বে নেই)",
      for: "GROOM",
    },
    {
      id: "second_marriage_male",
      title: "আমি মাসনা বা দ্বিতীয় বিবাহে আগ্রহী",
      for: "BRIDE",
    },
    {
      id: "second_marriage_female",
      title: "আমি দ্বিতীয় স্ত্রী বা মাসনা হতে আগ্রহী",
      for: "GROOM",
    },
    {
      id: "short_height",
      title: "আমি স্বল্প উচ্চতার",
      for: "both",
    },
    {
      id: "older_age",
      title: "আমি বয়সে বেশি",
      for: "both",
    },
    {
      id: "village_resident",
      title: "আমি গ্রামে বসবাসকারী",
      for: "both",
    },
    {
      id: "dark_complexion",
      title: "আমার গায়ের বর্ণ গাঢ়",
      for: "GROOM",
    },
    {
      id: "infertility",
      title: "আমি বন্ধ্যাত্ব সমস্যায় ভুগছি",
      for: "both",
    },
    {
      id: "new_muslim",
      title: "আমি একজন নওমুসলিম",
      for: "both",
    },
    { id: "orphan", title: "আমি এতিম", for: "both" },
    {
      id: "disabled",
      title: "আমি প্রতিবন্ধী",
      for: "both",
    },
    {
      id: "religious_service",
      title: "আমি দ্বীনের খেদমতে আছি",
      for: "both",
    },
    {
      id: "tabligh",
      title: "আমি তাবলীগ এর সাথে যুক্ত",
      for: "both",
    },
    {
      id: "social_worker",
      title: "আমি একজন সমাজ সেবক",
      for: "both",
    },
    {
      id: "employed",
      title: "আমি একজন চাকরিজীবী",
      for: "both",
    },
    {
      id: "post_marriage_job",
      title: "আমি বিয়ের পর চাকরি / ব্যাবসায় আগ্রহী",
      for: "both",
    },
    {
      id: "post_marriage_study",
      title: "আমি বিয়ের পর পড়াশোনা করতে আগ্রহী",
      for: "both",
    },
  ],
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodataPage.tsx
// --------------------
// src/app/(main)/biodatas/listPageComponentes/BiodataPage.tsx

"use client";
import { useGetAllBiodatasQuery } from "@/redux/features/admin/biodataApi";
import { useDebounced } from "@/redux/hooks";
import { useMemo, useState } from "react";
import BiodatasPageCard from "./BiodatasPageCard";
import BiodatasPageFilters from "./BiodatasPageFilters";
import BiodatasPageSearchByBiodataNo from "./SearchByBiodataNo";

const BiodataPage = () => {
  const [fileList, setFileList] = useState<any[]>([]);
  const [modalActive, setModalActive] = useState(false);
  const [isEdit, setIsEdit] = useState(false);
  const [filterActive, setFilterActive] = useState(false);
  const [filters, setFilters] = useState({});
  const [selectedData, setSelectedData] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [pagination, setPagination] = useState({
    page: 1,
    pageSize: 25,
    sortOrder: "desc",
    sortBy: "createdAt",
  });
  const debouncedTerm = useDebounced({ searchQuery: searchTerm, delay: 600 });

  // Query
  const query = useMemo(
    () => ({
      page: pagination.page,
      limit: pagination.pageSize,
      sortBy: pagination.sortBy,
      sortOrder: pagination.sortOrder,
      ...(debouncedTerm && { searchTerm: debouncedTerm }),
      ...filters,
    }),
    [pagination, debouncedTerm, filters]
  );

  const { data: biodatas, isLoading } = useGetAllBiodatasQuery(query, {
    refetchOnMountOrArgChange: true,
  });

  console.log("biodatas", biodatas);
  // Handle filter change
  const handleFilter = (newFilters: Record<string, any>) => {
    setFilters(newFilters);
    setFilterActive(Object.keys(newFilters).length > 0);
  };

  // Handle reset
  const handleReset = () => {
    setFilters({});
    setSearchTerm("");
    setFilterActive(false);
    setFileList([]);
    setModalActive(false);
    setSelectedData(null);
    setIsEdit(false);
    setPagination({
      page: 1,
      pageSize: 25,
      sortOrder: "desc",
      sortBy: "createdAt",
    });
  };

  return (
    <div className="flex justify-between container mx-auto gap-5">
      <BiodatasPageFilters
        onFilterChange={handleFilter}
        onReset={handleReset}
      />
      <div className="flex-grow max-w-7xl">
        <div className="flex justify-end items-center mb-6">
          <BiodatasPageSearchByBiodataNo />
        </div>
        {isLoading ? (
          <div className="text-center py-4">Loading...</div>
        ) : biodatas && biodatas.data.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {biodatas?.data?.map((biodata) => (
              <BiodatasPageCard key={biodata.id} {...biodata} />
            ))}
          </div>
        ) : (
          <div className="text-center py-4">No biodatas found</div>
        )}
      </div>
      {/* <BiodatasPageAppliedFilters /> */}
    </div>
  );
};

export default BiodataPage;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageAppliedFilters.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageAppliedFilters.tsx

import { X } from "lucide-react";

export default function BiodatasPageAppliedFilters() {
  const appliedFilters = [
    {
      id: 1,
      name: "বায়োডাটার ধরন",
      selected: [
        {
          id: 1,
          name: "পুরুষ",
        },
      ],
    },
    {
      id: 2,
      name: "বৈবাহিক অবস্থা",
      selected: [
        {
          id: 1,
          name: "অবিবাহিত",
        },
        {
          id: 2,
          name: "বিবাহিত",
        },
      ],
    },
  ];

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">আপনি বাছাই করেছেন</div>
      </div>
      <div className="flex flex-col space-y-4">
        {appliedFilters.length > 0 &&
          appliedFilters.map((x) => (
            <div
              key={x.id}
              className="flex flex-col space-y-3 text-black text-xs border border-gray-300 rounded-xl px-6 py-2"
            >
              {x.selected.length > 0 &&
                x.selected.map((y) => (
                  <div key={y.id} className="flex justify-between items-center">
                    <div>{y.name}</div>
                    <X className="text-[#e25a6f] w-4 h-4" />
                  </div>
                ))}
            </div>
          ))}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageCard.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/BiodatasPageCard.tsx

"use client";
import male from "@/assets/images/male-5.svg";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Heart } from "lucide-react";
import Image from "next/image";
import { useRouter } from "next/navigation";

export interface BiodatasPageCardProps {
  id: number;
  name: string;
  code: number;
  age: number;
  height: number;
  permanentAddress: string;
  occupation: string;
  maritalStatus: string;
}

export default function BioCard({
  id,
  name,
  code,
  age,
  height,
  permanentAddress,
  occupation,
  maritalStatus,
}: BiodatasPageCardProps) {
  const router = useRouter();
  const handleOnClick = () => {
    router.push(`/biodatas/${id}`);
  };
  return (
    <Card
      key={id}
      className="border-none overflow-hidden bg-gradient-to-t from-[#e6f2ff] to-[#fff0f6]"
    >
      <CardContent className="p-4">
        <div className="flex justify-between items-start mb-4">
          <div className="w-1/3">
            <Heart className="w-8 h-8 text-[#E25A6F]" fill="#E25A6F" />
          </div>
          <div className="w-1/3 flex items-center justify-center">
            <Image src={male} alt="Male" width={80} height={40} priority />
          </div>
          <div className="w-1/3 flex flex-col items-end space-y-2">
            <Badge className="text-[#00b754]">Verified</Badge>
            <Badge className="text-[#016ca7]">Seen</Badge>
          </div>
        </div>

        <div className="text-center mb-4 flex items-center justify-center">
          <div className="text-black bg-[#fcfafd] p-3 rounded-md">
            বায়োডাটা নং: {code}
          </div>
        </div>

        <div className="space-y-3 text-black">
          <div className="flex justify-between">
            <span>বৈবাহিক অবস্থা:</span>
            <span>{maritalStatus}</span>
          </div>
          <div className="flex justify-between">
            <span>জন্মসন:</span>
            <span>{age}</span>
          </div>
          <div className="flex justify-between">
            <span>উচ্চতা:</span>
            <span>{height}</span>
          </div>
          <div className="flex justify-between">
            <span>স্থায়ী ঠিকানা:</span>
            <span>{permanentAddress}</span>
          </div>
          <div className="flex justify-between">
            <span>পেশা:</span>
            <span>{occupation[0]}</span>
          </div>
        </div>
      </CardContent>
      <CardFooter>
        <Button
          className="w-full text-white bg-[#E25A6F]  hover:bg-[#D14A5F]"
          onClick={handleOnClick}
        >
          বায়োডাটা দেখুন
        </Button>
      </CardFooter>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\BiodatasPageFilters.tsx
// --------------------
"use client";

import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { beingSearchedFilters, searchingFilters } from "./biodataFilterOptions";
import { FilterAccordion } from "./FilterAccordian";

interface BiodatasPageFiltersProps {
  onFilterChange: (filters: Record<string, any>) => void;
  onReset: () => void;
}

export default function BiodatasPageFilters({
  onFilterChange,
  onReset,
}: BiodatasPageFiltersProps) {
  const searchParams = useSearchParams();
  const [activeTab, setActiveTab] = useState<"searching" | "beingSearched">(
    "searching"
  );
  const [ageRange, setAgeRange] = useState<[number, number]>([18, 80]);
  const [heightRange, setHeightRange] = useState<[number, number]>([36, 84]);
  const [selectedFilters, setSelectedFilters] = useState<
    Record<string, string | string[] | [number, number]>
  >({});

  // Initialize filters from URL query parameters
  useEffect(() => {
    const params = new URLSearchParams(searchParams.toString());
    const initialFilters: Record<string, any> = {};

    // Single value filters
    const singleValueKeys = [
      "biodataType",
      "maritalStatus",
      "location",
      "religiousLifestyle",
      // Remove ageMin and ageMax from here since they’re handled separately
    ];
    singleValueKeys.forEach((key) => {
      const value = params.get(key);
      if (value) initialFilters[key] = value;
    });

    // Range filters (e.g., age)
    const ageMin = params.get("ageMin");
    const ageMax = params.get("ageMax");
    if (ageMin && ageMax) {
      const min = parseInt(ageMin, 10);
      const max = parseInt(ageMax, 10);
      if (!isNaN(min) && !isNaN(max)) {
        initialFilters["age"] = [min, max];
        // Only update ageRange if it’s different from the current value
        if (ageRange[0] !== min || ageRange[1] !== max) {
          setAgeRange([min, max]);
        }
      }
    }

    // Only update selectedFilters if it’s different from the current value
    if (JSON.stringify(selectedFilters) !== JSON.stringify(initialFilters)) {
      setSelectedFilters(initialFilters);
      onFilterChange(initialFilters);
    }
  }, [searchParams, ageRange, selectedFilters]);

  // Radio change handler
  const handleRadioChange = (key: string, value: string) => {
    setSelectedFilters((prev) => {
      const newFilters = { ...prev, [key]: value };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Checkbox change handler
  const handleCheckboxChange = (
    key: string,
    value: string,
    checked: boolean
  ) => {
    setSelectedFilters((prev) => {
      const currentValues = Array.isArray(prev[key])
        ? [...(prev[key] as string[])]
        : [];
      if (checked) {
        currentValues.push(value);
      } else {
        const index = currentValues.indexOf(value);
        if (index > -1) currentValues.splice(index, 1);
      }
      const newFilters = { ...prev, [key]: currentValues };
      onFilterChange(newFilters);
      return newFilters;
    });
  };

  // Slider change handler
  const handleSliderChange = (key: string, value: [number, number]) => {
    if (key === "age" || key === "partner_age") setAgeRange(value);
    if (key === "height" || key === "partner_height") setHeightRange(value);
    const newFilters = { ...selectedFilters, [key]: value };
    setSelectedFilters(newFilters);
    onFilterChange(newFilters);
  };

  // Tab change handler
  const handleTabChange = (tab: "searching" | "beingSearched") => {
    setActiveTab(tab);
    setSelectedFilters({});
    setAgeRange([18, 80]);
    setHeightRange([36, 84]);
    onFilterChange({});
  };

  return (
    <div className="w-72 bg-white ml-4 px-4 space-y-2">
      <div className="flex items-center justify-center text-center text-[#1f4f69] pb-2">
        <div className="pb-1 border-b border-[#1f4f69]">ফিল্টার করুন</div>
      </div>
      {/* Filter buttons */}
      <div className="flex justify-center mb-4">
        <button
          className={`mr-[-1rem] rounded-xl py-3 px-4 z-10 ${
            activeTab === "searching"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("searching")}
        >
          আমি খুঁজছি
        </button>
        <button
          className={`py-3 rounded-xl px-4 ${
            activeTab === "beingSearched"
              ? "text-white bg-gradient-to-r from-[#e25a6f] to-[#016ca7]"
              : "text-[#989898] border border-[#989898]"
          }`}
          onClick={() => handleTabChange("beingSearched")}
        >
          আমাকে খুঁজছে
        </button>
      </div>
      {/* Filter accordion */}
      <form className="flex flex-col space-y-2">
        <Accordion type="multiple" className="flex flex-col space-y-2 mb-2">
          {activeTab === "searching" ? (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="biodataType"
                options={searchingFilters.biodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বৈবাহিক অবস্থা"
                title="বৈবাহিক অবস্থা"
                contentType="radio"
                filterKey="maritalStatus"
                options={searchingFilters.maritalStatus}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বয়স"
                title="বয়স"
                contentType="slider"
                filterKey="age"
                range={ageRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("age", val)
                }
                min={18}
                max={80}
              />
              <FilterAccordion
                value="উচ্চতা"
                title="উচ্চতা"
                contentType="slider"
                filterKey="height"
                range={heightRange}
                onRangeChange={(val: [number, number]) =>
                  handleSliderChange("height", val)
                }
                min={36}
                max={84}
              />
              <FilterAccordion
                value="গাত্রবর্ণ"
                title="গাত্রবর্ণ"
                contentType="radio"
                filterKey="complexion"
                options={searchingFilters.skinTones}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="স্থায়ী ঠিকানা"
                title="স্থায়ী ঠিকানা"
                contentType="radio"
                filterKey="permanentAddress"
                options={searchingFilters.permanentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বর্তমান ঠিকানা"
                title="বর্তমান ঠিকানা"
                contentType="radio"
                filterKey="currentAddress"
                options={searchingFilters.currentAddress}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="ধর্মীয় লাইফস্টাইল"
                title="ধর্মীয় লাইফস্টাইল"
                contentType="radio"
                filterKey="religiousLifestyle"
                options={searchingFilters.religiousLifestyle}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পেশা"
                title="পেশা"
                contentType="radio"
                filterKey="occupation"
                options={searchingFilters.occupation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="শিক্ষা"
                title="শিক্ষা"
                contentType="radio"
                filterKey="education"
                options={searchingFilters.education}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="দ্বীনি যোগ্যতা"
                title="দ্বীনি যোগ্যতা"
                contentType="radio"
                filterKey="religiousEducation"
                options={searchingFilters.religiousEducation}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="পরিবারের আর্থসামাজিক অবস্থা"
                title="পরিবারের আর্থসামাজিক অবস্থা"
                contentType="radio"
                filterKey="familyStatus"
                options={searchingFilters.familyBackgrounds}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="মাজহাব/মানহাজ"
                title="মাজহাব/মানহাজ"
                contentType="radio"
                filterKey="madhhab"
                options={searchingFilters.madhhab}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="রক্তের গ্রুপ"
                title="রক্তের গ্রুপ"
                contentType="radio"
                filterKey="bloodGroup"
                options={searchingFilters.bloodGroup}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={searchingFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
            </>
          ) : (
            <>
              <FilterAccordion
                value="বায়োডাটার ধরন"
                title="বায়োডাটার ধরন"
                contentType="radio"
                filterKey="selfBiodataType"
                options={beingSearchedFilters.selfBiodataType}
                selectedFilters={selectedFilters as Record<string, string>}
                handleRadioChange={handleRadioChange}
              />
              <FilterAccordion
                value="বিশেষ ক্যাটাগরি"
                title="বিশেষ ক্যাটাগরি"
                contentType="checkbox"
                filterKey="specialCategory"
                options={beingSearchedFilters.specialCategory}
                selectedFilters={selectedFilters as Record<string, string[]>}
                handleCheckboxChange={handleCheckboxChange}
              />
              <AccordionItem
                className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
                value="যেমন জীবনসঙ্গী আশা করেন"
              >
                <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
                  যেমন জীবনসঙ্গী আশা করেন
                </AccordionTrigger>
                <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
                  <Accordion
                    type="multiple"
                    className="flex flex-col space-y-2"
                  >
                    <FilterAccordion
                      value="partner_biodataType"
                      title="জীবনসঙ্গীর বায়োডাটার ধরন"
                      contentType="radio"
                      filterKey="partner_biodataType"
                      options={searchingFilters.biodataType}
                      selectedFilters={
                        selectedFilters as Record<string, string>
                      }
                      handleRadioChange={handleRadioChange}
                    />
                    <FilterAccordion
                      value="partner_maritalStatus"
                      title="জীবনসঙ্গীর বৈবাহিক অবস্থা"
                      contentType="checkbox"
                      filterKey="partner_maritalStatus"
                      options={searchingFilters.maritalStatus}
                      selectedFilters={
                        selectedFilters as Record<string, string[]>
                      }
                      handleCheckboxChange={handleCheckboxChange}
                    />
                    <FilterAccordion
                      value="partner_age"
                      title="জীবনসঙ্গীর বয়স"
                      contentType="slider"
                      filterKey="partner_age"
                      range={ageRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_age", val)
                      }
                      min={18}
                      max={80}
                    />
                    <FilterAccordion
                      value="partner_height"
                      title="জীবনসঙ্গীর উচ্চতা"
                      contentType="slider"
                      filterKey="partner_height"
                      range={heightRange as [number, number]}
                      onRangeChange={(val: [number, number]) =>
                        handleSliderChange("partner_height", val)
                      }
                      min={36}
                      max={84}
                    />
                  </Accordion>
                </AccordionContent>
              </AccordionItem>
            </>
          )}
        </Accordion>
        <button
          type="button"
          className="py-2 px-4 bg-[#e25a6f] text-white rounded-xl"
          onClick={() => {
            setSelectedFilters({});
            setAgeRange([18, 80]);
            setHeightRange([36, 84]);
            onReset();
          }}
        >
          ফিল্টার রিসেট
        </button>
      </form>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\FilterAccordian.tsx
// --------------------
import {
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Slider } from "@/components/ui/slider";

interface FilterAccordionProps {
  value: string;
  title: string;
  contentType: string;
  filterKey?: string;
  options?: { id: string; title: string }[];
  selectedFilters?: Record<string, string | string[]>;
  handleRadioChange?: (key: string, value: string) => void;
  handleCheckboxChange?: (key: string, value: string, checked: boolean) => void;
  range?: number[];
  onRangeChange?: (value: number[]) => void;
  min?: number;
  max?: number;
}

export const FilterAccordion = (props: FilterAccordionProps) => {
  const { value, title, contentType } = props;

  // Validation for radio
  if (
    contentType === "radio" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleRadioChange)
  ) {
    return null;
  }

  // Validation for checkbox
  if (
    contentType === "checkbox" &&
    (!props.filterKey ||
      !props.options ||
      !props.selectedFilters ||
      !props.handleCheckboxChange)
  ) {
    return null;
  }

  // Validation for slider
  if (
    contentType === "slider" &&
    (!props.filterKey ||
      !props.range ||
      !props.onRangeChange ||
      props.min === undefined ||
      props.max === undefined)
  ) {
    return null;
  }

  const renderRadioGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleRadioChange: (key: string, value: string) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <RadioGroup
        value={(selectedFilters[key] as string) || ""}
        onValueChange={(value) => handleRadioChange(key, value)}
      >
        {options.map((option) => (
          <div key={option.id} className="flex items-center space-x-2">
            <RadioGroupItem value={option.id} id={`${key}-${option.id}`} />
            <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
          </div>
        ))}
      </RadioGroup>
    </AccordionContent>
  );

  const renderCheckboxGroup = (
    key: string,
    options: { id: string; title: string }[],
    selectedFilters: Record<string, string | string[]>,
    handleCheckboxChange: (key: string, value: string, checked: boolean) => void
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      {options.map((option) => (
        <div key={option.id} className="flex items-center space-x-2">
          <Checkbox
            id={`${key}-${option.id}`}
            checked={
              (selectedFilters[key] as string[])?.includes(option.id) || false
            }
            onCheckedChange={(checked) =>
              handleCheckboxChange(key, option.id, checked as boolean)
            }
          />
          <Label htmlFor={`${key}-${option.id}`}>{option.title}</Label>
        </div>
      ))}
    </AccordionContent>
  );

  const renderSlider = (
    key: string,
    label: string,
    value: number[],
    onChange: (value: number[]) => void,
    min: number,
    max: number
  ) => (
    <AccordionContent className="bg-white text-[#1f4f69] space-y-1">
      <div className="flex items-center space-x-2">
        <div className="text-[#1f4f69]">{value[0]}</div>
        <Slider
          value={value}
          onValueChange={(val) => onChange(val)}
          min={min}
          max={max}
          step={1}
          className="w-full"
        />
        <div className="text-[#1f4f69]">{value[1]}</div>
      </div>
    </AccordionContent>
  );

  return (
    <AccordionItem
      className="border border-gray-300 rounded-xl px-4 max-h-40 overflow-y-auto"
      value={value}
    >
      <AccordionTrigger className="hover:no-underline text-[#1f4f69]">
        {title}
      </AccordionTrigger>
      {contentType === "radio" &&
        renderRadioGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleRadioChange
        )}
      {contentType === "checkbox" &&
        renderCheckboxGroup(
          props.filterKey,
          props.options,
          props.selectedFilters,
          props.handleCheckboxChange
        )}
      {contentType === "slider" &&
        renderSlider(
          props.filterKey,
          title,
          props.range,
          props.onRangeChange,
          props.min,
          props.max
        )}
    </AccordionItem>
  );
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\listPageComponentes\SearchByBiodataNo.tsx
// --------------------
// File: src/app/(main)/biodatas/listPageComponentes/SearchByBiodataNo.tsx

import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Search } from "lucide-react";

export default function BiodatasPageSearchByBiodataNo() {
  return (
    <form className="flex items-center space-x-4">
      <div className="w-32">
        <Select>
          <SelectTrigger className="text-[#1f4f69]">
            <SelectValue placeholder="SNM" />
          </SelectTrigger>
          <SelectContent className="bg-white text-[#1f4f69]">
            {/* <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="all"
            >
              SNM
            </SelectItem> */}
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="male"
            >
              পুরুষ
            </SelectItem>
            <SelectItem
              className="focus:bg-[#E25A6F] focus:text-white"
              value="female"
            >
              নারী
            </SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="relative w-64">
        <div className="space-y-2">
          <Input
            className="w-full px-4 py-2 border rounded-md text-[#1f4f69] selection:bg-[#E25A6F] selection:text-white"
            id="biodataNo"
            type="text"
            placeholder="বায়োডাটা নং"
          />
        </div>
        <button className="absolute right-3 top-1/2 transform -translate-y-1/2">
          <Search className="w-4 h-4 text-gray-400" />
        </button>
      </div>
    </form>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\AddressInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/AddressInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function AddressInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ঠিকানা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">স্থায়ী শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান জেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান উপজেলা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান বাড়ির ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">বাংলাদেশ</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান দেশ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান স্টেট(যদি থাকে):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বর্তমান শহর:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেনশিপ
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোথায় বেড়ে উঠেছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\EducationAndOccupationInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/EducationAndOccupationInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function EducationAndOccupationInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          শিক্ষাগত যোগ্যতা
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষার ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">জেনারেল</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এস.এস.সি/দাখিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এস.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(এইচ.এস.সি/আলিম/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">এইচ.এস.সি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(ডিপ্লোমা):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">ডিপ্লোমা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(অনার্স/ফাজিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অনার্স</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ডিগ্রীর নাম(মাস্টার্স/কামিল/সমমান):</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>

        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা নিয়ে বিস্তারিত লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বেসরকারি চাকরিজীবী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাসিক আয়:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মাস্টার্স</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FamilyInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FamilyInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function FamilyInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          পারিবারিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার পিতা-মাতা উভয়েই জীবিত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনারা ভাই-বোন কতজন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ভাই-বোন কে কি করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">চাচা মামাদের পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের ধরণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">যৌথ পরিবার</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি সহ আপনার পরিবারের নিজস্ব বাড়িতে থাকা হয় নাকি ভাড়া বাড়িতে?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনাদের বাড়ি-ঘরের বা সম্পত্তির হাল্কা বিবরন দিন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পারিবারিক বিষয়ে আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\FooterSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/FooterSection.tsx

import { Card, CardContent } from "@/components/ui/card";
import Link from "next/link";
export default function FooterSection() {
  return (
    <div className="py-12 flex flex-col items-center justify-center">
      <div className="text-4xl text-center text-[#004972] mb-4">
        বায়োডাটা পছন্দ হয়েছে?
      </div>
      <div className="text-md text-center text-black mb-8">
        আপনি আগ্রহী হলে আপনার জন্য ৩টি অপশন রয়েছে।
      </div>
      <div className="max-w-6xl flex space-x-6 text-black">
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                প্রাথমিক প্রস্তাব পাঠিয়ে আপনার প্রতি আগ্রহী কিনা জানতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                প্রাথমিক প্রস্তাব পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                ছবি দেখার জন্য অনুরোধ পাঠান
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        <Card className="w-1/3 border-gray-200 bg-white text-black p-2">
          <CardContent className="px-6 py-4">
            <div className="flex flex-col items-center space-y-4">
              <div className="min-h-22 text-xl text-center">
                সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন
              </div>
              <div className="bg-[#c65a5a] text-white rounded-2xl px-6 py-4">
                যোগাযোগ তথ্য দেখুন
              </div>
              <Link
                href="/tutorial"
                className="text-xs hover:underline text-[#c65a5a]"
              >
                (বিস্তারিত জানুন)
              </Link>
            </div>
          </CardContent>
        </Card>
        {/* <div>পাত্র-পাত্রীর অনুমোদন সাপেক্ষে ছবি দেখতে পারেন</div>
        <div>সরাসরি অভিভাবকের যোগাযোগ তথ্য দেখতে পারেন</div> */}
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\GeneralInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/GeneralInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function GeneralInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          সাধারণ তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জন্ম তারিখ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">অবিবাহিত</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'১"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ওজন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">রক্তের গ্রুপ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">AB−</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">জাতীয়তা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            বাংলাদেশী, ফরেইন সিটিজেন
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSection.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSection.tsx

import male from "@/assets/images/male-5.svg";
import { Card, CardContent } from "@/components/ui/card";
import {
  CircleChevronDown,
  Copy,
  Heart,
  IdCard,
  Mail,
  Send,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";
import HeaderShortBio from "./HeaderShortBio";
import HeaderSpousePreferenceRequierment from "./HeaderSpousePreferenceRequierment";

export default function HeaderSection() {
  return (
    <div className="py-12 flex justify-center bg-gradient-to-r from-[#FFEFF5] to-[#E4F1FF]">
      <div className="min-w-7xl flex space-x-8">
        <div className="w-1/4 flex flex-col space-y-8">
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col items-center space-y-4">
                <div className="w-full flex items-start justify-between">
                  <div className="w-1 text-[#00b754] text-md font-semibold">
                    Verified
                  </div>
                  <Image
                    src={male}
                    alt="Male"
                    width={100}
                    height={40}
                    priority
                  />
                  <div className="w-1"></div>
                </div>

                <div className="text-lg">
                  বায়োডাটা কোড: <span className="font-semibold">SNM-392</span>
                </div>

                <div className="flex space-x-4 border border-gray-400 rounded-xl p-4">
                  <Heart className="h-6 w-6" />
                  <IdCard className="h-6 w-6" />
                  <Copy className="h-6 w-6 rotate-90" />
                  <Mail className="h-6 w-6" />
                  <CircleChevronDown className="h-6 w-6 text-[#b52d1f]" />
                </div>
              </div>
            </CardContent>
          </Card>
          <Card className="bg-white text-black border-none rounded-4xl">
            <CardContent className="pt-6">
              <div className="flex flex-col space-y-4">
                <div className="text-xl font-medium text-center mb-4 text-[#b52d1f]">
                  আপনি আগ্রহী?
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col">
                    <div>প্রাথমিক প্রস্তাব পাঠান</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex flex-col space-x-2">
                    <div>অভিভাবকের যোগাযোগ তথ্য দেখুন</div>
                    <div className="text-xs text-[#e25a6f]">
                      ১টি টোকেন খরচ হবে
                    </div>
                  </div>
                  <div className="bg-[#e25a6f] px-4 py-2 rounded-xl">
                    <Send
                      className="h-6 w-6"
                      fill="white"
                      stroke="#e25a6f"
                      strokeOpacity={0.5}
                    />
                  </div>
                </div>
                <Link
                  href="/tutorial"
                  className="text-xs text-center hover:underline text-blue-300"
                >
                  (বিস্তারিত জানুন)
                </Link>
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="w-3/4 flex space-x-8">
          <HeaderShortBio />
          <HeaderSpousePreferenceRequierment />
        </div>
      </div>
    </div>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderShortBio.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderShortBio.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderShortBio() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          পাত্রের সংক্ষিপ্ত বিবরণ
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\HeaderSpousePreferenceRequierment.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/HeaderSpousePreferenceRequierment.tsx

import { Card, CardContent, CardHeader } from "@/components/ui/card";

export default function HeaderSpousePreferenceRequierment() {
  return (
    <Card className="w-1/2 bg-white text-black border-none rounded-4xl">
      <CardHeader className="flex items-center">
        <div className="text-lg text-white bg-[#016ca7] p-4 rounded-xl">
          যেমন জীবনসঙ্গী আশা করেন
        </div>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col space-y-2">
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বৈবাহিক অবস্থা</div>
            <div>অবিবাহিত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জন্মসন</div>
            <div>১৯৯০</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>উচ্চতা</div>
            <div>৫'১০"</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>গাত্রবর্ণ</div>
            <div>উজ্জ্বল শ্যামলা</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>শিক্ষা</div>
            <div>BSC in EEE</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পেশা</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জেলা</div>
            <div>রাজশাহী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ওজন</div>
            <div>৬৫ কেজি</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>রক্তের গ্রুপ</div>
            <div>B+</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>পরিবার</div>
            <div>মধ্যবিত্ত</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>জাতীয়তা</div>
            <div>বাংলাদেশী</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>ধর্মীয় লাইফস্টাইল</div>
            <div>জেনারেল/নন-প্রাক্টিসিং</div>
          </div>
          <div className="flex justify-between text-sm pb-2 border-b border-gray-200">
            <div>বিশেষ চাওয়া</div>
            <div>ইঞ্জিনিয়ার</div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\MarriageInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/MarriageInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function MarriageInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          বিয়ে সংক্রান্ত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অভিভাবক আপনার বিয়েতে রাজি আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে পড়াশোনা করতে দিতে চান?</div> */}
          <div className="w-1/2">
            বিয়ের পর পড়াশোনা চালিয়ে যেতে চান? (ছাত্রী হলে)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">
            বিয়ের পর স্ত্রী চাইলে চাকরি বা ব্যবসা করতে দিবেন?
          </div> */}
          <div className="w-1/2">
            আপনি কি বিয়ের পর চাকরি বা ব্যবসা করতে ইচ্ছুক?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {/* <div className="w-1/2">বিয়ের পর স্ত্রীকে নিয়ে কোথায় থাকবেন?</div> */}
          <div className="w-1/2">
            যৌথ বা একক পরিবারে থাকার ব্যাপারে আপনি কোনটি পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          {/* Male only */}
          <div className="w-1/2">
            বাড়িতে বা বাহিরে স্ত্রী পর্দা করতে চাইলে পর্দার ব্যবস্থা রাখতে
            পারবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বিয়ে উপলক্ষে আপনি বা আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক বা উপহার
            বা অর্থ আশা করবেন কিনা?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পাত্রপক্ষ/পাত্রীপক্ষ অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিয়ে সংক্রান্ত আরো কিছু:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PersonalInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PersonalInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PersonalInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ব্যক্তিগত তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি দাড়ি পছন্দ?/দাড়ি রেখেছেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            বাড়ির বাহিরে সাধারণত কী ধরণের পোশাক পরতে পছন্দ করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নাটক/সিনেমা/সিরিয়াল/গান/খেলা এসবের কোনটি দেখেন বা শুনেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মানসিক বা শারীরিক কোনো রোগ আছে কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের কিছু গুণাবলী চিহ্নিত করুন</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শান্ত-শিষ্ট, ধৈর্যশীল, ইমোশনাল
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            নারী-পুরুষ সমঅধীকার বিষয়টাকে আপনি কিভাবে দেখেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            সমকামিতা বা LGBTQ সম্পর্কে আপনার ধারণা কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার ক্ষেত্রে প্রযোজ্য এমন বিশেষ কোনো অবস্থা বা কার্যক্রম:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            আমি একজন সমাজ সেবক, আমি বন্ধ্যা-ইনফার্টিলিটি
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">নিজের মতো করে নিজের সম্পর্কে কিছু লিখুন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            রাজনীতি নিয়ে আপনার দৃষ্টিভঙ্গি কি? এর সাথে যুক্ত থাকলে বিস্তারিত
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">অবসর সময়ে কি করতে পছন্দ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">সামাজিক বা ধর্মীয় কোনো কাজে যুক্ত আছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কিছু বইয়ের নাম (যদি পড়ে থাকেন)
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">দৈনন্দিন খাবারে কি কি পছন্দ এবং অপছন্দ?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনার পছন্দের কয়েকজন ব্যক্তিত্বের নাম যাদেরকে নিয়মিত ফলো করেন
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার জীবনের লক্ষ্য কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন কোন সোসাল মিডিয়া ব্যবহার করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার আগ্রহ ও শখ কি কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div> */}
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\PrimaryInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/PrimaryInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function PrimaryInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          প্রাথমিক তথ্য
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটার ধরন:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পাত্রের বায়োডাটা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বায়োডাটা কার জন্য তৈরী করছেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পাত্র/পাত্রীর সম্পূর্ণ নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পিতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাতার নাম:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\ReligiousInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/ReligiousInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function ReligiousInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          ধর্মীয় লাইফস্টাইল
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আপনি কি আপনার জীবনকে পরিপূর্ণ ভাবে ইসলামিক বিধি-বিধান অনুযায়ী
            পরিচালনা করেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            জেনারেল/নন-প্রাক্টিসিং
          </div>
        </div>

        {/* Non Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় কোন মতাদর্শ মেনে চলেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সুন্নি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কোন মাজহাব / মানহাজ অনুসরণ করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">সালাফি</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">প্রতিদিন পাঁচ ওয়াক্ত নামাজ পড়া হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Try Practicing */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনার কি নামাজ কাযা হয়?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Common */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">মাহরাম/গাইরে-মাহরাম মেনে চলেন কি?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস কি?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু করেছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Male */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">টাখনুর উপরে কাপড় পরেন কিনা?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>

        {/* Practicing Female */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কি নিকাব সহ পর্দা করেন?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\viewBioDataComponents\SpousePreferenceInfo.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/viewBioDataComponents/SpousePreferenceInfo.tsx

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

export default function SpousePreferenceInfo() {
  return (
    <Card className="border-gray-200 bg-[#fcfcfc] text-black">
      <CardHeader>
        <CardTitle className="text-[#004972] text-center font-medium">
          যেমন জীবনসঙ্গী আশা করেন
        </CardTitle>
      </CardHeader>
      <CardContent className="px-6 py-4 space-y-2">
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত বয়স:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত গাত্রবর্ণ:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            উজ্জ্বল ফর্সা
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">কাঙ্খিত উচ্চতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">৫'২"</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বিশেষ শিক্ষাগত যোগ্যতা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">মুহাদ্দিসা</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ঠিকানা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">বৈবাহিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            অবিবাহিত, ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">আপনি কোন কোন বিশেষ ক্যাটাগরিতে আগ্রহী?</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            ফরেইন সিটিজেন, শর্ট ডিভোর্সড
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">ধর্মীয় লাইফস্টাইল:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পেশা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">নিজের জন্য</div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">পরিবারের অর্থনৈতিক অবস্থা:</div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            নিম্ন মধ্যবিত্ত
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            আল্লাহ যাদেরকে গাঢ় ত্বক বা কালো বর্ণ দিয়েছেন, এরকম পাত্রীর প্রতি
            আপনি আগ্রহী?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div>
        {/* <div className="flex items-center space-x-2">
          <div className="w-1/2">
            মাসনা বা দ্বিতীয় বিবাহে আগ্রহী এমন পাত্রের প্রতি আগ্রহী আছেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            দেখা যেতে পারে
          </div>
        </div> */}
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গী নির্বাচনে শহর নাকি গ্রাম, কোনটিকে প্রাধান্য দিবেন?
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            শহরে বসবাসকারী
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <div className="w-1/2">
            জীবনসঙ্গীর যে বৈশিষ্ট্য বা গুণাবলী আশা করেন:
          </div>
          <div className="w-1/2 pl-2 border-l border-gray-200">
            পূর্ণ ধার্মিক/ প্র্যাক্টিসিং
          </div>
        </div>
      </CardContent>
    </Card>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\app\(main)\biodatas\[id]\page.tsx
// --------------------
// File: src/app/(main)/biodatas/[id]/page.tsx
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import AddressInfo from "./viewBioDataComponents/AddressInfo";
import EducationAndOccupationInfo from "./viewBioDataComponents/EducationAndOccupationInfo";
import FamilyInfo from "./viewBioDataComponents/FamilyInfo";
import FooterSection from "./viewBioDataComponents/FooterSection";
import GeneralInfo from "./viewBioDataComponents/GeneralInfo";
import HeaderSection from "./viewBioDataComponents/HeaderSection";
import MarriageInfo from "./viewBioDataComponents/MarriageInfo";
import PersonalInfo from "./viewBioDataComponents/PersonalInfo";
import PrimaryInfo from "./viewBioDataComponents/PrimaryInfo";
import ReligiousInfo from "./viewBioDataComponents/ReligiousInfo";
import SpousePreferenceInfo from "./viewBioDataComponents/SpousePreferenceInfo";

export default function BiodataPage() {
  const tabs = [
    "প্রাথমিক তথ্য",
    "সাধারণ তথ্য",
    "ঠিকানা",
    "শিক্ষা ও পেশা",
    "পারিবারিক তথ্য",
    "ধর্মীয় লাইফস্টাইল",
    "ব্যক্তিগত তথ্য",
    "বিয়ে সংক্রান্ত তথ্য",
    "যেমন জীবনসঙ্গী আশা করেন",
  ];

  return (
    <>
      <HeaderSection />
      <div className="py-12 flex flex-col items-center justify-center space-y-6">
        <div className="text-4xl text-center text-black">সম্পূর্ণ বায়োডাটা</div>
        <Tabs defaultValue="ঠিকানা" className="max-w-7xl">
          <TabsList className="flex flex-wrap h-auto space-x-2 bg-[#f6f6f6] rounded-2xl p-2">
            {tabs.map((tab) => (
              <TabsTrigger
                key={tab}
                value={tab}
                className="data-[state=active]:bg-[#e25a6f] data-[state=active]:text-white text-[#004972] rounded-full px-4 py-2"
              >
                {tab}
              </TabsTrigger>
            ))}
          </TabsList>
        </Tabs>

        <div className="w-full max-w-6xl space-y-6">
          <PrimaryInfo />
          <GeneralInfo />
          <AddressInfo />
          <EducationAndOccupationInfo />
          <FamilyInfo />
          <ReligiousInfo />
          <PersonalInfo />
          <MarriageInfo />
          <SpousePreferenceInfo />
        </div>
      </div>
      <FooterSection />
    </>
  );
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\api\baseApi.ts
// --------------------
// File: src/redux/api/baseApi.ts
import { axiosBaseQuery } from "@/helpers/axios/axiosBaseQuery";
import { createApi } from "@reduxjs/toolkit/query/react";
import { tagTypesList } from "../tag-Types";

export const baseApi = createApi({
  reducerPath: "api",
  baseQuery: axiosBaseQuery({
    baseUrl: `${process.env.NEXT_PUBLIC_SERVER_URL}`,
  }),
  endpoints: () => ({}),
  tagTypes: tagTypesList,
});


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\biodataApi.ts
// --------------------
// File: src/redux/features/admin/biodataApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const BIODATA_URL = "/biodata";

export const biodataApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createBiodata: build.mutation({
      query: (biodataData) => ({
        url: `${BIODATA_URL}`,
        method: "POST",
        data: biodataData,
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
    getAllBiodatas: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${BIODATA_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.biodata],
    }),
    getBiodataById: build.query({
      query: (id) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.biodata],
    }),
    updateBiodata: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
    deleteBiodata: build.mutation({
      query: (id) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
  }),
});

export const {
  useCreateBiodataMutation,
  useGetAllBiodatasQuery,
  useGetBiodataByIdQuery,
  useUpdateBiodataMutation,
  useDeleteBiodataMutation,
} = biodataApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\contactApi.ts
// --------------------
// File: src/redux/features/admin/contactApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const CONTACT_URL = "/contact";

export const contactApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createContact: build.mutation({
      query: (contactData) => ({
        url: `${CONTACT_URL}`,
        method: "POST",
        data: contactData,
      }),
      invalidatesTags: [tagTypes.contact],
    }),
    getAllContacts: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${CONTACT_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.contact],
    }),
    getContactById: build.query({
      query: (id) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.contact],
    }),
    updateContact: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.contact],
    }),
    deleteContact: build.mutation({
      query: (id) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.contact],
    }),
  }),
});

export const {
  useCreateContactMutation,
  useGetAllContactsQuery,
  useGetContactByIdQuery,
  useUpdateContactMutation,
  useDeleteContactMutation,
} = contactApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\favouriteApi.ts
// --------------------
// File: src/redux/features/admin/favouriteApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const FAVOURITE_URL = "/favourite";

export const favouriteApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createFavourite: build.mutation({
      query: (favouriteData) => ({
        url: `${FAVOURITE_URL}`,
        method: "POST",
        data: favouriteData,
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
    getAllFavourites: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${FAVOURITE_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.favourite],
    }),
    getFavouriteById: build.query({
      query: (id) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.favourite],
    }),
    updateFavourite: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
    deleteFavourite: build.mutation({
      query: (id) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
  }),
});

export const {
  useCreateFavouriteMutation,
  useGetAllFavouritesQuery,
  useGetFavouriteByIdQuery,
  useUpdateFavouriteMutation,
  useDeleteFavouriteMutation,
} = favouriteApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\notificationApi.ts
// --------------------
// File: src/redux/features/admin/notificationApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const NOTIFICATION_URL = "/notification";

export const notificationApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createNotification: build.mutation({
      query: (notificationData) => ({
        url: `${NOTIFICATION_URL}`,
        method: "POST",
        data: notificationData,
      }),
      invalidatesTags: [tagTypes.notification],
    }),
    getAllNotifications: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${NOTIFICATION_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.notification],
    }),
    getNotificationById: build.query({
      query: (id) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.notification],
    }),
    updateNotification: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.notification],
    }),
    deleteNotification: build.mutation({
      query: (id) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.notification],
    }),
  }),
});

export const {
  useCreateNotificationMutation,
  useGetAllNotificationsQuery,
  useGetNotificationByIdQuery,
  useUpdateNotificationMutation,
  useDeleteNotificationMutation,
} = notificationApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\proposalApi.ts
// --------------------
// File: src/redux/features/admin/proposalApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const PROPOSAL_URL = "/proposal";

export const proposalApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createProposal: build.mutation({
      query: (proposalData) => ({
        url: `${PROPOSAL_URL}`,
        method: "POST",
        data: proposalData,
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
    getAllProposals: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${PROPOSAL_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.proposal],
    }),
    getProposalById: build.query({
      query: (id) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.proposal],
    }),
    updateProposal: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
    deleteProposal: build.mutation({
      query: (id) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
  }),
});

export const {
  useCreateProposalMutation,
  useGetAllProposalsQuery,
  useGetProposalByIdQuery,
  useUpdateProposalMutation,
  useDeleteProposalMutation,
} = proposalApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\shortlistApi.ts
// --------------------
// File: src/redux/features/admin/shortlistApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const SHORTLIST_URL = "/shortlist";

export const shortlistApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createShortlist: build.mutation({
      query: (shortlistData) => ({
        url: `${SHORTLIST_URL}`,
        method: "POST",
        data: shortlistData,
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
    getAllShortlists: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${SHORTLIST_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.shortlist],
    }),
    getShortlistById: build.query({
      query: (id) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.shortlist],
    }),
    updateShortlist: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
    deleteShortlist: build.mutation({
      query: (id) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
  }),
});

export const {
  useCreateShortlistMutation,
  useGetAllShortlistsQuery,
  useGetShortlistByIdQuery,
  useUpdateShortlistMutation,
  useDeleteShortlistMutation,
} = shortlistApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\userApi.ts
// --------------------
// File: src/redux/features/admin/userApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const USER_URL = "/user";

export const userApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createUser: build.mutation({
      query: (userData) => ({
        url: `${USER_URL}`,
        method: "POST",
        data: userData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    getAllUsers: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${USER_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.user],
    }),
    getUserById: build.query({
      query: (id) => ({
        url: `${USER_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.user],
    }),
    getMe: build.query({
      query: () => ({
        url: `${USER_URL}/me`,
        method: "GET",
      }),
      providesTags: [tagTypes.user],
    }),
    updateMyProfile: build.mutation({
      query: (updatedData) => ({
        url: `${USER_URL}/me`,
        method: "PATCH",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    updateUser: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${USER_URL}/${id}`,
        method: "PATCH",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    deleteUser: build.mutation({
      query: (id) => ({
        url: `${USER_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.user],
    }),
  }),
});

export const {
  useCreateUserMutation,
  useGetAllUsersQuery,
  useGetUserByIdQuery,
  useGetMeQuery,
  useUpdateMyProfileMutation,
  useUpdateUserMutation,
  useDeleteUserMutation,
} = userApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\auth\authApi.ts
// --------------------
// File: src/redux/features/auth/authApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const AUTH_URL = "/auth";

export const authApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    userRegister: build.mutation({
      query: (registerData) => ({
        url: `${AUTH_URL}/register`,
        method: "POST",
        data: registerData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    userLogin: build.mutation({
      query: (loginData) => ({
        url: `${AUTH_URL}/login`,
        method: "POST",
        data: loginData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    verifyEmail: build.mutation({
      query: (verifyData) => ({
        url: `${AUTH_URL}/verify-email`,
        method: "POST",
        data: verifyData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    changePassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/change-password`,
        method: "POST",
        contentType: "application/json",
        data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    refreshToken: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/refresh-token`,
        method: "POST",
        contentType: "application/json",
        data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    forgotPassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/forgot-password`,
        method: "POST",
        data: data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    resetPassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/reset-password`,
        method: "POST",
        data: data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
  }),
});

export const {
  useUserRegisterMutation,
  useUserLoginMutation,
  useVerifyEmailMutation,
  useChangePasswordMutation,
  useRefreshTokenMutation,
  useForgotPasswordMutation,
  useResetPasswordMutation,
} = authApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\auth\authSlice.ts
// --------------------
// File: src/redux/features/auth/authSlice.ts
import { authAccessKey, authRefreshKey } from "@/constant/authkey";
import { RootState } from "@/redux/store";
import { getCookie, removeCookie, setCookie } from "@/utils/cookieHelper";
import { decodeToken, TUser } from "@/utils/tokenHelper";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

type TAuthState = {
  user: TUser | null;
  acesstoken: string | null;
  refreshtoken: string | null;
};

// Retrieve token from cookies
const storedAccessToken = getCookie(authAccessKey);
const storedRefreshToken = getCookie(authRefreshKey);
const storedUser = decodeToken(storedAccessToken); // Decode user from token

const initialState: TAuthState = {
  user: storedUser,
  acesstoken: storedAccessToken,
  refreshtoken: storedRefreshToken,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<TAuthState>) => {
      const { user, acesstoken, refreshtoken } = action.payload;
      state.user = user;
      state.acesstoken = acesstoken;
      state.refreshtoken = refreshtoken;
      if (acesstoken && refreshtoken) {
        setCookie(authAccessKey, acesstoken); // Store token in cookies
        setCookie(authRefreshKey, refreshtoken); // Store token in cookies
      }
    },
    logout: (state) => {
      state.user = null;
      state.acesstoken = null;
      state.refreshtoken = null;
      removeCookie(authAccessKey); // Remove token from cookies
      removeCookie(authRefreshKey); // Remove token from cookies
    },
  },
});

export const { setUser, logout } = authSlice.actions;
export default authSlice.reducer;

// Selectors
export const selectCurrentToken = (state: RootState) => state.auth.acesstoken;
export const selectCurrentUser = (state: RootState) => state.auth.user;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\biodata\biodataSlice.ts
// --------------------
import { BiodataFormData } from "@/lib/types";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface BiodataState {
  biodataFormData: BiodataFormData;
}

const initialState: BiodataState = {
  biodataFormData: {
    firstWordsFormData: {
      preApprovalAcceptTerms: false,
      preApprovalOathTruthfulInfo: false,
      preApprovalOathLegalResponsibility: false,
    },
    primaryInfoFormData: {
      biodataType: "",
      biodataFor: "",
      fullName: "",
      fatherName: "",
      motherName: "",
      email: "",
      phoneNumber: "",
      guardianContacts: [],
    },
    generalInfoFormData: {
      dateOfBirth: "",
      maritalStatus: "",
      skinTone: "",
      height: "",
      weight: "",
      bloodGroup: "",
      nationality: "",
    },
    addressInfoFormData: { addresses: [] },
    educationInfoFormData: {
      type: "",
      highestDegree: "",
      degrees: [],
      religiousEducation: [],
      detail: "",
    },
    occupationInfoFormData: { occupations: [], detail: "", monthlyIncome: "" },
    familyInfoFormData: {
      parentsAlive: "",
      fatherOccupation: "",
      motherOccupation: "",
      siblings: [],
      fatherSideDetail: "",
      motherSideDetail: "",
      familyType: "",
      familyBackground: "",
      livingCondition: "",
      wealthDescription: "",
    },
    religiousInfoFormData: {
      type: "",
      ideology: "",
      madhab: "",
      praysFiveTimes: "",
      hasQazaPrayers: "",
      canReciteQuranProperly: "",
      avoidsHaramIncome: "",
      modestDressing: "",
      followsMahramRules: "",
      beliefAboutPirMurshidAndMazar: "",
      practicingSince: "",
    },
    personalInfoFormData: {
      beardStatus: "",
      preferredOutfit: "",
      entertainmentPreferences: "",
      healthConditions: "",
      personalTraits: [],
      genderEqualityView: "",
      lgbtqOpinion: "",
      specialConditions: [],
    },
    marriageInfoFormData: {
      guardianApproval: "",
      continueStudy: "",
      careerPlan: "",
      residence: "",
      arrangeHijab: "",
      dowryExpectation: "",
      allowShowingPhotoOnline: "",
      additionalMarriageInfo: "",
    },
    spousePreferenceInfoFormData: {
      age: "",
      skinTone: [],
      height: "",
      educationalQualification: "",
      religiousEducationalQualification: [],
      address: "",
      maritalStatus: [],
      specialCategory: [],
      religiousType: [],
      occupation: [],
      familyBackground: [],
      secondMarriage: "",
      location: "",
      qualities: "",
    },
    profilePicFormData: { photoId: "" },
    finalWordsFormData: {
      postApprovalOathTruthfulInfo: false,
      postApprovalOathNoMisuse: false,
      postApprovalOathLegalResponsibility: false,
    },
  },
};

const biodataSlice = createSlice({
  name: "biodata",
  initialState,
  reducers: {
    updateBiodataFormData(
      state,
      action: PayloadAction<{ key: string; data: any }>
    ) {
      state.biodataFormData = {
        ...state.biodataFormData,
        [action.payload.key]: action.payload.data,
      };
    },
    clearBiodataFormData(state) {
      state.biodataFormData = initialState.biodataFormData;
    },
  },
});

export const { updateBiodataFormData, clearBiodataFormData } =
  biodataSlice.actions;
export default biodataSlice.reducer;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\hooks.ts
// --------------------
// File: src/redux/hooks.ts
"use client";
import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import type { AppDispatch, RootState } from "./store";

// Use throughout your app instead of plain `useDispatch` and `useSelector`
export const useAppDispatch = useDispatch.withTypes<AppDispatch>();
export const useAppSelector = useSelector.withTypes<RootState>();

type TDebouncedProps = {
  searchQuery: string;
  delay: number;
};

export const useDebounced = ({ searchQuery, delay }: TDebouncedProps) => {
  const [debouncedValue, setDebouncedValue] = useState<string>(searchQuery);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(searchQuery);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [searchQuery, delay]);

  return debouncedValue;
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\reducer\rootReducer.ts
// --------------------
// File: src/redux/reducer/rootReducer.ts
import { baseApi } from "../api/baseApi";
import authReducer from "../features/auth/authSlice";
import biodataReducer from "../features/biodata/biodataSlice";

export const reducer = {
  [baseApi.reducerPath]: baseApi.reducer,
  auth: authReducer,
  biodata: biodataReducer,
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\store.ts
// --------------------
import { combineReducers, configureStore } from "@reduxjs/toolkit";
import { persistReducer, persistStore } from "redux-persist";
import storage from "redux-persist/lib/storage";
import { baseApi } from "./api/baseApi";
import authReducer from "./features/auth/authSlice";
import biodataReducer from "./features/biodata/biodataSlice";

const persistConfig = {
  key: "root",
  storage,
  whitelist: ["biodata", "auth"],
};

const rootReducer = combineReducers({
  [baseApi.reducerPath]: baseApi.reducer,
  biodata: biodataReducer,
  auth: authReducer,
});

const persistedReducer = persistReducer(persistConfig, rootReducer);

export const store = configureStore({
  reducer: persistedReducer,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ["persist/PERSIST", "persist/REHYDRATE"],
      },
    }).concat(baseApi.middleware) as any,
});

export const persistor = persistStore(store);

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\tag-Types.ts
// --------------------
// File: src/redux/tag-Types.ts

export enum tagTypes {
  user = "user",
  biodata = "biodata",
  notification = "notification",
  proposal = "proposal",
  contact = "contact",
  shortlist = "shortlist",
  favourite = "favourite",
}

export const tagTypesList = [
  tagTypes.user,
  tagTypes.biodata,
  tagTypes.notification,
  tagTypes.proposal,
  tagTypes.contact,
  tagTypes.shortlist,
  tagTypes.favourite,
];


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\api\baseApi.ts
// --------------------
// File: src/redux/api/baseApi.ts
import { axiosBaseQuery } from "@/helpers/axios/axiosBaseQuery";
import { createApi } from "@reduxjs/toolkit/query/react";
import { tagTypesList } from "../tag-Types";

export const baseApi = createApi({
  reducerPath: "api",
  baseQuery: axiosBaseQuery({
    baseUrl: `${process.env.NEXT_PUBLIC_SERVER_URL}`,
  }),
  endpoints: () => ({}),
  tagTypes: tagTypesList,
});


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\biodataApi.ts
// --------------------
// File: src/redux/features/admin/biodataApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const BIODATA_URL = "/biodata";

export const biodataApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createBiodata: build.mutation({
      query: (biodataData) => ({
        url: `${BIODATA_URL}`,
        method: "POST",
        data: biodataData,
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
    getAllBiodatas: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${BIODATA_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.biodata],
    }),
    getBiodataById: build.query({
      query: (id) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.biodata],
    }),
    updateBiodata: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
    deleteBiodata: build.mutation({
      query: (id) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
  }),
});

export const {
  useCreateBiodataMutation,
  useGetAllBiodatasQuery,
  useGetBiodataByIdQuery,
  useUpdateBiodataMutation,
  useDeleteBiodataMutation,
} = biodataApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\contactApi.ts
// --------------------
// File: src/redux/features/admin/contactApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const CONTACT_URL = "/contact";

export const contactApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createContact: build.mutation({
      query: (contactData) => ({
        url: `${CONTACT_URL}`,
        method: "POST",
        data: contactData,
      }),
      invalidatesTags: [tagTypes.contact],
    }),
    getAllContacts: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${CONTACT_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.contact],
    }),
    getContactById: build.query({
      query: (id) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.contact],
    }),
    updateContact: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.contact],
    }),
    deleteContact: build.mutation({
      query: (id) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.contact],
    }),
  }),
});

export const {
  useCreateContactMutation,
  useGetAllContactsQuery,
  useGetContactByIdQuery,
  useUpdateContactMutation,
  useDeleteContactMutation,
} = contactApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\favouriteApi.ts
// --------------------
// File: src/redux/features/admin/favouriteApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const FAVOURITE_URL = "/favourite";

export const favouriteApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createFavourite: build.mutation({
      query: (favouriteData) => ({
        url: `${FAVOURITE_URL}`,
        method: "POST",
        data: favouriteData,
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
    getAllFavourites: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${FAVOURITE_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.favourite],
    }),
    getFavouriteById: build.query({
      query: (id) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.favourite],
    }),
    updateFavourite: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
    deleteFavourite: build.mutation({
      query: (id) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
  }),
});

export const {
  useCreateFavouriteMutation,
  useGetAllFavouritesQuery,
  useGetFavouriteByIdQuery,
  useUpdateFavouriteMutation,
  useDeleteFavouriteMutation,
} = favouriteApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\notificationApi.ts
// --------------------
// File: src/redux/features/admin/notificationApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const NOTIFICATION_URL = "/notification";

export const notificationApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createNotification: build.mutation({
      query: (notificationData) => ({
        url: `${NOTIFICATION_URL}`,
        method: "POST",
        data: notificationData,
      }),
      invalidatesTags: [tagTypes.notification],
    }),
    getAllNotifications: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${NOTIFICATION_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.notification],
    }),
    getNotificationById: build.query({
      query: (id) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.notification],
    }),
    updateNotification: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.notification],
    }),
    deleteNotification: build.mutation({
      query: (id) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.notification],
    }),
  }),
});

export const {
  useCreateNotificationMutation,
  useGetAllNotificationsQuery,
  useGetNotificationByIdQuery,
  useUpdateNotificationMutation,
  useDeleteNotificationMutation,
} = notificationApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\proposalApi.ts
// --------------------
// File: src/redux/features/admin/proposalApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const PROPOSAL_URL = "/proposal";

export const proposalApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createProposal: build.mutation({
      query: (proposalData) => ({
        url: `${PROPOSAL_URL}`,
        method: "POST",
        data: proposalData,
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
    getAllProposals: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${PROPOSAL_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.proposal],
    }),
    getProposalById: build.query({
      query: (id) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.proposal],
    }),
    updateProposal: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
    deleteProposal: build.mutation({
      query: (id) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
  }),
});

export const {
  useCreateProposalMutation,
  useGetAllProposalsQuery,
  useGetProposalByIdQuery,
  useUpdateProposalMutation,
  useDeleteProposalMutation,
} = proposalApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\shortlistApi.ts
// --------------------
// File: src/redux/features/admin/shortlistApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const SHORTLIST_URL = "/shortlist";

export const shortlistApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createShortlist: build.mutation({
      query: (shortlistData) => ({
        url: `${SHORTLIST_URL}`,
        method: "POST",
        data: shortlistData,
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
    getAllShortlists: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${SHORTLIST_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.shortlist],
    }),
    getShortlistById: build.query({
      query: (id) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.shortlist],
    }),
    updateShortlist: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
    deleteShortlist: build.mutation({
      query: (id) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
  }),
});

export const {
  useCreateShortlistMutation,
  useGetAllShortlistsQuery,
  useGetShortlistByIdQuery,
  useUpdateShortlistMutation,
  useDeleteShortlistMutation,
} = shortlistApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\userApi.ts
// --------------------
// File: src/redux/features/admin/userApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const USER_URL = "/user";

export const userApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createUser: build.mutation({
      query: (userData) => ({
        url: `${USER_URL}`,
        method: "POST",
        data: userData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    getAllUsers: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${USER_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.user],
    }),
    getUserById: build.query({
      query: (id) => ({
        url: `${USER_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.user],
    }),
    getMe: build.query({
      query: () => ({
        url: `${USER_URL}/me`,
        method: "GET",
      }),
      providesTags: [tagTypes.user],
    }),
    updateMyProfile: build.mutation({
      query: (updatedData) => ({
        url: `${USER_URL}/me`,
        method: "PATCH",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    updateUser: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${USER_URL}/${id}`,
        method: "PATCH",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    deleteUser: build.mutation({
      query: (id) => ({
        url: `${USER_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.user],
    }),
  }),
});

export const {
  useCreateUserMutation,
  useGetAllUsersQuery,
  useGetUserByIdQuery,
  useGetMeQuery,
  useUpdateMyProfileMutation,
  useUpdateUserMutation,
  useDeleteUserMutation,
} = userApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\auth\authApi.ts
// --------------------
// File: src/redux/features/auth/authApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const AUTH_URL = "/auth";

export const authApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    userRegister: build.mutation({
      query: (registerData) => ({
        url: `${AUTH_URL}/register`,
        method: "POST",
        data: registerData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    userLogin: build.mutation({
      query: (loginData) => ({
        url: `${AUTH_URL}/login`,
        method: "POST",
        data: loginData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    verifyEmail: build.mutation({
      query: (verifyData) => ({
        url: `${AUTH_URL}/verify-email`,
        method: "POST",
        data: verifyData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    changePassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/change-password`,
        method: "POST",
        contentType: "application/json",
        data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    refreshToken: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/refresh-token`,
        method: "POST",
        contentType: "application/json",
        data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    forgotPassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/forgot-password`,
        method: "POST",
        data: data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    resetPassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/reset-password`,
        method: "POST",
        data: data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
  }),
});

export const {
  useUserRegisterMutation,
  useUserLoginMutation,
  useVerifyEmailMutation,
  useChangePasswordMutation,
  useRefreshTokenMutation,
  useForgotPasswordMutation,
  useResetPasswordMutation,
} = authApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\auth\authSlice.ts
// --------------------
// File: src/redux/features/auth/authSlice.ts
import { authAccessKey, authRefreshKey } from "@/constant/authkey";
import { RootState } from "@/redux/store";
import { getCookie, removeCookie, setCookie } from "@/utils/cookieHelper";
import { decodeToken, TUser } from "@/utils/tokenHelper";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

type TAuthState = {
  user: TUser | null;
  acesstoken: string | null;
  refreshtoken: string | null;
};

// Retrieve token from cookies
const storedAccessToken = getCookie(authAccessKey);
const storedRefreshToken = getCookie(authRefreshKey);
const storedUser = decodeToken(storedAccessToken); // Decode user from token

const initialState: TAuthState = {
  user: storedUser,
  acesstoken: storedAccessToken,
  refreshtoken: storedRefreshToken,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<TAuthState>) => {
      const { user, acesstoken, refreshtoken } = action.payload;
      state.user = user;
      state.acesstoken = acesstoken;
      state.refreshtoken = refreshtoken;
      if (acesstoken && refreshtoken) {
        setCookie(authAccessKey, acesstoken); // Store token in cookies
        setCookie(authRefreshKey, refreshtoken); // Store token in cookies
      }
    },
    logout: (state) => {
      state.user = null;
      state.acesstoken = null;
      state.refreshtoken = null;
      removeCookie(authAccessKey); // Remove token from cookies
      removeCookie(authRefreshKey); // Remove token from cookies
    },
  },
});

export const { setUser, logout } = authSlice.actions;
export default authSlice.reducer;

// Selectors
export const selectCurrentToken = (state: RootState) => state.auth.acesstoken;
export const selectCurrentUser = (state: RootState) => state.auth.user;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\biodata\biodataSlice.ts
// --------------------
import { BiodataFormData } from "@/lib/types";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface BiodataState {
  biodataFormData: BiodataFormData;
}

const initialState: BiodataState = {
  biodataFormData: {
    firstWordsFormData: {
      preApprovalAcceptTerms: false,
      preApprovalOathTruthfulInfo: false,
      preApprovalOathLegalResponsibility: false,
    },
    primaryInfoFormData: {
      biodataType: "",
      biodataFor: "",
      fullName: "",
      fatherName: "",
      motherName: "",
      email: "",
      phoneNumber: "",
      guardianContacts: [],
    },
    generalInfoFormData: {
      dateOfBirth: "",
      maritalStatus: "",
      skinTone: "",
      height: "",
      weight: "",
      bloodGroup: "",
      nationality: "",
    },
    addressInfoFormData: { addresses: [] },
    educationInfoFormData: {
      type: "",
      highestDegree: "",
      degrees: [],
      religiousEducation: [],
      detail: "",
    },
    occupationInfoFormData: { occupations: [], detail: "", monthlyIncome: "" },
    familyInfoFormData: {
      parentsAlive: "",
      fatherOccupation: "",
      motherOccupation: "",
      siblings: [],
      fatherSideDetail: "",
      motherSideDetail: "",
      familyType: "",
      familyBackground: "",
      livingCondition: "",
      wealthDescription: "",
    },
    religiousInfoFormData: {
      type: "",
      ideology: "",
      madhab: "",
      praysFiveTimes: "",
      hasQazaPrayers: "",
      canReciteQuranProperly: "",
      avoidsHaramIncome: "",
      modestDressing: "",
      followsMahramRules: "",
      beliefAboutPirMurshidAndMazar: "",
      practicingSince: "",
    },
    personalInfoFormData: {
      beardStatus: "",
      preferredOutfit: "",
      entertainmentPreferences: "",
      healthConditions: "",
      personalTraits: [],
      genderEqualityView: "",
      lgbtqOpinion: "",
      specialConditions: [],
    },
    marriageInfoFormData: {
      guardianApproval: "",
      continueStudy: "",
      careerPlan: "",
      residence: "",
      arrangeHijab: "",
      dowryExpectation: "",
      allowShowingPhotoOnline: "",
      additionalMarriageInfo: "",
    },
    spousePreferenceInfoFormData: {
      age: "",
      skinTone: [],
      height: "",
      educationalQualification: "",
      religiousEducationalQualification: [],
      address: "",
      maritalStatus: [],
      specialCategory: [],
      religiousType: [],
      occupation: [],
      familyBackground: [],
      secondMarriage: "",
      location: "",
      qualities: "",
    },
    profilePicFormData: { photoId: "" },
    finalWordsFormData: {
      postApprovalOathTruthfulInfo: false,
      postApprovalOathNoMisuse: false,
      postApprovalOathLegalResponsibility: false,
    },
  },
};

const biodataSlice = createSlice({
  name: "biodata",
  initialState,
  reducers: {
    updateBiodataFormData(
      state,
      action: PayloadAction<{ key: string; data: any }>
    ) {
      state.biodataFormData = {
        ...state.biodataFormData,
        [action.payload.key]: action.payload.data,
      };
    },
    clearBiodataFormData(state) {
      state.biodataFormData = initialState.biodataFormData;
    },
  },
});

export const { updateBiodataFormData, clearBiodataFormData } =
  biodataSlice.actions;
export default biodataSlice.reducer;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\biodataApi.ts
// --------------------
// File: src/redux/features/admin/biodataApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const BIODATA_URL = "/biodata";

export const biodataApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createBiodata: build.mutation({
      query: (biodataData) => ({
        url: `${BIODATA_URL}`,
        method: "POST",
        data: biodataData,
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
    getAllBiodatas: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${BIODATA_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.biodata],
    }),
    getBiodataById: build.query({
      query: (id) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.biodata],
    }),
    updateBiodata: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
    deleteBiodata: build.mutation({
      query: (id) => ({
        url: `${BIODATA_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.biodata],
    }),
  }),
});

export const {
  useCreateBiodataMutation,
  useGetAllBiodatasQuery,
  useGetBiodataByIdQuery,
  useUpdateBiodataMutation,
  useDeleteBiodataMutation,
} = biodataApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\contactApi.ts
// --------------------
// File: src/redux/features/admin/contactApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const CONTACT_URL = "/contact";

export const contactApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createContact: build.mutation({
      query: (contactData) => ({
        url: `${CONTACT_URL}`,
        method: "POST",
        data: contactData,
      }),
      invalidatesTags: [tagTypes.contact],
    }),
    getAllContacts: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${CONTACT_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.contact],
    }),
    getContactById: build.query({
      query: (id) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.contact],
    }),
    updateContact: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.contact],
    }),
    deleteContact: build.mutation({
      query: (id) => ({
        url: `${CONTACT_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.contact],
    }),
  }),
});

export const {
  useCreateContactMutation,
  useGetAllContactsQuery,
  useGetContactByIdQuery,
  useUpdateContactMutation,
  useDeleteContactMutation,
} = contactApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\favouriteApi.ts
// --------------------
// File: src/redux/features/admin/favouriteApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const FAVOURITE_URL = "/favourite";

export const favouriteApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createFavourite: build.mutation({
      query: (favouriteData) => ({
        url: `${FAVOURITE_URL}`,
        method: "POST",
        data: favouriteData,
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
    getAllFavourites: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${FAVOURITE_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.favourite],
    }),
    getFavouriteById: build.query({
      query: (id) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.favourite],
    }),
    updateFavourite: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
    deleteFavourite: build.mutation({
      query: (id) => ({
        url: `${FAVOURITE_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.favourite],
    }),
  }),
});

export const {
  useCreateFavouriteMutation,
  useGetAllFavouritesQuery,
  useGetFavouriteByIdQuery,
  useUpdateFavouriteMutation,
  useDeleteFavouriteMutation,
} = favouriteApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\notificationApi.ts
// --------------------
// File: src/redux/features/admin/notificationApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const NOTIFICATION_URL = "/notification";

export const notificationApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createNotification: build.mutation({
      query: (notificationData) => ({
        url: `${NOTIFICATION_URL}`,
        method: "POST",
        data: notificationData,
      }),
      invalidatesTags: [tagTypes.notification],
    }),
    getAllNotifications: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${NOTIFICATION_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.notification],
    }),
    getNotificationById: build.query({
      query: (id) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.notification],
    }),
    updateNotification: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.notification],
    }),
    deleteNotification: build.mutation({
      query: (id) => ({
        url: `${NOTIFICATION_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.notification],
    }),
  }),
});

export const {
  useCreateNotificationMutation,
  useGetAllNotificationsQuery,
  useGetNotificationByIdQuery,
  useUpdateNotificationMutation,
  useDeleteNotificationMutation,
} = notificationApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\proposalApi.ts
// --------------------
// File: src/redux/features/admin/proposalApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const PROPOSAL_URL = "/proposal";

export const proposalApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createProposal: build.mutation({
      query: (proposalData) => ({
        url: `${PROPOSAL_URL}`,
        method: "POST",
        data: proposalData,
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
    getAllProposals: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${PROPOSAL_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.proposal],
    }),
    getProposalById: build.query({
      query: (id) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.proposal],
    }),
    updateProposal: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
    deleteProposal: build.mutation({
      query: (id) => ({
        url: `${PROPOSAL_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.proposal],
    }),
  }),
});

export const {
  useCreateProposalMutation,
  useGetAllProposalsQuery,
  useGetProposalByIdQuery,
  useUpdateProposalMutation,
  useDeleteProposalMutation,
} = proposalApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\shortlistApi.ts
// --------------------
// File: src/redux/features/admin/shortlistApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const SHORTLIST_URL = "/shortlist";

export const shortlistApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createShortlist: build.mutation({
      query: (shortlistData) => ({
        url: `${SHORTLIST_URL}`,
        method: "POST",
        data: shortlistData,
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
    getAllShortlists: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${SHORTLIST_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.shortlist],
    }),
    getShortlistById: build.query({
      query: (id) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.shortlist],
    }),
    updateShortlist: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "PUT",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
    deleteShortlist: build.mutation({
      query: (id) => ({
        url: `${SHORTLIST_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.shortlist],
    }),
  }),
});

export const {
  useCreateShortlistMutation,
  useGetAllShortlistsQuery,
  useGetShortlistByIdQuery,
  useUpdateShortlistMutation,
  useDeleteShortlistMutation,
} = shortlistApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\admin\userApi.ts
// --------------------
// File: src/redux/features/admin/userApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const USER_URL = "/user";

export const userApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    createUser: build.mutation({
      query: (userData) => ({
        url: `${USER_URL}`,
        method: "POST",
        data: userData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    getAllUsers: build.query({
      query: (arg: Record<string, any>) => ({
        url: `${USER_URL}`,
        method: "GET",
        params: arg,
      }),
      providesTags: [tagTypes.user],
    }),
    getUserById: build.query({
      query: (id) => ({
        url: `${USER_URL}/${id}`,
        method: "GET",
      }),
      providesTags: [tagTypes.user],
    }),
    getMe: build.query({
      query: () => ({
        url: `${USER_URL}/me`,
        method: "GET",
      }),
      providesTags: [tagTypes.user],
    }),
    updateMyProfile: build.mutation({
      query: (updatedData) => ({
        url: `${USER_URL}/me`,
        method: "PATCH",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    updateUser: build.mutation({
      query: ({ id, updatedData }) => ({
        url: `${USER_URL}/${id}`,
        method: "PATCH",
        data: updatedData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    deleteUser: build.mutation({
      query: (id) => ({
        url: `${USER_URL}/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: [tagTypes.user],
    }),
  }),
});

export const {
  useCreateUserMutation,
  useGetAllUsersQuery,
  useGetUserByIdQuery,
  useGetMeQuery,
  useUpdateMyProfileMutation,
  useUpdateUserMutation,
  useDeleteUserMutation,
} = userApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\auth\authApi.ts
// --------------------
// File: src/redux/features/auth/authApi.ts
import { baseApi } from "@/redux/api/baseApi";
import { tagTypes } from "@/redux/tag-Types";

const AUTH_URL = "/auth";

export const authApi = baseApi.injectEndpoints({
  endpoints: (build) => ({
    userRegister: build.mutation({
      query: (registerData) => ({
        url: `${AUTH_URL}/register`,
        method: "POST",
        data: registerData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    userLogin: build.mutation({
      query: (loginData) => ({
        url: `${AUTH_URL}/login`,
        method: "POST",
        data: loginData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    verifyEmail: build.mutation({
      query: (verifyData) => ({
        url: `${AUTH_URL}/verify-email`,
        method: "POST",
        data: verifyData,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    changePassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/change-password`,
        method: "POST",
        contentType: "application/json",
        data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    refreshToken: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/refresh-token`,
        method: "POST",
        contentType: "application/json",
        data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    forgotPassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/forgot-password`,
        method: "POST",
        data: data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
    resetPassword: build.mutation({
      query: (data) => ({
        url: `${AUTH_URL}/reset-password`,
        method: "POST",
        data: data,
      }),
      invalidatesTags: [tagTypes.user],
    }),
  }),
});

export const {
  useUserRegisterMutation,
  useUserLoginMutation,
  useVerifyEmailMutation,
  useChangePasswordMutation,
  useRefreshTokenMutation,
  useForgotPasswordMutation,
  useResetPasswordMutation,
} = authApi;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\auth\authSlice.ts
// --------------------
// File: src/redux/features/auth/authSlice.ts
import { authAccessKey, authRefreshKey } from "@/constant/authkey";
import { RootState } from "@/redux/store";
import { getCookie, removeCookie, setCookie } from "@/utils/cookieHelper";
import { decodeToken, TUser } from "@/utils/tokenHelper";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

type TAuthState = {
  user: TUser | null;
  acesstoken: string | null;
  refreshtoken: string | null;
};

// Retrieve token from cookies
const storedAccessToken = getCookie(authAccessKey);
const storedRefreshToken = getCookie(authRefreshKey);
const storedUser = decodeToken(storedAccessToken); // Decode user from token

const initialState: TAuthState = {
  user: storedUser,
  acesstoken: storedAccessToken,
  refreshtoken: storedRefreshToken,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setUser: (state, action: PayloadAction<TAuthState>) => {
      const { user, acesstoken, refreshtoken } = action.payload;
      state.user = user;
      state.acesstoken = acesstoken;
      state.refreshtoken = refreshtoken;
      if (acesstoken && refreshtoken) {
        setCookie(authAccessKey, acesstoken); // Store token in cookies
        setCookie(authRefreshKey, refreshtoken); // Store token in cookies
      }
    },
    logout: (state) => {
      state.user = null;
      state.acesstoken = null;
      state.refreshtoken = null;
      removeCookie(authAccessKey); // Remove token from cookies
      removeCookie(authRefreshKey); // Remove token from cookies
    },
  },
});

export const { setUser, logout } = authSlice.actions;
export default authSlice.reducer;

// Selectors
export const selectCurrentToken = (state: RootState) => state.auth.acesstoken;
export const selectCurrentUser = (state: RootState) => state.auth.user;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\features\biodata\biodataSlice.ts
// --------------------
import { BiodataFormData } from "@/lib/types";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";

interface BiodataState {
  biodataFormData: BiodataFormData;
}

const initialState: BiodataState = {
  biodataFormData: {
    firstWordsFormData: {
      preApprovalAcceptTerms: false,
      preApprovalOathTruthfulInfo: false,
      preApprovalOathLegalResponsibility: false,
    },
    primaryInfoFormData: {
      biodataType: "",
      biodataFor: "",
      fullName: "",
      fatherName: "",
      motherName: "",
      email: "",
      phoneNumber: "",
      guardianContacts: [],
    },
    generalInfoFormData: {
      dateOfBirth: "",
      maritalStatus: "",
      skinTone: "",
      height: "",
      weight: "",
      bloodGroup: "",
      nationality: "",
    },
    addressInfoFormData: { addresses: [] },
    educationInfoFormData: {
      type: "",
      highestDegree: "",
      degrees: [],
      religiousEducation: [],
      detail: "",
    },
    occupationInfoFormData: { occupations: [], detail: "", monthlyIncome: "" },
    familyInfoFormData: {
      parentsAlive: "",
      fatherOccupation: "",
      motherOccupation: "",
      siblings: [],
      fatherSideDetail: "",
      motherSideDetail: "",
      familyType: "",
      familyBackground: "",
      livingCondition: "",
      wealthDescription: "",
    },
    religiousInfoFormData: {
      type: "",
      ideology: "",
      madhab: "",
      praysFiveTimes: "",
      hasQazaPrayers: "",
      canReciteQuranProperly: "",
      avoidsHaramIncome: "",
      modestDressing: "",
      followsMahramRules: "",
      beliefAboutPirMurshidAndMazar: "",
      practicingSince: "",
    },
    personalInfoFormData: {
      beardStatus: "",
      preferredOutfit: "",
      entertainmentPreferences: "",
      healthConditions: "",
      personalTraits: [],
      genderEqualityView: "",
      lgbtqOpinion: "",
      specialConditions: [],
    },
    marriageInfoFormData: {
      guardianApproval: "",
      continueStudy: "",
      careerPlan: "",
      residence: "",
      arrangeHijab: "",
      dowryExpectation: "",
      allowShowingPhotoOnline: "",
      additionalMarriageInfo: "",
    },
    spousePreferenceInfoFormData: {
      age: "",
      skinTone: [],
      height: "",
      educationalQualification: "",
      religiousEducationalQualification: [],
      address: "",
      maritalStatus: [],
      specialCategory: [],
      religiousType: [],
      occupation: [],
      familyBackground: [],
      secondMarriage: "",
      location: "",
      qualities: "",
    },
    profilePicFormData: { photoId: "" },
    finalWordsFormData: {
      postApprovalOathTruthfulInfo: false,
      postApprovalOathNoMisuse: false,
      postApprovalOathLegalResponsibility: false,
    },
  },
};

const biodataSlice = createSlice({
  name: "biodata",
  initialState,
  reducers: {
    updateBiodataFormData(
      state,
      action: PayloadAction<{ key: string; data: any }>
    ) {
      state.biodataFormData = {
        ...state.biodataFormData,
        [action.payload.key]: action.payload.data,
      };
    },
    clearBiodataFormData(state) {
      state.biodataFormData = initialState.biodataFormData;
    },
  },
});

export const { updateBiodataFormData, clearBiodataFormData } =
  biodataSlice.actions;
export default biodataSlice.reducer;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\redux\reducer\rootReducer.ts
// --------------------
// File: src/redux/reducer/rootReducer.ts
import { baseApi } from "../api/baseApi";
import authReducer from "../features/auth/authSlice";
import biodataReducer from "../features/biodata/biodataSlice";

export const reducer = {
  [baseApi.reducerPath]: baseApi.reducer,
  auth: authReducer,
  biodata: biodataReducer,
};


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\lib\consts.ts
// --------------------
export const biodataTypes = [
  { id: "GROOM", title: "পাত্রের বায়োডাটা" },
  { id: "BRIDE", title: "পাত্রীর বায়োডাটা" },
];

export const maritalStatuses = [
  { id: "unmarried", title: "অবিবাহিত", for: "both" },
  { id: "married", title: "বিবাহিত", for: "both" },
  { id: "divorced", title: "ডিভোর্সড", for: "both" },
  { id: "widowed_male", title: "বিপত্নীক", for: "BRIDE" },
  { id: "widowed_female", title: "বিধবা", for: "GROOM" },
];

export const religiousLifestyle = [
  { id: "devout", title: "পূর্ণ ধার্মিক/প্র্যাক্টিসিং", for: "both" },
  { id: "practicing", title: "প্রাক্টিসিংয়ের চেষ্টারত", for: "both" },
  { id: "general", title: "জেনারেল/নন-প্রাক্টিসিং", for: "both" },
];

export const skinTones = [
  { id: "dark", title: "গাঢ় ত্বক", for: "both" },
  { id: "medium", title: "শ্যামলা", for: "both" },
  { id: "light_medium", title: "উজ্জ্বল শ্যামলা", for: "both" },
  { id: "fair", title: "ফর্সা", for: "both" },
  { id: "very_fair", title: "উজ্জ্বল ফর্সা", for: "both" },
];

export const heights = [
  { id: "47", title: "৪ ফুটের কম", for: "both" },
  { id: "48", title: "৪'", for: "both" },
  { id: "49", title: "৪'১\"", for: "both" },
  { id: "50", title: "৪'২\"", for: "both" },
  { id: "51", title: "৪'৩\"", for: "both" },
  { id: "52", title: "৪'৪\"", for: "both" },
  { id: "53", title: "৪'৫\"", for: "both" },
  { id: "54", title: "৪'৬\"", for: "both" },
  { id: "55", title: "৪'৭\"", for: "both" },
  { id: "56", title: "৪'৮\"", for: "both" },
  { id: "57", title: "৪'৯\"", for: "both" },
  { id: "58", title: "৪'১০\"", for: "both" },
  { id: "59", title: "৪'১১\"", for: "both" },
  { id: "60", title: "৫'", for: "both" },
  { id: "61", title: "৫'১\"", for: "both" },
  { id: "62", title: "৫'২\"", for: "both" },
  { id: "63", title: "৫'৩\"", for: "both" },
  { id: "64", title: "৫'৪\"", for: "both" },
  { id: "65", title: "৫'৫\"", for: "both" },
  { id: "66", title: "৫'৬\"", for: "both" },
  { id: "67", title: "৫'৭\"", for: "both" },
  { id: "68", title: "৫'৮\"", for: "both" },
  { id: "69", title: "৫'৯\"", for: "both" },
  { id: "70", title: "৫'১০\"", for: "both" },
  { id: "71", title: "৫'১১\"", for: "both" },
  { id: "72", title: "৬'", for: "both" },
  { id: "73", title: "৬'১\"", for: "both" },
  { id: "74", title: "৬'২\"", for: "both" },
  { id: "75", title: "৬'৩\"", for: "both" },
  { id: "76", title: "৬'৪\"", for: "both" },
  { id: "77", title: "৬'৫\"", for: "both" },
  { id: "78", title: "৬'৬\"", for: "both" },
  { id: "79", title: "৬'৭\"", for: "both" },
  { id: "80", title: "৬'৮\"", for: "both" },
  { id: "81", title: "৬'৯\"", for: "both" },
  { id: "82", title: "৬'১০\"", for: "both" },
  { id: "83", title: "৬'১১\"", for: "both" },
  { id: "84", title: "৭'", for: "both" },
  { id: "85", title: "৭ ফুটের বেশি", for: "both" },
];

export const bloodGroups = [
  { id: "A+", title: "A+", for: "both" },
  { id: "B+", title: "B+", for: "both" },
  { id: "A-", title: "A-", for: "both" },
  { id: "B-", title: "B-", for: "both" },
  { id: "AB+", title: "AB+", for: "both" },
  { id: "AB-", title: "AB-", for: "both" },
  { id: "O+", title: "O+", for: "both" },
  { id: "O-", title: "O-", for: "both" },
];

export const nationalities = [
  { id: "bangladeshi", title: "বাংলাদেশী", for: "both" },
  { id: "foreign_citizen", title: "ফরেইন সিটিজেন", for: "both" },
];

export const types = [
  { id: "permanent_address", title: "স্থায়ী ঠিকানা", for: "both" },
  { id: "current_address", title: "বর্তমান ঠিকানা", for: "both" },
];

export const locations = [
  { id: "bangladesh", title: "বাংলাদেশ", for: "both" },
  { id: "foreign", title: "বিদেশ", for: "both" },
];

export const citizenshipOptions = [
  { id: "yes", title: "হ্যা", for: "both" },
  { id: "no", title: "না", for: "both" },
];

export const educationTypes = [
  { id: "general", title: "জেনারেল", for: "both" },
  { id: "alia", title: "আলিয়া", for: "both" },
  { id: "qawmi", title: "কওমী", for: "both" },
];

export const occupationsList = [
  { id: "business", title: "ব্যবসা", for: "both" },
  { id: "govt_job", title: "সরকারি চাকরিজীবী", for: "both" },
  { id: "private_job", title: "বেসরকারি চাকরিজীবী", for: "both" },
  { id: "home_tutor", title: "হোম টিউটর", for: "both" },
  { id: "teacher", title: "শিক্ষক/শিক্ষিকা", for: "both" },
  { id: "lawyer", title: "আইনজীবী", for: "both" },
  { id: "engineer", title: "ইঞ্জিনিয়ার", for: "both" },
  { id: "doctor", title: "ডাক্তার", for: "both" },
  { id: "vet_doctor", title: "ভেটেরিনারি ডাক্তার", for: "both" },
  { id: "nurse", title: "নার্স", for: "both" },
  { id: "pharmacist", title: "ফার্মাসিস্ট", for: "both" },
  { id: "paramedic", title: "প্যারামেডিক", for: "both" },
  { id: "therapist", title: "থেরাপিস্ট", for: "both" },
  { id: "medical_technologist", title: "মেডিকেল টেকনোলজিস্ট", for: "both" },
  { id: "medical_assistant", title: "মেডিক্যাল অ্যাসিস্ট্যান্ট", for: "both" },
  { id: "military_job", title: "সামরিক জব", for: "both" },
  { id: "paramilitary_job", title: "আধা সামরিক জব", for: "both" },
  { id: "imam", title: "ইমাম", for: "both" },
  { id: "muezzin", title: "মুয়াজ্জিন", for: "both" },
  { id: "pilot", title: "পাইলট", for: "both" },
  { id: "freelancer", title: "ফ্রিল্যান্সার", for: "both" },
  { id: "student", title: "শিক্ষার্থী", for: "both" },
  { id: "mbbs_bds_student", title: "MBBS/BDS শিক্ষার্থী", for: "both" },
  { id: "expatriate_job", title: "প্রবাসী-প্রবাস জব", for: "both" },
  { id: "manual_labor", title: "মিস্ত্রী/কায়িক শ্রম", for: "both" },
  { id: "agriculture", title: "কৃষিকাজ", for: "both" },
  { id: "jobless", title: "চাকরির সন্ধানরত/বেকার", for: "both" },
  { id: "family_property", title: "পারিবারিক সম্পত্তি", for: "both" },
  { id: "no_occupation", title: "পেশা নেই/কর্মহীন", for: "both" },
  { id: "other_occupation", title: "অন্যান্য", for: "both" },
];

export const familyBackgrounds = [
  { id: "upper_class", title: "উচ্চবিত্ত", for: "both" },
  { id: "upper_middle", title: "উচ্চ মধ্যবিত্ত", for: "both" },
  { id: "middle", title: "মধ্যবিত্ত", for: "both" },
  { id: "lower_middle", title: "নিম্ন মধ্যবিত্ত", for: "both" },
  { id: "lower_class", title: "নিম্নবিত্ত", for: "both" },
];

export const familyTypes = [
  { id: "nuclear_family", title: "একক পরিবার", for: "both" },
  { id: "joint_family", title: "যৌথ পরিবার", for: "both" },
];

export const siblingTypes = [
  { id: "brother", title: "ভাই", for: "both" },
  { id: "sister", title: "বোন", for: "both" },
];

export const religiousIdeologies = [
  { id: "sunni", title: "সুন্নি", for: "both" },
  { id: "shia", title: "শিয়া", for: "both" },
  { id: "other", title: "অন্যান্য", for: "both" },
  { id: "unknown", title: "জানা নেই", for: "both" },
];

export const madhhabs = [
  { id: "hanafi", title: "হানাফি", for: "both" },
  { id: "salafi", title: "সালাফি/আহলে হাদিস", for: "both" },
  { id: "shafi", title: "শাফেঈ", for: "both" },
  { id: "maliki", title: "মালিকী", for: "both" },
  { id: "hambali", title: "হাম্বলি", for: "both" },
  { id: "other_madhhab", title: "অন্যান্য", for: "both" },
  { id: "unknown_madhhab", title: "জানা নেই", for: "both" },
];

export const education = [
  { id: "qawmi", title: "কওমি", for: "both" },
  { id: "alia", title: "আলিয়া", for: "both" },
  { id: "diploma", title: "ডিপ্লোমা", for: "both" },
  { id: "bachelor", title: "স্নাতক", for: "both" },
  { id: "masters", title: "স্নাতকোত্তর", for: "both" },
  { id: "doctoral", title: "ডক্টরাল", for: "both" },
  { id: "bcs", title: "বি.সি.এস (BCS)", for: "both" },
  { id: "medical", title: "মেডিকেল", for: "both" },
  { id: "defense", title: "ডিফেন্স", for: "both" },
  { id: "police_law", title: "পুলিশ/আইন-শৃঙ্খলা বাহিনী", for: "both" },
  { id: "aviation", title: "এভিয়েশন", for: "both" },
];

export const religiousEducation = [
  { id: "hafiz_male", title: "হাফেজ", for: "BRIDE" },
  { id: "hafiza_female", title: "হাফেজা", for: "GROOM" },
  { id: "maulana_male", title: "মাওলানা", for: "BRIDE" },
  { id: "alema_female", title: "আলেমা", for: "GROOM" },
  { id: "mufti_male", title: "মুফতি", for: "BRIDE" },
  { id: "muftia_female", title: "মুফতিয়া", for: "GROOM" },
  { id: "muhaddis_male", title: "মুহাদ্দিস", for: "BRIDE" },
  { id: "muhaddisa_female", title: "মুহাদ্দিসা", for: "GROOM" },
  { id: "mufassir", title: "মুফাসসির", for: "both" },
  { id: "faqih", title: "ফকিহ", for: "both" },
  { id: "daee_male", title: "দা'য়ী", for: "BRIDE" },
  { id: "daiya_female", title: "দাঈয়া", for: "GROOM" },
  { id: "adib", title: "আদিব", for: "both" },
  { id: "qari_male", title: "ক্বারী", for: "BRIDE" },
  { id: "qaria_female", title: "ক্বারিয়া", for: "GROOM" },
  { id: "talib_quran", title: "তালিবে কুরআন", for: "both" },
  { id: "tajwid_student", title: "তাজবীদ শিক্ষার্থী", for: "both" },
  { id: "muallim_talim", title: "মুয়াল্লিমুন ফি তালিম", for: "both" },
  { id: "islamic_scholar", title: "ইসলামিক স্কলার", for: "both" },
];

export const characteristics = [
  { id: "introvert", title: "ইন্ট্রোভার্ট", for: "both" },
  { id: "extrovert", title: "এক্সট্রোভার্ট", for: "both" },
  { id: "family_oriented", title: "সাংসারিক", for: "both" },
  { id: "sociable", title: "মিশুক", for: "both" },
  { id: "calm_polite", title: "শান্ত-শিষ্ট", for: "both" },
  { id: "patient", title: "ধৈর্যশীল", for: "both" },
  { id: "affectionate", title: "ভালবাসাপ্রবণ", for: "both" },
  { id: "supportive", title: "সাপোর্টিভ", for: "both" },
  { id: "conscious", title: "সচেতন", for: "both" },
  { id: "emotional", title: "ইমোশনাল", for: "both" },
  { id: "kind", title: "দয়ালু", for: "both" },
  { id: "generous", title: "দানশীল", for: "both" },
  { id: "cultured", title: "সংস্কৃতিমনা", for: "both" },
  { id: "religious", title: "ধার্মিক", for: "both" },
  { id: "caring", title: "যত্নশীল", for: "both" },
  { id: "responsible", title: "দায়িত্ববান", for: "both" },
  { id: "assertive", title: "প্রতিবাদী", for: "both" },
  { id: "temperamental", title: "রাগী", for: "both" },
  { id: "restless", title: "অস্থির", for: "both" },
  { id: "stubborn", title: "একগুঁয়ে", for: "both" },
  { id: "perfectionist", title: "খুঁতখুঁতে", for: "both" },
];

export const specialCatagories = [
  { id: "social_worker", title: "আমি একজন সমাজ সেবক", for: "both" },
  {
    id: "religious_service",
    title: "আমি দ্বীনের খেদমতে আছি",
    for: "both",
  },
  { id: "new_muslim", title: "আমি একজন নওমুসলিম", for: "both" },
  { id: "disabled", title: "আমি প্রতিবন্ধী", for: "both" },
  { id: "orphan", title: "আমি এতিম", for: "both" },
  {
    id: "infertility_issues",
    title: "আমি বন্ধ্যাত্ব সমস্যায় ভুগছি",
    for: "both",
  },
  {
    id: "short_term_divorcee",
    title: "আমি শর্ট ডিভোর্সি",
    for: "both",
  },
  {
    id: "short_height",
    title: "আমি স্বল্প উচ্চতার মানুষ আলহামদুলিল্লাহ",
    for: "both",
  },
  {
    id: "urban_resident",
    title: "আমি শহরে বসবাসকারী",
    for: "both",
  },
  {
    id: "rural_resident",
    title: "আমি গ্রামে বসবাসকারী",
    for: "both",
  },
  { id: "tabligh_member", title: "আমি তাবলীগ এর সাথে যুক্ত", for: "BRIDE" },
  {
    id: "single_father",
    title: "আমি সিঙ্গেল ফাদার-সন্তান আছে কিন্তু মা নেই বা দায়িত্বে নেই",
    for: "BRIDE",
  },
  {
    id: "single_mother",
    title: "আমি সিঙ্গেল মাদার-সন্তান আছে কিন্তু বাবা নেই বা দায়িত্বে নেই",
    for: "GROOM",
  },
];

export const spouseSpecialCatagories = [
  { id: "expatriate", title: "প্রবাসী", for: "both" },
  { id: "foreign_citizen", title: "ফরেইন সিটিজেন", for: "both" },
  { id: "social_worker", title: "সমাজ সেবক", for: "both" },
  { id: "tabligh", title: "তাবলীগ", for: "both" },
  { id: "deen_service", title: "দ্বীনের খেদমতকারী", for: "both" },
  { id: "new_muslim", title: "নওমুসলিম", for: "both" },
  { id: "disabled", title: "প্রতিবন্ধী", for: "both" },
  { id: "orphan", title: "এতিম", for: "both" },
  { id: "infertile", title: "বন্ধ্যা/ইনফার্টিলিটি", for: "both" },
  { id: "short_divorced", title: "শর্ট ডিভোর্সি", for: "both" },
  { id: "single_father", title: "সিঙ্গেল ফাদার", for: "BRIDE" },
  { id: "single_mother", title: "সিঙ্গেল মাদার", for: "GROOM" },
  { id: "short_height", title: "স্বল্প উচ্চতার", for: "both" },
  { id: "older_age", title: "বয়সে বেশি", for: "both" },
  { id: "urban_resident", title: "শহরে বসবাসকারী", for: "both" },
  { id: "rural_resident", title: "গ্রামে বসবাসকারী", for: "both" },
  {
    id: "allow_wife_job",
    title: "স্ত্রীকে চাকরি/ব্যবসা করতে দিবে",
    for: "BRIDE",
  },
  { id: "allow_wife_study", title: "স্ত্রীকে পড়াশোনা করতে দিবে", for: "BRIDE" },
  { id: "employed_female", title: "চাকরিজীবী", for: "GROOM" },
  {
    id: "job_interest_post_marriage",
    title: "বিয়ের পর চাকরি/ব্যাবসায় আগ্রহী",
    for: "GROOM",
  },
  { id: "masna_interest", title: "মাসনায় আগ্রহী", for: "GROOM" },
];

export const afterMarriageStudies = [
  { id: "not_interested", title: "না, আমি একদমই চাই না", for: "BRIDE" },
  {
    id: "definitely_allowed",
    title: "হ্যা, অবশ্যই করতে পারবে",
    for: "BRIDE",
  },
  {
    id: "not_preferred_but_allowed",
    title: "ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে",
    for: "BRIDE",
  },
  {
    id: "allowed_with_full_hijab",
    title: "পরিপূর্ণ পর্দা মেনে করতে পারলে ঠিক আছে",
    for: "BRIDE",
  },
  { id: "not_interested_groom", title: "না, একদমই ইচ্ছা নেই", for: "GROOM" },
  { id: "definitely_want", title: "হ্যা, অবশ্যই করতে চাই", for: "GROOM" },
  {
    id: "interested_with_discussion",
    title: "হ্যা, করতে ইচ্ছুক (আলোচনা/অনুমতি সাপেক্ষে)",
    for: "GROOM",
  },
];

export const afterMarriageJobs = [
  { id: "not_interested", title: "না, আমি একদমই চাই না", for: "BRIDE" },
  {
    id: "definitely_allowed",
    title: "হ্যা, অবশ্যই করতে পারবে",
    for: "BRIDE",
  },
  {
    id: "not_preferred_but_allowed",
    title: "ইচ্ছা নাই, তবে করতে চাইলে করতে পারবে",
    for: "BRIDE",
  },
  {
    id: "allowed_with_full_hijab",
    title: "পরিপূর্ণ পর্দা মেনে করতে পারলে ঠিক আছে",
    for: "BRIDE",
  },
  {
    id: "work_from_home",
    title: "বাসায় থেকে কিছু করতে চাইলে করবে",
    for: "BRIDE",
  },
  {
    id: "considered_if_needed",
    title: "খুব প্রয়োজন হলে বিবেচনা করা হবে",
    for: "BRIDE",
  },
  {
    id: "social_or_religious_service",
    title: "সমাজসেবা/দ্বীনের খেদমত করতে চাইলে করতে পারবে",
    for: "BRIDE",
  },
  { id: "not_interested_groom", title: "না, একদমই ইচ্ছা নেই", for: "GROOM" },
  {
    id: "job_with_discussion",
    title: "চাকরি করতে ইচ্ছুক (আলোচনা/অনুমতি সাপেক্ষে)",
    for: "GROOM",
  },
  {
    id: "business_with_discussion",
    title: "ব্যবসা করতে ইচ্ছুক (আলোচনা/অনুমতি সাপেক্ষে)",
    for: "GROOM",
  },
  {
    id: "work_from_home_online",
    title: "ঘরে বসে/অনলাইনে কিছু করতে ইচ্ছুক",
    for: "GROOM",
  },
  {
    id: "social_or_religious_service_groom",
    title: "সমাজসেবা/দ্বীনের খেদমত করতে ইচ্ছুক (অনলাইনে/অফলাইনে)",
    for: "GROOM",
  },
];

export const spouseLocationOptions = [
  { id: "urban_resident", title: "শহরে বসবাসকারী", for: "both" },
  { id: "rural_resident", title: "গ্রামে বসবাসকারী", for: "both" },
  { id: "both", title: "উভয়ই", for: "both" },
];

export const secondMarriageOptions = [
  { id: "yes", title: "হ্যা", for: "both" },
  { id: "no", title: "না", for: "both" },
];


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\lib\provider\RootProvider.tsx
// --------------------
"use client";
import { persistor, store } from "@/redux/store";
import dynamic from "next/dynamic";
import { useEffect, useState } from "react";
import { Provider } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";

// Dynamically import PersistGate to reduce initial bundle size
const DynamicPersistGate = dynamic(() => Promise.resolve(PersistGate), {
  ssr: false,
});

const RootProvider = ({ children }: { children: React.ReactNode }) => {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  // During SSR and initial client render, only render the Provider
  if (!mounted) {
    return <Provider store={store}>{children}</Provider>;
  }

  // After hydration, render the full provider with PersistGate
  return (
    <Provider store={store}>
      <DynamicPersistGate loading={null} persistor={persistor}>
        {children}
      </DynamicPersistGate>
    </Provider>
  );
};

export default RootProvider;


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\lib\types.ts
// --------------------
import { BiodataFormStep } from "@/app/(main)/biodata-editor/steps";
import { z } from "zod";
import {
  addressInfoFormData,
  biodataFormData,
  educationInfoFormData,
  familyInfoFormData,
  finalWordsFormData,
  firstWordsFormData,
  generalInfoFormData,
  marriageInfoFormData,
  occupationInfoFormData,
  personalInfoFormData,
  primaryInfoFormData,
  profilePicFormData,
  religiousInfoFormData,
  spousePreferenceInfoFormData,
} from "./validations";

export type FirstWordsFormData = z.infer<typeof firstWordsFormData>;
export type PrimaryInfoFormData = z.infer<typeof primaryInfoFormData>;
export type GeneralInfoFormData = z.infer<typeof generalInfoFormData>;
export type AddressInfoFormData = z.infer<typeof addressInfoFormData>;
export type EducationInfoFormData = z.infer<typeof educationInfoFormData>;
export type OccupationInfoFormData = z.infer<typeof occupationInfoFormData>;
export type FamilyInfoFormData = z.infer<typeof familyInfoFormData>;
export type ReligiousInfoFormData = z.infer<typeof religiousInfoFormData>;
export type PersonalInfoFormData = z.infer<typeof personalInfoFormData>;
export type MarriageInfoFormData = z.infer<typeof marriageInfoFormData>;
export type SpousePreferenceInfoFormData = z.infer<
  typeof spousePreferenceInfoFormData
>;
export type ProfilePicFormData = z.infer<typeof profilePicFormData>;
export type FinalWordsFormData = z.infer<typeof finalWordsFormData>;

export type BiodataFormData = z.infer<typeof biodataFormData>;

export interface BiodataFormDataProps {
  biodataFormData: BiodataFormData;
  setBiodataFormData: (data: BiodataFormData) => void;
  handleSave: () => void;
  currentStep: BiodataFormStep;
  setCurrentStep: (key: string) => void;
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\lib\utils.ts
// --------------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\lib\validations.ts
// --------------------
import { z } from "zod";

export const optionalString = z.string().trim().optional().or(z.literal(""));
export const requiredString = z.string().trim();

export const firstWordsFormData = z.object({
  preApprovalAcceptTerms: z.boolean().refine((val) => val === true, {
    message: "আপনাকে শর্তসমূহ মেনে নিতে হবে।",
  }),
  preApprovalOathTruthfulInfo: z.boolean().refine((val) => val === true, {
    message: "আপনাকে সত্য তথ্য প্রদান করার শপথ করতে হবে।",
  }),
  preApprovalOathLegalResponsibility: z
    .boolean()
    .refine((val) => val === true, {
      message: "আপনাকে সকল আইনী ও পরকালীন দায়ভার স্বীকার করতে হবে।",
    }),
});

export const primaryInfoFormData = z.object({
  biodataType: requiredString.min(1, {
    message: "বায়োডাটা ধরন নির্বাচন করা আবশ্যক।",
  }),
  biodataFor: requiredString.min(1, {
    message: "বায়োডাটা কার জন্য তৈরি করা হচ্ছে তা নির্বাচন করুন।",
  }),
  fullName: requiredString.min(1, {
    message: "পূর্ণ নাম অবশ্যই প্রদান করতে হবে।",
  }),
  fatherName: requiredString.min(1, {
    message: "পিতার নাম অবশ্যই প্রদান করতে হবে।",
  }),
  motherName: requiredString.min(1, {
    message: "মাতার নাম অবশ্যই প্রদান করতে হবে।",
  }),
  email: requiredString
    .email({ message: "একটি বৈধ ইমেইল প্রদান করুন।" })
    .min(1, { message: "ইমেইল প্রদান করা আবশ্যক।" }),
  phoneNumber: requiredString
    .regex(/^\+?\d{10,15}$/, { message: "একটি বৈধ মোবাইল নম্বর প্রদান করুন।" })
    .min(1, { message: "মোবাইল নম্বর প্রদান করা আবশ্যক।" }),
  guardianContacts: z
    .array(
      z.object({
        relation: requiredString.min(1, {
          message: "অভিভাবকের সম্পর্ক প্রদান করা আবশ্যক।",
        }),
        fullName: requiredString.min(1, {
          message: "অভিভাবকের নাম প্রদান করা আবশ্যক।",
        }),
        phoneNumber: requiredString
          .regex(/^\+?\d{10,15}$/, {
            message: "একটি বৈধ মোবাইল নম্বর প্রদান করুন।",
          })
          .min(1, { message: "অভিভাবকের মোবাইল নম্বর প্রদান করা আবশ্যক।" }),
      })
    )
    .min(2, { message: "কমপক্ষে ২ জন অভিভাবকের তথ্য প্রয়োজন।" }),
});

export const generalInfoFormData = z.object({
  dateOfBirth: requiredString.min(1, {
    message: "জন্ম তারিখ প্রদান করা আবশ্যক।",
  }),
  maritalStatus: requiredString.min(1, {
    message: "বৈবাহিক অবস্থা নির্বাচন করা আবশ্যক।",
  }),
  skinTone: requiredString.min(1, {
    message: "গায়ের রং প্রদান করা আবশ্যক।",
  }),
  height: requiredString.min(1, {
    message: "উচ্চতা প্রদান করা আবশ্যক।",
  }),
  weight: requiredString.min(1, {
    message: "ওজন প্রদান করা আবশ্যক।",
  }),
  bloodGroup: requiredString.min(1, {
    message: "রক্তের গ্রুপ নির্বাচন করা আবশ্যক।",
  }),
  nationality: requiredString.min(1, {
    message: "জাতীয়তা প্রদান করা আবশ্যক।",
  }),
});

export const addressInfoFormData = z.object({
  addresses: z.array(
    z
      .object({
        type: requiredString.min(1, {
          message: "ঠিকানার ধরন প্রদান করা আবশ্যক।",
        }),
        location: requiredString.min(1, {
          message: "ঠিকানার অবস্থান প্রদান করা আবশ্যক।",
        }),
        // জেলা / স্টেট
        state: requiredString.min(1, {
          message: "নির্বাচন করা আবশ্যক।",
        }),
        // উপজেলা / শহর
        city: requiredString.min(1, {
          message: "নির্বাচন করা আবশ্যক।",
        }),
        detail: requiredString.min(1, {
          message: "ঠিকানার বিস্তারিত প্রদান করা আবশ্যক।",
        }),

        // বিদেশি ঠিকানা
        country: optionalString,
        cityzenshipStatus: optionalString,
      })
      .superRefine((data, ctx) => {
        if (data.type === "foregin" && !data.country) {
          if (!data.country) {
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              message: "দেশের নাম প্রদান করা আবশ্যক।",
              path: ["country"],
            });
          }
          if (!data.cityzenshipStatus) {
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              message: "নাগরিকত্বের অবস্থা প্রদান করা আবশ্যক।",
              path: ["cityzenshipStatus"],
            });
          }
        }
      })
  ),
});

export const educationInfoFormData = z.object({
  type: requiredString.min(1, {
    message: "শিক্ষার ধরন প্রদান করা আবশ্যক।",
  }),
  highestDegree: requiredString.min(1, {
    message: "সর্বোচ্চ শিক্ষাগত যোগ্যতা নির্বাচন করা আবশ্যক।",
  }),
  degrees: z.array(
    z.object({
      name: requiredString.min(1, {
        message: "ডিগ্রির নাম প্রদান করা আবশ্যক।",
      }),
      passYear: requiredString.min(1, {
        message: "পাসের বছর প্রদান করা আবশ্যক।",
      }),
      group: requiredString.min(1, {
        message: "শ্রেণী/বিভাগ নির্বাচন করা আবশ্যক।",
      }),
      institute: requiredString.min(1, {
        message: "শিক্ষাপ্রতিষ্ঠানের নাম প্রদান করা আবশ্যক।",
      }),
    })
  ),
  religiousEducation: z.array(optionalString).optional(),
  detail: optionalString, // Made optional to align with JSON
});

export const occupationInfoFormData = z.object({
  occupations: z.array(optionalString).min(1, {
    message: "পেশার ধরন প্রদান করা আবশ্যক।",
  }),
  detail: requiredString.min(1, {
    message: "পেশার বিস্তারিত তথ্য প্রদান করা আবশ্যক।",
  }),
  monthlyIncome: requiredString.min(1, {
    message: "মাসিক আয় প্রদান করা আবশ্যক।",
  }),
});

export const familyInfoFormData = z.object({
  parentsAlive: requiredString.min(1, {
    message: "পিতা-মাতার জীবিত থাকার অবস্থা নির্বাচন করুন।",
  }),
  fatherOccupation: requiredString.min(1, {
    message: "পিতার পেশা উল্লেখ করুন।",
  }),
  motherOccupation: requiredString.min(1, {
    message: "মাতার পেশা উল্লেখ করুন।",
  }),
  siblings: z.array(
    z.object({
      type: requiredString.min(1, {
        message: "ভাই বা বোনের ধরন নির্বাচন করুন।",
      }),
      occupation: requiredString.min(1, {
        message: "ভাই বা বোনের পেশা উল্লেখ করুন।",
      }),
      maritalStatus: requiredString.min(1, {
        message: "ভাই বা বোনের বৈবাহিক অবস্থা নির্বাচন করুন।",
      }),
      children: requiredString.min(1, {
        message: "সন্তানের সংখ্যা উল্লেখ করুন।",
      }),
    })
  ),
  fatherSideDetail: requiredString.min(1, {
    message: "পিতার পরিবারের বিস্তারিত তথ্য প্রদান করুন।",
  }),
  motherSideDetail: requiredString.min(1, {
    message: "মাতার পরিবারের বিস্তারিত তথ্য প্রদান করুন।",
  }),
  familyType: requiredString.min(1, {
    message: "পরিবারের ধরন নির্বাচন করুন।",
  }),
  familyBackground: requiredString.min(1, {
    message: "পরিবারের সামাজিক ও সাংস্কৃতিক পটভূমি উল্লেখ করুন।",
  }),
  livingCondition: requiredString.min(1, {
    message: "পরিবারের বসবাসের পরিবেশ সম্পর্কে উল্লেখ করুন।",
  }),
  wealthDescription: requiredString.min(1, {
    message: "পরিবারের আর্থিক অবস্থা সম্পর্কে সংক্ষিপ্ত বিবরণ দিন।",
  }),
});

export const religiousInfoFormData = z.object({
  type: requiredString.min(1, {
    message: "পেশার ধরন প্রদান করা আবশ্যক।",
  }),
  ideology: requiredString.min(1, {
    message: "ধর্মীয় কোন মতাদর্শ মেনে চলেন তা প্রদান করা আবশ্যক।",
  }),
  madhab: requiredString.min(1, {
    message: "কোন মাজহাব / মানহাজ অনুসরণ করেন তা নির্বাচন করা আবশ্যক।",
  }),
  praysFiveTimes: requiredString.min(1, {
    message: "প্রতিদিন পাঁচ ওয়াক্ত নামাজ পড়া হয় কিনা তা নির্বাচন করা আবশ্যক।",
  }),
  hasQazaPrayers: requiredString.min(1, {
    message: "আপনার কি নামাজ কাযা হয় তা নির্বাচন করা আবশ্যক।",
  }),
  canReciteQuranProperly: requiredString.min(1, {
    message: "শুদ্ধভাবে কুরআন তেলাওয়াত করতে পারেন কিনা তা নির্বাচন করা আবশ্যক।",
  }),
  avoidsHaramIncome: requiredString.min(1, {
    message:
      "হারাম উপার্জন বা সুদ-ঘুষ থেকে বিরত আছেন কিনা তা নির্বাচন করা আবশ্যক।",
  }),
  modestDressing: requiredString.min(1, {
    message: "আপনার পোশাকধারণ কেমন তা নির্বাচন করা আবশ্যক।",
  }),
  followsMahramRules: requiredString.min(1, {
    message: "মাহরাম/গাইরে-মাহরাম মেনে চলেন কিনা তা নির্বাচন করা আবশ্যক।",
  }),
  beliefAboutPirMurshidAndMazar: requiredString.min(1, {
    message:
      "পীর-মুরিদ ও মাজার সম্পর্কে আপনার ধারণা বা বিশ্বাস প্রদান করা আবশ্যক।",
  }),
  practicingSince: requiredString.min(1, {
    message:
      "কত সাল/সময় থেকে পরিপূর্ণভাবে দ্বীনের পথে চলা শুরু করেছেন তা প্রদান করা আবশ্যক।",
  }),
});

export const personalInfoFormData = z.object({
  beardStatus: requiredString.min(1, {
    message: "দয়া করে দাড়ি রাখার ব্যাপারে আপনার অবস্থান উল্লেখ করুন।",
  }),
  preferredOutfit: requiredString.min(1, {
    message: "আপনার বাহিরে পরার পছন্দের পোশাক নির্বাচন করুন।",
  }),
  entertainmentPreferences: requiredString.min(1, {
    message: "দয়া করে আপনি কোন ধরণের বিনোদন উপভোগ করেন তা উল্লেখ করুন।",
  }),
  healthConditions: requiredString.min(1, {
    message: "আপনার যদি কোনো মানসিক বা শারীরিক সমস্যা থাকে, তা উল্লেখ করুন।",
  }),
  personalTraits: z.array(optionalString).min(1, {
    message: "আপনার ব্যক্তিগত কিছু গুণাবলী উল্লেখ করুন।",
  }),
  genderEqualityView: requiredString.min(1, {
    message: "নারী-পুরুষ সমঅধিকারের বিষয়ে আপনার মতামত প্রদান করুন।",
  }),
  lgbtqOpinion: requiredString.min(1, {
    message: "LGBTQ সম্পর্কিত আপনার ধারণা বা মতামত লিখুন।",
  }),
  specialConditions: z.array(optionalString).min(1, {
    message: "আপনার ক্ষেত্রে প্রযোজ্য বিশেষ কোনো অবস্থা থাকলে তা উল্লেখ করুন।",
  }),
});

export const marriageInfoFormData = z.object({
  guardianApproval: requiredString.min(1, {
    message: "অভিভাবক আপনার বিয়েতে রাজি আছেন কিনা নির্বাচন করুন।",
  }),
  continueStudy: requiredString.min(1, {
    message: "বিয়ের পর আপনি পড়াশোনা চালিয়ে যেতে চান কিনা নির্বাচন করুন।",
  }),
  careerPlan: requiredString.min(1, {
    message: "বিয়ের পর আপনি চাকরি বা ব্যবসা করতে চান কিনা নির্বাচন করুন।",
  }),
  residence: requiredString.min(1, {
    message: "বিয়ের পর আপনি কোথায় থাকবেন তা উল্লেখ করুন।",
  }),
  arrangeHijab: requiredString.min(1, {
    message:
      "স্ত্রী পর্দা করতে চাইলে আপনি ব্যবস্থা রাখতে পারবেন কিনা নির্বাচন করুন।",
  }),
  dowryExpectation: requiredString.min(1, {
    message:
      "আপনার পরিবার পাত্রীপক্ষের কাছে যৌতুক বা উপহার আশা করে কিনা নির্বাচন করুন।",
  }),
  allowShowingPhotoOnline: requiredString.min(1, {
    message: "অনলাইনে আপনার ছবি দেখতে চাইলে দেখাতে রাজি কিনা নির্বাচন করুন।",
  }),
  additionalMarriageInfo: optionalString,
});

// export const spousePreferenceInfoFormData = z.object({
//   age: requiredString.min(1, {
//     message: "বয়স প্রদান করা আবশ্যক।",
//   }),
//   skinTone: z.array(optionalString).optional(),
//   height: requiredString.min(1, {
//     message: "উচ্চতা প্রদান করা আবশ্যক।",
//   }),
//   educationalQualification: requiredString.min(1, {
//     message: "শিক্ষাগত যোগ্যতা নির্বাচন করা আবশ্যক।",
//   }),
//   religiousEducationalQualification: z.array(optionalString).optional(),
//   address: optionalString,
//   maritalStatus: z.array(optionalString).optional(),
//   specialCategory: z.array(optionalString).optional(),
//   religiousType: z.array(optionalString).optional(),
//   occupation: z.array(optionalString).optional(),
//   familyBackground: z.array(optionalString).optional(),
//   secondMarrige: requiredString.min(1, {
//     message: "দ্বিতীয় বিয়ে সম্পর্কে নির্বাচন করা আবশ্যক।",
//   }),
//   location: requiredString.min(1, {
//     message: "অবস্থান নির্বাচন করা আবশ্যক।",
//   }),
//   qualities: requiredString.min(1, {
//     message: "জীবনসঙ্গীর বৈশিষ্ট্য বা গুণাবলী প্রদান করা আবশ্যক।",
//   }),
// });
export const spousePreferenceInfoFormData = z.object({
  age: requiredString.min(1, {
    message: "বয়স প্রদান করা আবশ্যক।",
  }),
  skinTone: z.array(optionalString).optional(),
  height: requiredString.min(1, {
    message: "উচ্চতা প্রদান করা আবশ্যক।",
  }),
  educationalQualification: requiredString.min(1, {
    message: "শিক্ষাগত যোগ্যতা নির্বাচন করা আবশ্যক।",
  }),
  religiousEducationalQualification: z.array(optionalString).optional(),
  address: optionalString,
  maritalStatus: z.array(optionalString).optional(),
  specialCategory: z.array(optionalString).optional(),
  religiousType: z.array(optionalString).optional(),
  occupation: z.array(optionalString).optional(),
  familyBackground: z.array(optionalString).optional(),
  secondMarriage: requiredString.min(1, {
    message: "দ্বিতীয় বিয়ে সম্পর্কে নির্বাচন করা আবশ্যক।",
  }),
  location: requiredString.min(1, {
    message: "অবস্থান নির্বাচন করা আবশ্যক।",
  }),
  qualities: requiredString.min(1, {
    message: "জীবনসঙ্গীর বৈশিষ্ট্য বা গুণাবলী প্রদান করা আবশ্যক।",
  }),
});
export const profilePicFormData = z.object({
  photoId: requiredString.min(1, {
    message: "প্রোফাইল ছবি প্রদান করা আবশ্যক।",
  }),
});

export const finalWordsFormData = z.object({
  postApprovalOathTruthfulInfo: z.boolean().refine((val) => val === true, {
    message: "আপনাকে বায়োডাটায় সকল তথ্য সত্য প্রদান করার শপথ করতে হবে।",
  }),
  postApprovalOathNoMisuse: z.boolean().refine((val) => val === true, {
    message:
      "আপনাকে সহজনিকাহ ম্যাট্রিমনি ওয়েবসাইটের কোনো তথ্য অসৎ কাজে ব্যবহার না করার শপথ করতে হবে।",
  }),
  postApprovalOathLegalResponsibility: z
    .boolean()
    .refine((val) => val === true, {
      message:
        "আপনাকে কোনো মিথ্যা তথ্য প্রদান করলে বা কোনো তথ্য অসৎ কাজে ব্যবহার করলে সকল আইনী এবং পরকালীন দায়ভার স্বীকার করতে হবে।",
    }),
});

export const biodataFormData = z.object({
  firstWordsFormData: firstWordsFormData,
  primaryInfoFormData: primaryInfoFormData,
  generalInfoFormData: generalInfoFormData,
  addressInfoFormData: addressInfoFormData,
  educationInfoFormData: educationInfoFormData,
  occupationInfoFormData: occupationInfoFormData,
  familyInfoFormData: familyInfoFormData,
  religiousInfoFormData: religiousInfoFormData,
  personalInfoFormData: personalInfoFormData,
  marriageInfoFormData: marriageInfoFormData,
  spousePreferenceInfoFormData: spousePreferenceInfoFormData,
  profilePicFormData: profilePicFormData,
  finalWordsFormData: finalWordsFormData,
});


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\helpers\axios\axiosBaseQuery.ts
// --------------------
/* eslint-disable @typescript-eslint/no-unused-vars */
import { IMeta } from "@/types";
import type { BaseQueryFn } from "@reduxjs/toolkit/query";
import type { AxiosError, AxiosRequestConfig } from "axios";
import { instance as axiosInstance } from "./axiosInstance";

export const axiosBaseQuery =
  (
    { baseUrl }: { baseUrl: string } = { baseUrl: "" }
  ): BaseQueryFn<
    {
      url: string;
      method?: AxiosRequestConfig["method"];
      data?: AxiosRequestConfig["data"];
      params?: AxiosRequestConfig["params"];
      headers?: AxiosRequestConfig["headers"];
      meta?: IMeta;
      contentType?: string;
    },
    unknown,
    unknown
  > =>
  async ({ url, method, data, params, contentType }) => {
    // console.log({ baseUrl, url, method, data, params, headers, contentType });
    try {
      const result = await axiosInstance({
        url: baseUrl + url,
        method,
        data,
        params,
        headers: {
          "Content-Type": contentType || "application/json",
        },
      });
      // console.log(result);
      return result;
      // return { data: result.data };
    } catch (axiosError) {
      const err = axiosError as AxiosError;
      console.log(err);
      return {
        error: {
          status: err.response?.status || err.status || 500,
          message: err.response?.data || err.message || "Something went wrong!",
        },
      };
    }
  };


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\helpers\axios\axiosInstance.ts
// --------------------
import { authAccessKey } from "@/constant/authkey";
import { IGenericErrorResponse } from "@/types";
import { getCookie } from "@/utils/cookieHelper";
import axios from "axios";
import { toast } from "sonner";

const instance = axios.create({
  baseURL: `${process.env.NEXT_PUBLIC_SERVER_URL}`,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
  timeout: 60000,
});

// Request Interceptor
instance.interceptors.request.use(
  function (config) {
    const accessToken = getCookie(authAccessKey);

    if (accessToken) {
      config.headers.Authorization = `${accessToken}`;
    }
    return config;
  },
  function (error) {
    return Promise.reject(error);
  }
);

// Response Interceptor
instance.interceptors.response.use(
  function (response) {
    response.data = {
      success: response?.data?.success,
      statusCode: response?.data?.statusCode,
      message: response?.data?.message,
      data: response?.data?.data,
      meta: response?.data?.meta,
    };
    return response;
  },
  function (error) {
    // Handle Unauthorized (401) or Forbidden (403)
    if (error?.response?.status === 401 || error?.response?.status === 403) {
      toast.error(error?.response?.data?.message || "UnAuthorized Access.");

      window.location.href = "/login"; // Redirect to login
      return Promise.reject("Unauthorized. Redirecting to login.");
    }

    // General Error Handling
    const responseObject: IGenericErrorResponse = {
      statusCode: error?.response?.data?.statusCode || 500,
      message: error?.response?.data?.message || "Something went wrong!",
      errorMessages: error?.response?.data?.errorMessages || [],
    };
    return Promise.reject(responseObject);
  }
);

export { instance };


// --------------------
// File: D:\Projects-CLIENTS\SohojNikah\sohoznikah-app\src\hooks\use-mobile.ts
// --------------------
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}


